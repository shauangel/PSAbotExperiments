[
  {
    "link": "https://stackoverflow.com/questions/370357/unboundlocalerror-trying-to-use-a-variable-supposed-to-be-global-that-is-rea",
    "keywords": [],
    "tags": [
      "python",
      "scope",
      "global-variables",
      "local-variables",
      "shadowing"
    ],
    "question": {
      "id": 370357,
      "title": "UnboundLocalError trying to use a variable (supposed to be global) that is (re)assigned (even after first use)",
      "content": "When I try this code: I get an error from the print(c) line that says: in newer versions of Python, or in some older versions. If I comment out c += 1, both prints are successful. I don't understand: why does printing a and b work, if c does not? How did c += 1 cause print(c) to fail, even when it comes later in the code? It seems like the assignment c += 1 creates a local variable c, which takes precedence over the global c. But how can a variable \"steal\" scope before it exists? Why is c apparently local here? See also Using global variables in a function for questions that are simply about how to reassign a global variable from within a function, and Is it possible to modify a variable in python that is in an outer (enclosing), but not global, scope? for reassigning from an enclosing function (closure). See Why isn't the 'global' keyword needed to access a global variable? for cases where OP expected an error but didn't get one, from simply accessing a global without the global keyword. See How can a name be \"unbound\" in Python? What code can cause an `UnboundLocalError`? for cases where OP expected the variable to be local, but has a logical error that prevents assignment in every case.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 73661023,
        "score": 2,
        "vote": 0,
        "content": "Python decides the scope of the variable ahead of time. Unless explicitly overridden using the global or nonlocal (in 3.x) keywords, variables will be recognized as local based on the existence of any operation that would change the binding of a name. That includes ordinary assignments, augmented assignments like +=, various less obvious forms of assignment (the for construct, nested functions and classes, import statements...) as well as unbinding (using del). The actual execution of such code is irrelevant. This is also explained in the documentation. Contrary to popular belief, Python is not an \"interpreted\" language in any meaningful sense. (Those are vanishingly rare now.) The reference implementation of Python compiles Python code in much the same way as Java or C#: it is translated into opcodes (\"bytecode\") for a virtual machine, which is then emulated. Other implementations must also compile the code - so that SyntaxErrors can be detected without actually running the code, and in order to implement the \"compilation services\" portion of the standard library. During compilation (whether on the reference implementation or not), Python follows simple rules for decisions about variable scope in a function: If the function contains a global or nonlocal declaration for a name, that name is treated as referring to the global scope or the first enclosing scope that contains the name, respectively. Otherwise, if it contains any syntax for changing the binding (either assignment or deletion) of the name, even if the code would not actually change the binding at runtime, the name is local. Otherwise, it refers to either the first enclosing scope that contains the name, or the global scope otherwise. Importantly, the scope is resolved at compile time. The generated bytecode will directly indicate where to look. In CPython 3.8 for example, there are separate opcodes LOAD_CONST (constants known at compile time), LOAD_FAST (locals), LOAD_DEREF (implement nonlocal lookup by looking in a closure, which is implemented as a tuple of \"cell\" objects), LOAD_CLOSURE (look for a local variable in the closure object that was created for a nested function), and LOAD_GLOBAL (look something up in either the global namespace or the builtin namespace). There is no \"default\" value for these names. If they haven't been assigned before they're looked up, a NameError occurs. Specifically, for local lookups, UnboundLocalError occurs; this is a subtype of NameError. There are some important considerations here, keeping in mind that the syntax rule is implemented at compile time, with no static analysis: The interested reader, using the reference implementation, is encouraged to inspect each of these examples using the dis standard library module. The problem works the same way, mutatis mutandis, for both global and nonlocal keywords. (Python 2.x does not have nonlocal.) Either way, the keyword is necessary to assign to the variable from the outer scope, but is not necessary to merely look it up, nor to mutate the looked-up object. (Again: += on a list mutates the list, but then also reassigns the name to the same list.) As seen above, Python does not treat any names as being \"in builtin scope\". Instead, the builtins are a fallback used by global-scope lookups. Assigning to these variables will only ever update the global scope, not the builtin scope. However, in the reference implementation, the builtin scope can be modified: it's represented by a variable in the global namespace named __builtins__, which holds a module object (the builtins are implemented in C, but made available as a standard library module called builtins, which is pre-imported and assigned to that global name). Curiously, unlike many other built-in objects, this module object can have its attributes modified and deld. (All of this is, to my understanding, supposed to be considered an unreliable implementation detail; but it has worked this way for quite some time now.)",
        "abstract": ""
      },
      {
        "id": 71914016,
        "score": -1,
        "vote": 0,
        "content": "You can also get this message if you define a variable with the same name as a method. For example: The solution, is to rename method teams() to something else like get_teams(). Since it is only used locally, the Python message is rather misleading! You end up with something like this to get around it:",
        "abstract": ""
      },
      {
        "id": 75045222,
        "score": 0,
        "vote": 0,
        "content": "In this case of n = num below, n is a local variable and num is a global variable: So, there is no error: But in this case of num = num below, num on the both side are local variables and num on the right side is not defined yet: So, there is the error below: UnboundLocalError: local variable 'num' referenced before assignment In addition, even if removing num = 10 as shown below: There is the same error below: UnboundLocalError: local variable 'num' referenced before assignment So to solve the error above, put global num before num = num as shown below: Then, the error above is solved as shown below: Or, define the local variable num = 5 before num = num as shown below: Then, the error above is solved as shown below:",
        "abstract": ""
      },
      {
        "id": 72633950,
        "score": 0,
        "vote": 0,
        "content": "This issue can also occur when the del keyword is utilized on the variable down the line, after initialization, typically in a loop or a conditional block.",
        "abstract": ""
      },
      {
        "id": 370363,
        "score": 291,
        "vote": 0,
        "content": "Python treats variables in functions differently depending on whether you assign values to them from inside or outside the function.  If a variable is assigned within a function, it is treated by default as a local variable.  Therefore, when you uncomment the line, you are trying to reference the local variable c before any value has been assigned to it. If you want the variable c to refer to the global c = 3 assigned before the function, put as the first line of the function. As for python 3, there is now that you can use to refer to the nearest enclosing function scope that has a c variable.",
        "abstract": ""
      },
      {
        "id": 370380,
        "score": 90,
        "vote": 0,
        "content": "Python is a little weird in that it keeps everything in a dictionary for the various scopes.  The original a,b,c are in the uppermost scope and so in that uppermost dictionary.  The function has its own dictionary.  When you reach the print(a) and print(b) statements, there's nothing by that name in the dictionary, so Python looks up the list and finds them in the global dictionary. Now we get to c+=1, which is, of course, equivalent to c=c+1.  When Python scans that line, it says \"aha, there's a variable named c, I'll put it into my local scope dictionary.\"  Then when it goes looking for a value for c for the c on the right hand side of the assignment, it finds its local variable named c, which has no value yet, and so throws the error. The statement global c mentioned above simply tells the parser that it uses the c from the global scope and so doesn't need a new one. The reason it says there's an issue on the line it does is because it is effectively looking for the names before it tries to generate code, and so in some sense doesn't think it's really doing that line yet.  I'd argue that is a usability bug, but it's generally a good practice to just learn not to take a compiler's messages too seriously. If it's any comfort, I spent probably a day digging and experimenting with this same issue before I found something Guido had written about the dictionaries that Explained Everything. It doesn't scan the code twice, but it does scan the code in two phases, lexing and parsing. Consider how the parse of this line of code works.  The lexer reads the source text and breaks it into lexemes, the \"smallest components\" of the grammar.  So when it hits the line it breaks it up into something like The parser eventually wants to make this into a parse tree and execute it, but since it's an assignment, before it does, it looks for the name c in the local dictionary, doesn't see it, and inserts it in the dictionary, marking it as uninitialized. In a fully compiled language, it would just go into the symbol table and wait for the parse, but since it WON'T have the luxury of a second pass, the lexer does a little extra work to make life easier later on.   Only, then it sees the OPERATOR, sees that the rules say \"if you have an operator += the left hand side must have been initialized\" and says \"whoops!\" The point here is that it hasn't really started the parse of the line yet.  This is all happening sort of preparatory to the actual parse, so the line counter hasn't advanced to the next line.  Thus when it signals the error, it still thinks its on the previous line. As I say, you could argue it's a usability bug, but its actually a fairly common thing.  Some compilers are more honest about it and say \"error on or around line XXX\", but this one doesn't.",
        "abstract": ""
      },
      {
        "id": 476123,
        "score": 2,
        "vote": 0,
        "content": "This is not a direct answer to your question, but it is closely related, as it's another gotcha caused by the relationship between augmented assignment and function scopes. In most cases, you tend to think of augmented assignment (a += b) as exactly equivalent to simple assignment (a = a + b). It is possible to get into some trouble with this though, in one corner case. Let me explain: The way Python's simple assignment works means that if a is passed into a function (like func(a); note that Python is always pass-by-reference), then a = a + b will not modify the a that is passed in. Instead, it will just modify the local pointer to a.  But if you use a += b, then it is sometimes implemented as: or sometimes (if the method exists) as: In the first case (as long as a is not declared global), there are no side-effects outside local scope, as the assignment to a is just a pointer update. In the second case, a will actually modify itself, so all references to a will point to the modified version. This is demonstrated by the following code: So the trick is to avoid augmented assignment on function arguments (I try to only use it for local/loop variables). Use simple assignment, and you will be safe from ambiguous behaviour. ",
        "abstract": ""
      },
      {
        "id": 370364,
        "score": 12,
        "vote": 0,
        "content": "Python has rather interesting behavior when you try traditional global variable semantics.  I don't remember the details, but you can read the value of a variable declared in 'global' scope just fine, but if you want to modify it, you have to use the global keyword.  Try changing test() to this: Also, the reason you are getting this error is because you can also declare a new variable inside that function with the same name as a 'global' one, and it would be completely separate.  The interpreter thinks you are trying to make a new variable in this scope called c and modify it all in one operation, which isn't allowed in Python because this new c wasn't initialized.",
        "abstract": ""
      },
      {
        "id": 40409182,
        "score": 2,
        "vote": 0,
        "content": "c+=1 assigns c, python assumes assigned variables are local, but in this case it hasn't been declared locally. Either use the global or nonlocal keywords.  nonlocal works only in python 3, so if you're using python 2 and don't want to make your variable global, you can use a mutable object:",
        "abstract": ""
      },
      {
        "id": 34153129,
        "score": 0,
        "vote": 0,
        "content": "The best way to reach class variable is directly accesing by class name",
        "abstract": ""
      },
      {
        "id": 24035261,
        "score": 8,
        "vote": 0,
        "content": "The best example that makes it clear is: when calling foo() , this also raises UnboundLocalError although we will never reach to line bar=0, so logically local variable should never be created. The mystery lies in \"Python is an Interpreted Language\" and the declaration of the function foo is interpreted as a single statement (i.e. a compound statement), it just interprets it dumbly and creates local and global scopes. So bar is recognized in local scope before execution. For more examples like this Read this post: http://blog.amir.rachum.com/blog/2013/07/09/python-common-newbie-mistakes-part-2/ This post provides a Complete Description and Analyses of the Python Scoping of variables:",
        "abstract": ""
      },
      {
        "id": 1745180,
        "score": 5,
        "vote": 0,
        "content": "Here are two links that may help 1: docs.python.org/3.1/faq/programming.html?highlight=nonlocal#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value 2: docs.python.org/3.1/faq/programming.html?highlight=nonlocal#how-do-i-write-a-function-with-output-parameters-call-by-reference link one describes the error UnboundLocalError.  Link two can help with with re-writing your test function.  Based on link two, the original problem could be rewritten as:",
        "abstract": ""
      },
      {
        "id": 370830,
        "score": 52,
        "vote": 0,
        "content": "Taking a look at the disassembly may clarify what is happening: As you can see, the bytecode for accessing a is LOAD_FAST, and for b, LOAD_GLOBAL.  This is because the compiler has identified that a is assigned to within the function, and classified it as a local variable.  The access mechanism for locals is fundamentally different for globals - they are statically assigned an offset in the frame's variables table, meaning lookup is a quick index, rather than the more expensive dict lookup as for globals.  Because of this, Python is reading the print a line as \"get the value of local variable 'a' held in slot 0, and print it\", and when it detects that this variable is still uninitialised, raises an exception.",
        "abstract": ""
      },
      {
        "id": 370752,
        "score": 2,
        "vote": 0,
        "content": "The Python interpreter will read a function as a complete unit. I think of it as reading it in two passes, once to gather its closure (the local variables), then again to turn it into byte-code. As I'm sure you were already aware, any name used on the left of a '=' is implicitly a local variable. More than once I've been caught out by changing a variable access to a += and it's suddenly a different variable. I also wanted to point out it's not really anything to do with global scope specifically. You get the same behaviour with nested functions.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/75285659/unboundlocalerror-local-variable-hoc-sinh-dang-nhap-referenced-before-assignm",
    "keywords": [],
    "tags": [
      "python",
      "arrays",
      "variables",
      "undefined",
      "local"
    ],
    "question": {
      "id": 75285659,
      "title": "UnboundLocalError: local variable &#39;hoc_sinh_dang_nhap&#39; referenced before assignment",
      "content": "P/S: The text in my code is vietnamese, if you are a foreign, you can use Google Translate to understand. My code is an average calculator for teachers to calculate. As you can see in the code. The output is: Thank you very much for your helping!!!",
      "abstract": ""
    },
    "answers": [
      {
        "id": 75285878,
        "score": 0,
        "vote": 0,
        "content": "You have to explicitly tell the function that you are using a global variable.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/74454491/unboundlocalerror-variable-referenced-before-assignment",
    "keywords": [],
    "tags": [
      "python",
      "unbound"
    ],
    "question": {
      "id": 74454491,
      "title": "UnboundLocalError - variable referenced before assignment",
      "content": "I have the following function that I need help debugging. I am getting an error saying \"in checkValidMove\ni\nUnboundLocalError: local variable 'i' referenced before assignment\" How can I fix this? Please see the function below. Thanks!",
      "abstract": ""
    },
    "answers": [
      {
        "id": 74454524,
        "score": 0,
        "vote": 0,
        "content": "I'm assuming that since you want to access the value of i, it should be properly indented under the appropriate loops. (Do the same for the others)",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/74412503/cannot-access-local-variable-a-where-it-is-not-associated-with-a-value-but",
    "keywords": [],
    "tags": [
      "python"
    ],
    "question": {
      "id": 74412503,
      "title": "&quot;cannot access local variable &#39;a&#39; where it is not associated with a value&quot;, but the value is defined",
      "content": "I don't know why when a is located in def test() it can not be found and gives the error UnboundLocalError: cannot access local variable 'a' where it is not associated with a value I tried setting a as global a or using a nonlocal modifier on it inside the def but it doesn't seem to work. Is there a way I can get it to recognize a and run properly?",
      "abstract": ""
    },
    "answers": [
      {
        "id": 74412647,
        "score": 1,
        "vote": 0,
        "content": "To access a global variable within a function you must specify it with global. Otherwise, the variable inside the function is a local variable that only has utility inside that function. That's why you get the error: \"UnboundLocalError: local variable 'a' referenced before assignment\". Inside the function you haven't defined the variable 'a' yet, either local or global.",
        "abstract": ""
      },
      {
        "id": 74412646,
        "score": 4,
        "vote": 0,
        "content": "Python variables are scope based. This means one cannot access a value declared inside a function. But you can access a variable declared outside a function. This would fail: this would print 1: Notice you can access it. You'll fail if you want to update it. This would fail too: What you need is no tell the interpreter to find variable a in the global scope. Warning: It's not a good practice to use global variables. So better make sure the function is getting the value.",
        "abstract": ""
      },
      {
        "id": 74412557,
        "score": 0,
        "vote": 0,
        "content": "You need to pass a to the function test. Python thinks as the a in the function as a local variable.\nThis will work:",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/74297211/why-am-i-getting-unboundlocalerror-local-variable-value-referenced",
    "keywords": [],
    "tags": [
      "python"
    ],
    "question": {
      "id": 74297211,
      "title": "Why am I getting &#39;UnboundLocalError: local variable &#39;value&#39; referenced&#39;?",
      "content": "I just learned what classes are today so I'm hoping this doesn't look too bad. 'model' refers to the model year. I'm trying to return the depreciated value of the input price after x amount of years. Not sure why I'm getting this error. I tried making 'value' global but that did not work.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 74297685,
        "score": 0,
        "vote": 0,
        "content": "The issue is that the variable \"value\" actually is defined within the \"for\" loop, and that is its scope.  So that variable and its information is not known outside of that loop.  The program would most likely want/need a definition of that variable that would be visible within the class.  With that in mind and testing out the code I made a few tweaks to the program.  Following is a revised version of your program. Following are some key points. With those revisions in place, a test run of the program was done. Some print formatting would be beneficial for the current value but this should highlight the setup and use of objects based upon class definitions. Give that a try and see if it meets the spirit of your project.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/71229025/why-am-i-getting-unboundlocalerror-local-variable-coffee-machine-referenced-b",
    "keywords": [],
    "tags": [
      "python",
      "variables"
    ],
    "question": {
      "id": 71229025,
      "title": "Why am I getting &quot;UnboundLocalError local variable &#39;coffee_machine&#39; referenced before assignment&quot; despite coffee_machine being a global variable?",
      "content": "",
      "abstract": ""
    },
    "answers": [
      {
        "id": 71229058,
        "score": 1,
        "vote": 0,
        "content": "You have not declared global coffee_machine at the start of the function, and thus it's not forced to be global, and within the function you try setting a value to it, which makes it local.\nAll that's needed to be done is adding that global line which will force it to be global, like so:",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/71164122/python-giving-me-unboundlocalerror-local-variable-referenced-before-assignment",
    "keywords": [],
    "tags": [
      "python"
    ],
    "question": {
      "id": 71164122,
      "title": "python giving me UnboundLocalError: local variable referenced before assignment when trying to work with variables",
      "content": "So I'm currently learning to code in python and I wrote this basic text game. The idea is that you fight a boss and you have 66% chance of winning the fight, but if you lose (33% chance) you lose a life and if you have 0 lives you lose the game. The problem is with the lives variable. It's first set to 3 and the program is supposed to subtract 1 live from the player after each loss and do a sys.exit when lives variable is 0. However after the first loss the program crashes and gives this error: here is my code:",
      "abstract": ""
    },
    "answers": [
      {
        "id": 71164410,
        "score": 1,
        "vote": 0,
        "content": "According to Python documentation, if the compiler sees a variable assignment in a function/method (local scope), it will automatically mark that name as local and hence not consider any similarly named outside variables. That is why, when it sees that before assignment of the local variable it is used inside function for something else (to check a condition in your case), it will throw an error that you actually are trying to use a variable which has not been assigned yet (in local terms). If you changed lives = lives - 1 to new_lives = lives - 1, then the compiler would treat lives as a global variable and not throw an Exception. But this would create more problems in your case. I suggest passing lives as an argument to the function -  def boss(lives): and call it in your loop by passing lives boss(lives).",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/10851906/python-3-unboundlocalerror-local-variable-referenced-before-assignment",
    "keywords": [],
    "tags": [
      "python",
      "python-3.x",
      "scope"
    ],
    "question": {
      "id": 10851906,
      "title": "Python 3: UnboundLocalError: local variable referenced before assignment",
      "content": "The following code gives the error UnboundLocalError: local variable 'Var1' referenced before assignment: How can I fix this?",
      "abstract": ""
    },
    "answers": [
      {
        "id": 10851939,
        "score": 103,
        "vote": 0,
        "content": "You can fix this by passing parameters rather than relying on Globals",
        "abstract": ""
      },
      {
        "id": 10852003,
        "score": 700,
        "vote": 0,
        "content": "This is because, even though Var1 exists, you're also using an assignment statement on the name Var1 inside of the function (Var1 -= 1 at the bottom line). Naturally, this creates a variable inside the function's scope called Var1 (truthfully, a -= or += will only update (reassign) an existing variable, but for reasons unknown (likely consistency in this context), Python treats it as an assignment). The Python interpreter sees this at module load time and decides (correctly so) that the global scope's Var1 should not be used inside the local scope, which leads to a problem when you try to reference the variable before it is locally assigned. Using global variables, outside of necessity, is usually frowned upon by Python developers, because it leads to confusing and problematic code. However, if you'd like to use them to accomplish what your code is implying, you can simply add, inside the top of your function: This will tell Python that you do not intend to define a Var1 or Var2 variable inside the function's local scope. The Python interpreter sees this at module load time and decides (correctly so) to look up any references to the aforementioned variables in the global scope.",
        "abstract": ""
      },
      {
        "id": 21836774,
        "score": 5,
        "vote": 0,
        "content": "Why not simply return your calculated value and let the caller modify the global variable. It's not a good idea to manipulate a global variable within a function, as below: or even make local copies of the global variables and work with them and return the results which the caller can then assign appropriately",
        "abstract": ""
      },
      {
        "id": 26579841,
        "score": 14,
        "vote": 0,
        "content": "I don't like this behavior, but this is how Python works. The question has already been answered by others, but for completeness, let me point out that Python 2 has more such quirks. Python 2.7.6 returns an error: Python sees the f is used as a local variable in [f for f in [1, 2, 3]], and decides that it is also a local variable in f(3). You could add a global f statement: It does work; however, f becomes 3 at the end... That is, print [f for f in [1, 2, 3]] now changes the global variable f to 3, so it is not a function any more. Fortunately, it works fine in Python3 after adding the parentheses to print.",
        "abstract": ""
      },
      {
        "id": 10852006,
        "score": 158,
        "vote": 0,
        "content": "If you set the value of a variable inside the function, python understands it as creating a local variable with that name. This local variable masks the global variable. In your case, Var1 is considered as a local variable, and it's used before being set, thus the error. To solve this problem, you can explicitly say it's a global by putting global Var1 in you function.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/72836900/why-did-it-say-unboundlocalerror-local-variable-a-referenced-before-assignmen",
    "keywords": [],
    "tags": [
      "python",
      "error-handling",
      "global-variables",
      "local-variables"
    ],
    "question": {
      "id": 72836900,
      "title": "Why did it say UnboundLocalError: local variable &#39;a&#39; referenced before assignment? a is a global variable. (Python)",
      "content": "Console: UnboundLocalError: local variable 'a' referenced before assignment",
      "abstract": ""
    },
    "answers": [
      {
        "id": 72836918,
        "score": 2,
        "vote": 0,
        "content": "You need to declare it's a global in function. When you want to change the value of global variable inside function.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/53956502/unboundlocalerror-for-local-variable-value-referenced-before-assignment",
    "keywords": [],
    "tags": [
      "python"
    ],
    "question": {
      "id": 53956502,
      "title": "UnboundLocalError for local variable &#39;value&#39; referenced before assignment",
      "content": "The code below can be run, but it always results in the error UnboundLocalError: local variable 'value' referenced before assignment when one attempts to type. I've been on many sites, but can't seem to apply the solutions I get to my specific situation: Please let me know if there is something wrong with the conditions.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 53956563,
        "score": 3,
        "vote": 0,
        "content": "You don't define value if no conditions execute. So, what value must be printed if x == '1'? The solution is to define a default value before if:",
        "abstract": ""
      },
      {
        "id": 53956671,
        "score": 0,
        "vote": 0,
        "content": "On a side note (too long for comment), your code could be simplified quite a bit. For instance, you could be using a look up table as in:",
        "abstract": ""
      }
    ]
  }
]