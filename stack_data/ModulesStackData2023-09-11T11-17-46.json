[{"link": "https://stackoverflow.com/questions/74451244/how-to-create-a-pyc-file-without-terminal-in-windows", "keywords": [], "tags": ["python", "terminal", "compilation"], "question": {"id": 74451244, "title": "how to create a pyc file without terminal in windows", "content": "I made a project using tkinter and now I want to compile it (python -m compileall) but I don`t want the terminal to appear. Does anybody know what I could do? python -m compileall", "abstract": ""}, "answers": []}, {"link": "https://stackoverflow.com/questions/5607283/how-can-i-manually-generate-a-pyc-file-from-a-py-file", "keywords": [], "tags": ["python"], "question": {"id": 5607283, "title": "How can I manually generate a .pyc file from a .py file", "content": "For some reason, I can not depend on Python's \"import\" statement to generate .pyc file automatically Is there a way to implement a function as following?", "abstract": ""}, "answers": [{"id": 53914453, "score": 17, "vote": 0, "content": "Normally the following command compilies a python project: In Python2 it compiles all .py files to .pyc files in a project which contains packages as well as modules. Whereas in Python3 it compiles all .py files to __pycache__ folders in a project which contains packages as well as modules. With browning from this post: You can enforce the same layout of .pyc files in the folders as in\nPython2 by using: python3 -m compileall -b <pythonic-project-name> The option -b triggers the output of .pyc files to their\nlegacy-locations (i.e. the same as in Python2).", "abstract": ""}, {"id": 61899114, "score": 1, "vote": 0, "content": "If you are using command line, use python -m compileall <argument> to compile python code to python binary code.\nEx: python -m compileall -x ./* Or,\nYou can use this code to compile your library into byte-code: look at \u261e docs.python.org for detailed documentation", "abstract": ""}, {"id": 65911347, "score": 1, "vote": 0, "content": "", "abstract": ""}, {"id": 22779209, "score": 322, "vote": 0, "content": "You can use compileall in the terminal. The following command will go recursively into sub directories and make pyc files for all the python files it finds. The compileall module is part of the python standard library, so you don't need to install anything extra to use it. This works exactly the same way for python2 and python3.", "abstract": ""}, {"id": 38426786, "score": 61, "vote": 0, "content": "I found several ways to compile python scripts into bytecode Using py_compile in terminal: -m specifies the module(s) name to be compiled.  Or, for interactive compilation of files Using py_compile.compile: Using py_compile.main(): It compiles several files at a time. The list can grow as long as you wish. Alternatively, you can obviously pass a list of files in main or even file names in command line args. Or, if you pass ['-'] in main then it can compile files interactively. Using compileall.compile_dir(): It compiles every single Python file present in the supplied directory. Using compileall.compile_file(): Take a look at the links below: https://docs.python.org/3/library/py_compile.html https://docs.python.org/3/library/compileall.html", "abstract": ""}, {"id": 48297845, "score": 4, "vote": 0, "content": "To match the original question requirements (source path and destination path) the code should be like that: If the input code has errors then the py_compile.PyCompileError exception is raised.", "abstract": ""}, {"id": 32686745, "score": 75, "vote": 0, "content": "You can compile individual files(s) from the command line with:", "abstract": ""}, {"id": 5607315, "score": 66, "vote": 0, "content": "It's been a while since I last used Python, but I believe you can use py_compile:", "abstract": ""}, {"id": 5615653, "score": 19, "vote": 0, "content": "I would use compileall. It works nicely both from scripts and from the command line. It's a bit higher level module/tool than the already mentioned py_compile that it also uses internally.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/17737579/how-can-i-create-a-pyc-file-from-a-function", "keywords": [], "tags": ["python", "reverse-engineering", "bytecode", "pyc"], "question": {"id": 17737579, "title": "How can I create a pyc file from a function?", "content": "I'm in a game coded in python, and I can access all modules and their functions. I wan't to get a .pyc file of some of the larger functions so that I can put it through dePython or something similar. It would be a huge pain to read these functions manually. Say I have Module.function, what can I do to get that function into a .pyc file? Thanks!", "abstract": ""}, "answers": [{"id": 61271815, "score": 3, "vote": 0, "content": "The function write_pycfile() from xasm can write a pyc file. It takes an \"asm\" object but it needs basically a Python interpreter version and a list of code object to write. It uses functions mostly from xdis. Here is a modified version to show basically how this works: Now run it and disassemble: Finally decompile using uncompyle6:", "abstract": ""}, {"id": 17738043, "score": 1, "vote": 0, "content": "You can either import the module to have .pyc automatically generated, or if you prefer to do it in a programmatic manner, use py_compile module: http://docs.python.org/2/library/py_compile.html", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/66377239/hand-write-a-pyc-file", "keywords": [], "tags": ["python", "python-3.x"], "question": {"id": 66377239, "title": "Hand write a pyc file?", "content": "I am trying to write a compiler that compiles to a pyc file but I am really struggling with what the actual contents of a pyc file is and how it all works. To get more comfortable with the format I wanted to hand write a pyc file but I cannot find any resources on this. I was hoping someone here might have a resource or might be able to tell me how I could go about this. Thanks for any help!", "abstract": ""}, "answers": [{"id": 66377506, "score": 1, "vote": 0, "content": "The short answer is you can't. There isn't a formal spec for how the bytecode must be defined. There is a PEP spec, but nothing for the virtual machine running bytecode (as far as I know). You can either go through code to see how it could be done or you can reverse engineer pieces of it using dis.dis But this type of stuff can change from version to version.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/59124325/where-can-i-find-the-pyc-file", "keywords": [], "tags": ["python-3.x", "compilation", "pyc"], "question": {"id": 59124325, "title": "Where can i find the pyc file?", "content": "The python3 version is Python 3.5.3 in my os. Saved and exit. As far as i knew, python source file was parsed and compiled into pyc file when to execute it. There is no pyc file in workspace directory,where is the complied print.py file then? The find command still can't search pyc file such as  print.pyc .\npython3 -m compileall can create the compiled file for print.py manually,where is the compiled file for print.py created by python itself?\nDoes python3 delete the print.pyc after executing python3 print.py?", "abstract": ""}, "answers": [{"id": 59359505, "score": 1, "vote": 0, "content": "Ok this is one big of a problem I ever had when I'm started to learn python few years back. Python is just like any other oop programming languages which does compilation before program execution. When python compiles its program, it creates the bite code which is you can see by standard library called dis. Sometimes (not always) python creates .pyc file for the running programs to improve the speed up the loading of import modules but not to improve the execution time. So hope you get intuition behind .pyc, furthermore .pyc only creates when your module is import by another module.  As an example, Imagine you have this print.py (Let's modify it shall we) Suppose this module imported by another custom module called views.py. In views.py there is a module_view which will use the return_print_statment So in the compilation, since you have imported the print.py python will generate print.pyc file for it. In python 2.0 python will put the .pyc to right next to your program in the same folder, but in python3 instead of creating in the same folder python will create separate folder called __pycache__ in the same directory to put these byte codes.", "abstract": ""}, {"id": 59124468, "score": 0, "vote": 0, "content": "python3 -m compileall . To compile all .py files in your current directory. http://effbot.org/pyfaq/how-do-i-create-a-pyc-file.htm ", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/52478939/how-to-compile-python-program-convert-to-pyc-in-python3", "keywords": [], "tags": ["python", "python-3.x", "python-2.7", "compilation"], "question": {"id": 52478939, "title": "How to compile python program ( convert to pyc) in python3", "content": "There are two ways to generate pyc in python2: 1. 2. python -m compileall ./ How to do it python3? I tried both of the above approaches, both are not generating .pyc file in python3. Please help.", "abstract": ""}, "answers": [{"id": 52479353, "score": 2, "vote": 0, "content": "Thanks @meissner_ import py_compile py_compile.compile(\"file.py\") #compiles single file named file.py python -m compileall ./ #combines all programs under current directory Both approaches work in Python2 and Python3. Only difference in Python2 and Python3 is: Python2 generates .pyc file in the same directory whereas  Python3 creates it in a folder named __pycache__ inside the same directory.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/49293169/python-when-are-pyc-files-created", "keywords": [], "tags": ["python"], "question": {"id": 49293169, "title": "Python: When are .pyc files created?", "content": "There are already a couple of question on Python's .pyc files but I have not read about 1) when (in what circumstances) are these files created and 2) whether there is a good reason to keep them. More specifically: About (1): In 200 or more PY files (new and old ones) that I have run, I have seen only a couple of .pyc files created. However, in Python's own (installation) directory there are currently 1160 .pyc files, about half of the .py files! I don't know how many of them existed already on Python's installation, but about 450 of them have been certainly created after that. So, it's a mystery to me in what circumstances these files are created. Or are they always automatically created and then they are supposed to be deleted after the PY program terminates? About (2): I have compared the execution timing .py against .pyc files and I cannot see any (significant) difference. I don't have large .py files or .py files with heave computations, etc. to test. But as far as \"regular\" files (small to medium size and with regular computations) are concerned, the .pyc files seem to be certainly useless. So, why should one keep them?  ... Later: I just realized that a .pyc file is created only when its corresp. .py file is used as a module, i.e. it is imported. OK, there's so meaning in this! :)", "abstract": ""}, "answers": [{"id": 49293223, "score": 3, "vote": 0, "content": "In order to understand about the reason for these .pyc files, you should take a look at this question and the nice graphic in the last answer, too: If Python is interpreted, what are .pyc files?", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/32578535/how-to-make-a-pyc-file-from-python-script", "keywords": [], "tags": ["python", "terminal", "pyc"], "question": {"id": 32578535, "title": "How to make a .pyc file from Python script", "content": "I know that when Python script is imported in other python script, then a .pyc script is created. Is there any other way to create .pyc file by using linux bash terminal? ", "abstract": ""}, "answers": [{"id": 32578574, "score": 7, "vote": 0, "content": "You could use the py_compile module. Run it from command line (-m option): When this module is run as a script, the main() is used to compile all\n  the files named on the command line. Example: compileall provides similar functionality, to use it you'd do something like Where ... are files to compile or directories that contain source files, traversed recursively. Another option is to import the module: -c 'import module' is different from -m module, because the former won't execute the if __name__ == '__main__': block in module.py.", "abstract": ""}, {"id": 32578885, "score": 10, "vote": 0, "content": "Use the following command: This will create your_script.pyc file in the same directory. You can pass directory also as : This will create .pyc files for all .py files in the directory Other way is to create another script as It also create the your_script.pyc file. You can take file name as command line argument", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/32104282/python-is-not-saving-pyc-files-in-filesystem", "keywords": [], "tags": ["python", "linux"], "question": {"id": 32104282, "title": "Python is not saving .pyc files in filesystem", "content": "I have a python application running in an embedded Linux system. I have realized that the python interpreter is not saving the compiled .pyc files in the filesystem for the imported modules by default. How can I enable the interpreter to save it ? File system permission are right.", "abstract": ""}, "answers": [{"id": 32104793, "score": 2, "vote": 0, "content": "There are a number of places where this enabled-by-default behavior could be turned off. On an embedded system, it makes much more sense to make this an explicit step rather than runtime behavior: This ensures that performance is consistent (rather than having some runs take longer than others to execute). Use py_compile or compileall to explicitly run ahead-of-time.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/30582068/call-python-file-from-another-file-its-creating-a-pyc-file", "keywords": [], "tags": ["python"], "question": {"id": 30582068, "title": "call python file from another file its creating a pyc file", "content": "I have a sent.py file, and in this file I have a function getProcessing(), when I call this function I want to call a function (createmrjob) from another python file (processing.py). Im trying to do this with code below and it is working fine, but after I call this function getProcessing() when user choose option 2, it is created a processing.pyc file. It is normal? There is a way that this file its not created?", "abstract": ""}, "answers": [{"id": 30582161, "score": 1, "vote": 0, "content": "It is normal. It is byte code file, which is generated by the Python interpreter and is executed by Python's virtual machine.", "abstract": ""}, {"id": 30582136, "score": 1, "vote": 0, "content": "That is normal. Python tries to optimize by generating a .pyc version of the .py, which is pre-compiled. You can avoid this by environment variables, command-line parameters, or from inside the program. See this post .", "abstract": ""}, {"id": 30582129, "score": 1, "vote": 0, "content": "Yes, it is normal. The *.pyc file contains compiled version of your module.", "abstract": ""}]}]