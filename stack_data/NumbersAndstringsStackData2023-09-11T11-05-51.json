[{"link": "https://stackoverflow.com/questions/60981664/javascript-how-to-convert-string-0-to-number-0", "keywords": [], "tags": ["javascript", "numbers", "frontend", "parseint", "string-conversion"], "question": {"id": 60981664, "title": "Javascript - How to convert string &#39;0&#39; to number 0", "content": "I'm trying to do error handling on 2 input values. I'm using regex to confirm that the input is always a number. The issue I'm having is that I don't want my error handling to kick in if the user literally inputs 0. Right now I'm using:  to set my variable. The issue is that this turns '0' into \"\" Its fine if an empty value becomes an empty string because I am disabling my error checking when the lengths are equal to 0, but I need to properly turn '0' into a number 0. Anyone have any ideas? Additionally, I'd also like to turn '000' (and so forth) into a number 0", "abstract": ""}, "answers": [{"id": 71032085, "score": 1, "vote": 0, "content": "Use \"Number()\": \n\nconsole.log(Number('0'));\nconsole.log(Number('000'));\n\nconsole.log(typeof(Number('0')));\nconsole.log(typeof(Number('000')));\n\n\n Or put \"+\" before '0' and '000': \n\nconsole.log(+'0');\nconsole.log(+'000');\n\nconsole.log(typeof(+'0'));\nconsole.log(typeof(+'000'));\n\n\n Or put \"* 1\" before or after '0' and '000': \n\nconsole.log('0' * 1);\nconsole.log('000' * 1);\n\nconsole.log(typeof('0' * 1));\nconsole.log(typeof('000' * 1));\n\n\n", "abstract": ""}, {"id": 60981744, "score": 0, "vote": 0, "content": "You can try typeof to distinguish what type of variable you are receiving typeof true === 'boolean' typeof null === 'object' typeof 62 === 'number' typeof 'Hello World' === 'string'", "abstract": ""}, {"id": 60981700, "score": 0, "vote": 0, "content": "You can use parseInt(incomingValue) to get the int value.\nFor comparing you can use === for equal value and equal type means (incomingValue === 0) will be true in case of incomingValue = 0.", "abstract": ""}, {"id": 60981719, "score": 4, "vote": 0, "content": "You can turn '0' or '000' into a number by just doing: The reason your code is not working is that javascript treats 0 as a falsly value, so when you do this: the expression parseInt('0') will return 0 which is falsy. As a result, the || \"\" will be executed which will set number to \"\". You'll need to separate your parseInt and your default assignment to achieve what you want.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/8529656/how-do-i-convert-a-string-to-a-number-in-php", "keywords": [], "tags": ["php", "casting", "type-conversion"], "question": {"id": 8529656, "title": "How do I convert a string to a number in PHP?", "content": "I want to convert these types of values, '3', '2.34', '0.234343', etc. to a number. In JavaScript we can use Number(), but is there any similar method available in PHP?", "abstract": ""}, "answers": [{"id": 74688214, "score": 0, "vote": 0, "content": "You can just add 0 to your string, and you will convert it to number without losing initial original value. Try for example: PHP will handle conversion for you, or as already suggested add + before your string.", "abstract": ""}, {"id": 74073913, "score": 1, "vote": 0, "content": "Use the unary operator (+). For instance: var_dump($n1): int(7)\nvar_dump($n2): float(2.34)", "abstract": ""}, {"id": 71826551, "score": 4, "vote": 0, "content": "", "abstract": ""}, {"id": 69654396, "score": 9, "vote": 0, "content": "Alright so I just ran into this issue. My problem is that the numbers/strings in question having varying numbers of digits. Some have no decimals, others have several. So for me, using int, float, double, intval, or floatval all gave me different results depending on the number. So, simple solution... divide the string by 1 server-side. This forces it to a number and retains all digits while trimming unnecessary 0's. It's not pretty, but it works.", "abstract": ""}, {"id": 68876293, "score": 4, "vote": 0, "content": "Now we are in an era where strict/strong typing has a greater sense of importance in PHP, I use json_decode:", "abstract": ""}, {"id": 64115485, "score": 13, "vote": 0, "content": "If you want the numerical value of a string and you don't want to convert it to float/int because you're not sure, this trick will convert it to the proper type: Source: https://www.php.net/manual/en/function.is-numeric.php#107326", "abstract": ""}, {"id": 64060789, "score": 1, "vote": 0, "content": "One of the many ways it can be achieved is this: The second line increments the value by 1.", "abstract": ""}, {"id": 63828036, "score": 5, "vote": 0, "content": "Late to the party, but here is another approach:", "abstract": ""}, {"id": 63817895, "score": 1, "vote": 0, "content": "", "abstract": ""}, {"id": 60194239, "score": 2, "vote": 0, "content": "If you don't know in advance if you have a float or an integer,\nand if the string may contain special characters (like space, \u20ac, etc),\nand if it may contain more than 1 dot or comma,\nyou may use this function:  ", "abstract": ""}, {"id": 58672633, "score": 7, "vote": 0, "content": "Only multiply the number by 1 so that the string is converted to type number.", "abstract": ""}, {"id": 56612817, "score": 11, "vote": 0, "content": "I've been reading through answers and didn't see anybody mention the biggest caveat in PHP's number conversion. The most upvoted answer suggests doing the following: That's brilliant. PHP does direct casting. But what if we did the following? Does PHP consider such conversions valid?  Apparently yes.  PHP reads the string until it finds first non-numerical character for the required type. Meaning that for integers, numerical characters are [0-9]. As a result, it reads 3, since it's in [0-9] character range, it continues reading. Reads . and stops there since it's not in [0-9] range. Same would happen if you were to cast to float or double. PHP would read 3, then ., then 1, then 4, and would stop at i since it's not valid float numeric character. As a result, \"million\" >= 1000000 evaluates to false, but \"1000000million\" >= 1000000 evaluates to true. See also:  https://www.php.net/manual/en/language.operators.comparison.php how conversions are done while comparing https://www.php.net/manual/en/language.types.string.php#language.types.string.conversion how strings are converted to respective numbers", "abstract": ""}, {"id": 56348603, "score": 3, "vote": 0, "content": "There is a way: Using is_* won't work, since the variable is a: string. Using the combination of json_encode() and then json_decode() it's converted to it's \"true\" form. If it's a true string then it would output wrong. Will output: string(2) \"Me\" int(0) float(0)", "abstract": ""}, {"id": 50279367, "score": 38, "vote": 0, "content": "Yes, there is a similar method in PHP, but it is so little known that you will rarely hear about it. It is an arithmetic operator called \"identity\", as described here: Aritmetic Operators To convert a numeric string to a number, do as follows:", "abstract": ""}, {"id": 25840953, "score": 30, "vote": 0, "content": "If you want get a float for $value = '0.4', but int for $value = '4', you can write: It is little bit dirty, but it works.", "abstract": ""}, {"id": 29953979, "score": 1, "vote": 0, "content": "All suggestions lose the numeric type. This seems to me a best practice:", "abstract": ""}, {"id": 30616225, "score": 41, "vote": 0, "content": "Instead of having to choose whether to convert the string to int or float, you can simply add a 0 to it, and PHP will automatically convert the result to a numeric type.", "abstract": ""}, {"id": 39832873, "score": 8, "vote": 0, "content": "In addition to Boykodev's answer I suggest this:", "abstract": ""}, {"id": 8529669, "score": 0, "vote": 0, "content": "PHP will do it for you within limits", "abstract": ""}, {"id": 52056624, "score": 3, "vote": 0, "content": "Simply you can write like this:", "abstract": ""}, {"id": 48334110, "score": -2, "vote": 0, "content": "I got the question \"say you were writing the built in function for casting an integer to a string in PHP, how would you write that function\" in a programming interview. Here's a solution.", "abstract": ""}, {"id": 23995732, "score": 91, "vote": 0, "content": "To avoid problems try intval($var). Some examples:", "abstract": ""}, {"id": 38431673, "score": 21, "vote": 0, "content": "You can always add zero to it!", "abstract": ""}, {"id": 34559482, "score": 12, "vote": 0, "content": "Here is the function that achieves what you are looking for. First we check if the value can be understood as a number, if so we turn it into an int and a float.  If the int and float are the same (e.g., 5 == 5.0) then we return the int value.  If the int and float are not the same (e.g., 5 != 5.3) then we assume you need the precision of the float and return that value.  If the value isn't numeric we throw a warning and return null.", "abstract": ""}, {"id": 21318675, "score": 6, "vote": 0, "content": "Here is a function I wrote to simplify things for myself: It also returns shorthand versions of boolean, integer, double and real. Calling type with parseNumeric set to true will convert numeric strings before checking type. Thus: type(\"5\", true) will return int type(\"3.7\", true) will return float type(\"500\") will return string Just be careful since this is a kind of false checking method and your actual variable will still be a string. You will need to convert the actual variable to the correct type if needed. I just needed it to check if the database should load an item id or alias, thus not having any unexpected effects since it will be parsed as string at run time anyway. Edit If you would like to detect if objects are functions add this case to the switch:", "abstract": ""}, {"id": 8529678, "score": 257, "vote": 0, "content": "There are a few ways to do so: Cast the strings to numeric primitive data types: Perform math operations on the strings: Use intval() or floatval(): Use settype().", "abstract": ""}, {"id": 22017920, "score": 5, "vote": 0, "content": "I've found that in JavaScript a simple way to convert a string to a number is to multiply it by 1. It resolves the concatenation problem, because the \"+\" symbol has multiple uses in JavaScript, while the \"*\" symbol is purely for mathematical multiplication. Based on what I've seen here regarding PHP automatically being willing to interpret a digit-containing string as a number (and the comments about adding, since in PHP the \"+\" is purely for mathematical addition), this multiply trick works just fine for PHP, also. I have tested it, and it does work... Although depending on how you acquired the string, you might want to apply the trim() function to it, before multiplying by 1.", "abstract": ""}, {"id": 19082198, "score": 3, "vote": 0, "content": "You can use: But the best solution is to use: Or", "abstract": ""}, {"id": 8529928, "score": 51, "vote": 0, "content": "In whatever (loosely-typed) language you can always cast a string to a number by adding a zero to it. However, there is very little sense in this as PHP will do it automatically at the time of using this variable, and it will be cast to a string anyway at the time of output.   Note that you may wish to keep dotted numbers as strings, because after casting to float it may be changed unpredictably, due to float numbers' nature.", "abstract": ""}, {"id": 8529689, "score": 25, "vote": 0, "content": "You can use: Or you can use:", "abstract": ""}, {"id": 8529682, "score": 5, "vote": 0, "content": "You can use this to convert a string to an int in PHP.", "abstract": ""}, {"id": 8529674, "score": 22, "vote": 0, "content": "In PHP you can use intval(string) or floatval(string) functions to convert strings to numbers.", "abstract": ""}, {"id": 18611867, "score": 2, "vote": 0, "content": "You can change the data type as follows For historical reasons \"double\" is returned in case of a float. PHP Documentation", "abstract": ""}, {"id": 18164425, "score": 14, "vote": 0, "content": "Just a little note to the answers that can be useful and safer in some cases.\nYou may want to check if the string actually contains a valid numeric value first and only then convert it to a numeric type (for example if you have to manipulate data coming from a db that converts ints to strings). You can use is_numeric() and then floatval():", "abstract": ""}, {"id": 8529687, "score": 1405, "vote": 0, "content": "You don't typically need to do this, since PHP will coerce the type for you in most circumstances. For situations where you do want to explicitly convert the type, cast it:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/74454758/how-to-convert-a-string-button-to-number-in-javascript", "keywords": [], "tags": ["javascript", "string", "numbers", "buttonclick"], "question": {"id": 74454758, "title": "How to convert a string (button) to number in JavaScript", "content": "How to convert a string to an integer in JavaScript? How do I convert button is string to number in JavaScript?", "abstract": ""}, "answers": [{"id": 74475369, "score": 0, "vote": 0, "content": "You can simply achieve this in two ways : Live Demo : \n\nconst secrectNumber = 4;\n\n$(\".btn-number\").click(function (e) {\n  // By using === operator\n  if(Number(e.target.innerText) === secrectNumber) {\n    console.log(e.target.innerText);\n  }\n  \n  // By using == operator\n  if(e.target.innerText == secrectNumber) {\n    console.log(e.target.innerText);\n  }\n});\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n<button class=\"btn-number\">01</button>\n\n<button class=\"btn-number\">02</button>\n\n<button class=\"btn-number\">03</button>\n\n<button class=\"btn-number\">04</button>\n\n<button class=\"btn-number\">05</button>\n\n\n", "abstract": ""}, {"id": 74454786, "score": 0, "vote": 0, "content": "You can convert a string to an integer either by using the Number wrapper, like so: Number('01') // Returns 1 Or by using parseInt and passing a radix parameter.\nAssuming you're working in base-10: parseInt('11', 10) // Returns 11.", "abstract": ""}, {"id": 74454776, "score": 0, "vote": 0, "content": "parseInt will turn string into int parseInt('1') = 1", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/1133770/how-to-convert-a-string-to-an-integer-in-javascript", "keywords": [], "tags": ["javascript", "string", "integer", "data-conversion"], "question": {"id": 1133770, "title": "How to convert a string to an integer in JavaScript", "content": "How do I convert a string to an integer in JavaScript?", "abstract": ""}, "answers": [{"id": 51899878, "score": 0, "vote": 0, "content": "I use this This way I always get an int back.", "abstract": ""}, {"id": 33957717, "score": 21, "vote": 0, "content": "Please see the below example. It will help answer your question. By using parseint function, it will only give op of integer present and not the string.", "abstract": ""}, {"id": 72921627, "score": 8, "vote": 0, "content": "Math functions like round(numStr), floor(numStr), ceil(numStr) for integers Number(numStr) for both integers and decimals All basic unary operators, +numStr, numStr-0, 1*numStr, numStr*1, and numStr/1 All support both integers and decimals Be cautious about numStr+0. It returns a string. \n\n// Parsing\nconsole.log(parseInt('123.456')) // => 123\nconsole.log(parseFloat('123'))   // => 123\n\n// Function\nconsole.log(Math.floor('123'))     // => 123\nconsole.log(Math.round('123.456')) // => 123\nconsole.log(Math.ceil('123.454'))  // => 124\nconsole.log(Number('123.123'))     // => 123.123\n\n// Unary\nconsole.log(+'123')  // => 123\nconsole.log('002'-0) // => 2\nconsole.log(1*'5')   // => 5\nconsole.log('7.7'*1) // => 7.7\nconsole.log(3.3/1)   // => 3.3\nconsole.log('123.123'+0, typeof ('123.123'+0)) // => 123.1230 string\n\n// Bitwise\nconsole.log(~~'123')      // => 123\nconsole.log('0123'<<0)    // => 123\nconsole.log(~~'123.123')  // => 123\nconsole.log('123.123'<<0) // => 123\n\n\n", "abstract": ""}, {"id": 71567701, "score": 1, "vote": 0, "content": "It will return the first number Round a number to the nearest integer", "abstract": ""}, {"id": 66798133, "score": 20, "vote": 0, "content": "In JavaScript, you can do the following: ParseInt Multiplying with 1 Using the unary operator (+) Using a bitwise operator (Note: It starts to break after 2140000000. Example: ~~\"2150000000\" = -2144967296) Using Math.floor() or Math.ceil()", "abstract": ""}, {"id": 55092337, "score": 1, "vote": 0, "content": "I only added one plus(+) before string and that was solution!", "abstract": ""}, {"id": 56175003, "score": 3, "vote": 0, "content": "Summing the multiplication of digits with their respective power of ten: i.e: 123 = 100+20+3 = 1100 + 2+10 + 31 = 1*(10^2) + 2*(10^1) + 3*(10^0)", "abstract": ""}, {"id": 44262632, "score": 11, "vote": 0, "content": "There are many ways in JavaScript to convert a string to a number value... All are simple and handy. Choose the way which one works for you: Also, any Math operation converts them to number, for example... My prefer way is using + sign, which is the elegant way to convert a string to number in JavaScript.", "abstract": ""}, {"id": 43110775, "score": 0, "vote": 0, "content": "All of the previous answers are correct. Please be sure before that this is a number in a string by doing \"typeot x === 'number'\". Otherwise, it will return NaN.", "abstract": ""}, {"id": 43056963, "score": 60, "vote": 0, "content": "Here is little comparison of speed (macOS only)... :) For Chrome, 'plus' and 'mul' are fastest (>700,000,00 op/sec), 'Math.floor' is slowest. For Firefox, 'plus' is slowest (!) 'mul' is fastest (>900,000,000 op/sec). In Safari 'parseInt' is fastest, 'number' is slowest (but results are quite similar, >13,000,000  <31,000,000). So Safari for cast string to int is more than 10x slower than other browsers. So the winner is 'mul' :) You can run it on your browser by this link\nhttps://jsperf.com/js-cast-str-to-number/1  I also tested var x = ~~\"1000\";. On Chrome and Safari, it is a little bit slower than var x = \"1000\"*1 (<1%), and on Firefox it is a little bit faster (<1%).", "abstract": ""}, {"id": 20513389, "score": 151, "vote": 0, "content": "There are two main ways to convert a string to a number in JavaScript.  One way is to parse it and the other way is to change its type to a Number.  All of the tricks in the other answers (e.g., unary plus) involve implicitly coercing the type of the string to a number.  You can also do the same thing explicitly with the Number function. Parsing parseInt and parseFloat are the two functions used for parsing strings to numbers.  Parsing will stop silently if it hits a character it doesn't recognise, which can be useful for parsing strings like \"92px\", but it's also somewhat dangerous, since it won't give you any kind of error on bad input, instead you'll get back NaN unless the string starts with a number. Whitespace at the beginning of the string is ignored.  Here's an example of it doing something different to what you want, and giving no indication that anything went wrong: It's good practice to always specify the radix as the second argument.  In older browsers, if the string started with a 0, it would be interpreted as octal if the radix wasn't specified which took a lot of people by surprise.  The behaviour for hexadecimal is triggered by having the string start with 0x if no radix is specified, e.g., 0xff. The standard actually changed with ECMAScript\u00a05, so modern browsers no longer trigger octal when there's a leading 0 if no radix has been specified.  parseInt understands radixes up to base 36, in which case both upper and lower case letters are treated as equivalent. Changing the Type of a String to a Number All of the other tricks mentioned above that don't use parseInt, involve implicitly coercing the string into a number.  I prefer to do this explicitly, This has different behavior to the parse methods (although it still ignores whitespace).  It's more strict: if it doesn't understand the whole of the string than it returns NaN, so you can't use it for strings like 97px.  Since you want a primitive number rather than a Number wrapper object, make sure you don't put new in front of the Number function. Obviously, converting to a Number gives you a value that might be a float rather than an integer, so if you want an integer, you need to modify it.  There are a few ways of doing this: Any bitwise operator (here I've done a bitwise or, but you could also do double negation as in an earlier answer or a bit shift) will convert the value to a 32 bit integer, and most of them will convert to a signed integer.  Note that this will not do want you want for large integers.  If the integer cannot be represented in 32 bits, it will wrap. To work correctly with larger numbers, you should use the rounding methods Bear in mind that coercion understands exponential notation and Infinity, so 2e2 is 200 rather than NaN, while the parse methods don't. Custom It's unlikely that either of these methods do exactly what you want.  For example, usually I would want an error thrown if parsing fails, and I don't need support for Infinity, exponentials or leading whitespace.  Depending on your use case, sometimes it makes sense to write a custom conversion function. Always check that the output of Number or one of the parse methods is the sort of number you expect.  You will almost certainly want to use isNaN to make sure the number is not NaN (usually the only way you find out that the parse failed).", "abstract": ""}, {"id": 40469497, "score": 7, "vote": 0, "content": "I actually needed to \"save\" a string as an integer, for a binding between C and JavaScript, so I convert the string into an integer value:", "abstract": ""}, {"id": 31269035, "score": 13, "vote": 0, "content": "We can use +(stringOfNumber) instead of using parseInt(stringOfNumber). Example: +(\"21\") returns int of 21, like the parseInt(\"21\"). We can use this unary \"+\" operator for parsing float too...", "abstract": ""}, {"id": 30815481, "score": 12, "vote": 0, "content": "To convert a String into Integer, I recommend using parseFloat and not parseInt. Here's why: Using parseFloat: Using parseInt: So if you have noticed parseInt discards the values after the decimals, whereas parseFloat lets you work with floating point numbers and hence more suitable if you want to retain the values after decimals. Use parseInt if and only if you are sure that you want the integer value.", "abstract": ""}, {"id": 1139958, "score": 12, "vote": 0, "content": "Also as a side note: MooTools has the function toInt() which is used on any native string (or float (or integer)).", "abstract": ""}, {"id": 22440945, "score": 40, "vote": 0, "content": "I use this way of converting string to number: So, when multiplying by 1, the value does not change, but JavaScript automatically returns a number. But as it is shown below, this should be used if you are sure that the str is a number (or can be represented as a number), otherwise it will return NaN - not a number. You can create simple function to use, e.g., ", "abstract": ""}, {"id": 14355500, "score": 30, "vote": 0, "content": "I love this trick: The double bitwise negative drops off anything after the decimal point AND converts it to a number format. I've been told it's slightly faster than calling functions and whatnot, but I'm not entirely convinced. Another method I just saw here (a question about the JavaScript >>> operator, which is a zero-fill right shift) which shows that shifting a number by 0 with this operator converts the number to a uint32 which is nice if you also want it unsigned.  Again, this converts to an unsigned integer, which can lead to strange behaviors if you use a signed number.", "abstract": ""}, {"id": 1133814, "score": 2810, "vote": 0, "content": "The simplest way would be to use the native Number function: If that doesn't work for you, then there are the parseInt, unary plus, parseFloat with floor, and Math.round methods. If your string is already in the form of an integer: If your string is or might be a float and you want an integer: Or, if you're going to be using Math.floor several times: If you're the type who forgets to put the radix in when you call parseInt, you can use parseFloat and round it however you like. Here I use floor. Interestingly, Math.round (like Math.floor) will do a string to number conversion, so if you want the number rounded (or if you have an integer in the string), this is a great way, maybe my favorite:", "abstract": ""}, {"id": 68839652, "score": 9, "vote": 0, "content": "The easiest way would be to use + like this", "abstract": ""}, {"id": 65208764, "score": 0, "vote": 0, "content": "This (probably) isn't the best solution for parsing an integer, but if you need to \"extract\" one, for example: this would work (only for integers): \n\nvar str = '3a9b0c3d2e9f8g'\n\nfunction extractInteger(str) {\n  var result = 0;\n  var factor = 1\n\n  for (var i = str.length; i > 0; i--) {\n    if (!isNaN(str[i - 1])) {\n      result += parseInt(str[i - 1]) * factor\n      factor *= 10\n    }\n  }\n\n  return result\n}\n\nconsole.log(extractInteger(str))\n\n\n Of course, this would also work for parsing an integer, but would be slower than other methods. You could also parse integers with this method and return NaN if the string isn't a number, but I don't see why you'd want to since this relies on parseInt internally and parseInt is probably faster. \n\nvar str = '3a9b0c3d2e9f8g'\n\nfunction extractInteger(str) {\n  var result = 0;\n  var factor = 1\n\n  for (var i = str.length; i > 0; i--) {\n    if (isNaN(str[i - 1])) return NaN\n    result += parseInt(str[i - 1]) * factor\n    factor *= 10\n  }\n\n  return result\n}\n\nconsole.log(extractInteger(str))\n\n\n", "abstract": ""}, {"id": 58777131, "score": 3, "vote": 0, "content": "You can use plus.\nFor example: then you can see the new variable's type bytypeof personAge1 ; which is number.", "abstract": ""}, {"id": 56478547, "score": 10, "vote": 0, "content": "Here is the easiest solution More easy solution", "abstract": ""}, {"id": 57274766, "score": 5, "vote": 0, "content": "", "abstract": ""}, {"id": 56832614, "score": 3, "vote": 0, "content": "The safest way to ensure you get a valid integer: Examples:", "abstract": ""}, {"id": 1133780, "score": 282, "vote": 0, "content": "Try parseInt function: But there is a problem. If you try to convert \"010\" using parseInt function, it detects as octal number, and will return number 8. So, you need to specify a radix (from 2 to 36). In this case base 10. Example: Note that parseInt ignores bad data after parsing anything valid.\nThis guid will parse as 51:", "abstract": ""}, {"id": 43213423, "score": 0, "vote": 0, "content": "\n\nfunction doSth(){\r\n  var a = document.getElementById('input').value;\r\n  document.getElementById('number').innerHTML = toNumber(a) + 1;\r\n}\r\nfunction toNumber(str){\r\n  return +str;\r\n}\n<input id=\"input\" type=\"text\">\r\n<input onclick=\"doSth()\" type=\"submit\">\r\n<span id=\"number\"></span>\n\n\n", "abstract": ""}, {"id": 48310908, "score": 1, "vote": 0, "content": "Another option is to double XOR the value with itself: This will output:", "abstract": ""}, {"id": 43050154, "score": 10, "vote": 0, "content": "In my opinion, no answer covers all edge cases as parsing a float should result in an error.", "abstract": ""}, {"id": 33427675, "score": 10, "vote": 0, "content": "Try str - 0 to convert string to number. Here are two links to compare the performance of several ways to convert string to int https://jsperf.com/number-vs-parseint-vs-plus http://phrogz.net/js/string_to_number.html", "abstract": ""}, {"id": 3155604, "score": 18, "vote": 0, "content": "Beware if you use parseInt to convert a float in scientific notation!\nFor example: will result in instead of", "abstract": ""}, {"id": 9699544, "score": 56, "vote": 0, "content": "ParseInt() and + are different", "abstract": ""}, {"id": 1133776, "score": 38, "vote": 0, "content": "Try parseInt.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/40685562/how-to-convert-a-string-to-number", "keywords": [], "tags": ["javascript", "google-apps-script", "string-conversion"], "question": {"id": 40685562, "title": "How to convert a string to number", "content": "I can't figure it out how to convert this string 82144251 to a number. Code: If I try the code below the .toFixed() function converts my number back to a string... Question update:\nI'm using the Google Apps Script editor and that must be the issue...", "abstract": ""}, "answers": [{"id": 40685642, "score": 35, "vote": 0, "content": "You can convert a string to number using unary operator '+' or parseInt(number,10) or Number() check these snippets \n\nvar num1a = \"1\";\r\nconsole.log(+num1a);\r\n\r\nvar num1b = \"2\";\r\nnum1b=+num1b;\r\nconsole.log(num1b);\r\n\r\n\r\nvar num3 = \"3\"\r\nconsole.log(parseInt(num3,10));\r\n\r\n\r\nvar num4 = \"4\";\r\nconsole.log(Number(num4));\n\n\n Hope it helps", "abstract": ""}, {"id": 46644628, "score": -1, "vote": 0, "content": "I use num-0, since it is easier for inline use.", "abstract": ""}, {"id": 40685682, "score": 5, "vote": 0, "content": "No questions are dumb. to convert a string to a number you can use the unary plus. Doing num = +num is practically the same as doing num = num * 1; it converts the value in a to a number if needed, but after that it doesn't change the value.", "abstract": ""}, {"id": 40685672, "score": 11, "vote": 0, "content": "It looks like you're looking for the Number() functionality here: You can read more about Number() here: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number Hope this helps!", "abstract": ""}, {"id": 40685641, "score": 0, "vote": 0, "content": "var intNum = parseInt(\"82144251\", 10); // intNum is number", "abstract": ""}, {"id": 40685606, "score": 0, "vote": 0, "content": "\n\nvar num = \"82144251\";\r\nnum = parseInt(num).toFixed()\r\nconsole.log(num, typeof num); // string\r\nnum = parseFloat(num);\r\nconsole.log(num, typeof num); // number\n\n\n", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/62723058/what-is-the-most-efficient-way-to-convert-a-string-to-a-number", "keywords": [], "tags": ["javascript", "type-conversion", "numbers"], "question": {"id": 62723058, "title": "What is the most efficient way to convert a string to a number?", "content": "What would be the most efficient and safe method to convert a Decimal Integer String to a number in a time-critical loop or function where there are thousands (sometimes 100's thousands) of varying numbers strings (but are all Integers). I know of the following three (3) javascript methods. Not sure if there are other means to do the task in a more efficient way. Number() converts a string or other value to the Number type. If the value can't be converted, it returns NaN. parseInt() parses a string argument and returns an \"integer\" of the specified radix. '+' prefixing a string converts a string to the Number type. Will this be also affected by the implementation, system, or environment/browser? I ran the following test example to ensure that the output result is correct as Number Type from each method. \n\n//  ------- test -------\n\nlet MyInegerString  = \"12345678901\";\n\nlet n1 = Number(MyInegerString); \nlet n2 = parseInt(MyInegerString);\nlet n3 = + MyInegerString;\n\nconsole.log(\"n1 using Number()   is now a \"+typeof(n1));  // \"number\"\nconsole.log(\"n2 using parseInt() is now a \"+typeof(n2));  // \"number\"\nconsole.log(\"n3 using '+'        is now a \"+typeof(n3));  // \"number\"\n\n\n", "abstract": ""}, "answers": [{"id": 71262915, "score": -1, "vote": 0, "content": "it could be done by adding plus sign before that string\ngood explanation about it:\nhttps://youtu.be/Vdk18Du3AVI?t=61", "abstract": ""}, {"id": 62723494, "score": 2, "vote": 0, "content": "I'm new to the stack so forgive me if I structure this wrong. You are listing 3 methods for converting a string into a number, you can use Number() as an ES6 constructor new Number(), so I included that in my test too. I made a test that uses four methods of string to number conversion multiple times and checks how long they take to run. From running this test in node JS and in the chrome browser, both on a Linux system, I found that at 10,000,000 (30,000,000 as the function test 3 different strings) runs in node JS, the Number() function came first at 12 ms to complete, using loose typing to convert took 13ms, then parseInt() came in third taking 99ms to convert the numbers and lastly, the Number() constructor took 1010ms to complete. Running the same test in chrome similarly the Number() function took 13ms, the loose type conversion took 16ms, the parseInt() function took 287ms, and the Number() constructor took 1083ms. My test function was as follows \n\nconst testStringConversion = (timesToTest) => {\n  console.log(`Testing Number() constructor ${timesToTest} times`);\n  let timer, number;\n  timer = Date.now();\n  for (let i = 0; i !== timesToTest; ++i) {\n    number = new Number(\"3\");\n    number = new Number(\"6\");\n    number = new Number(\"123456\");\n  }\n  console.log(`Took ${Date.now() - timer} ms to complete`);\n\n  console.log(`Testing Number() function ${timesToTest} times`);\n\n  timer = Date.now();\n  for (let i = 0; i !== timesToTest; ++i) {\n    number = Number(\"3\");\n    number = Number(\"6\");\n    number = Number(\"123456\");\n  }\n  console.log(`Took ${Date.now() - timer} ms to complete`);\n\n  console.log(`Testing parseInt() ${timesToTest} times`);\n\n  timer = Date.now();\n  for (let i = 0; i !== timesToTest; ++i) {\n    number = parseInt(\"3\", 10);\n    number = parseInt(\"6\", 10);\n    number = parseInt(\"123456\", 10);\n  }\n  console.log(`Took ${Date.now() - timer} ms to complete`);\n\n  console.log(\n    `Testing loose type addition to convert numbers ${timesToTest} times`\n  );\n\n  timer = Date.now();\n  for (let i = 0; i !== timesToTest; ++i) {\n    number = + \"3\";\n    number = + \"6\";\n    number = + \"123456\";\n  }\n  console.log(`Took ${Date.now() - timer} ms to complete`);\n};\n\ntestStringConversion(10000000);\n\n\n I hope this helps you find what you are looking for :)", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/67271684/how-can-i-convert-a-string-to-a-number-inside-of-a-usestate-hook", "keywords": [], "tags": ["javascript", "reactjs", "react-hooks", "use-state", "parseint"], "question": {"id": 67271684, "title": "How can I convert a string to a number inside of a useState Hook?", "content": "I am trying to convert data from a string to a number before it is inputted so that I can perform mathematical calculations on the data later. I tried to use parseInt inside of my useState hook but I received the following error:\nReferenceError: can't access lexical declaration 'score' before initialization", "abstract": ""}, "answers": [{"id": 67271793, "score": 2, "vote": 0, "content": "The state isn't defined yet so it's not accessible. You are setting the initial state, so just declare it with the type you want. score, strikes, spares, and openFrames haven't been declared or defined yet, so they can't be used. Seems you are really wanting to parse the input strings back to number types when updating state. To maintain your state invariant you could/should do this conversion in your onChange handler. Provide valid initial state.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/62568464/how-to-convert-string-to-float-if-it-is-an-exact-number-not-only-start-with-num", "keywords": [], "tags": ["javascript"], "question": {"id": 62568464, "title": "How to convert string to float if it is an exact number, not only start with number in javascript", "content": "I'm trying to make function that check strings. If the string is number, then it will convert it as float. else, it will keep it as it is. For example: I have these test strings: I tried to make it by self as written bellow but sometime it convert real strings to numbers by remove the letters and keep the first part of string numbers", "abstract": ""}, "answers": [{"id": 62568574, "score": 0, "vote": 0, "content": "Simply add + symbol before any string, it will convert it to number. Output: 10.25", "abstract": ""}, {"id": 62568520, "score": 0, "vote": 0, "content": "You can use isNan which checks if the argument is NaN or not.", "abstract": ""}, {"id": 62568517, "score": 0, "vote": 0, "content": "Change your code to like below here isNaN will check for valid number", "abstract": ""}, {"id": 62568498, "score": 2, "vote": 0, "content": "You could convert your string to a number with Number() and also check if its NaN. \n\nfunction check(num){\n   return isNaN(Number(num)) ? num : Number(num);\n}\n\nlet mynumber=\"123test@gmail.com\"\nlet mynumber2 = \"34234\";\nlet mynumber3 = \"3234.234\";\n\nlet result = check(mynumber);\nlet result2 = check(mynumber2);\nlet result3 = check(mynumber3);\n\n\nconsole.log(result, typeof result);\nconsole.log(result2, typeof result2);\nconsole.log(result3, typeof result3);\n\n\n", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/53971935/convert-a-string-to-a-big-integer-in-javascript", "keywords": [], "tags": ["javascript", "string", "integer", "biginteger", "data-conversion"], "question": {"id": 53971935, "title": "Convert a string to a big integer in Javascript?", "content": "I am trying to convert a string to a big integer to perform some arithmetic calculations. However, when I try this: ...I am getting this unexpected result: I suspect that this is probably because of the limit on the size of integers that Number is capable of working with. Basically, I want to check if two strings are consecutive numbers or not. Since Number is not returning the correct value, I am getting the incorrect difference for \"9007199254740993\" and \"9007199254740992\". Specifically, I am expecting 1, but getting 0. One possibility I considered is dividing each number by a factor to make each of them smaller. Is there any other solution?", "abstract": ""}, "answers": [{"id": 53972348, "score": 1, "vote": 0, "content": "I you don't want to rely on BigInt and only have positive integers in mind, you can also write the successor test yourself. Full code in the snippet below. A string representation of a positive integer is easily convertible to a decimal array where the index represents the exponent to the base 10. For example \"42\" ~> [2, 4] (since 42 = 2*10^0 + 4*10^1). You can also just as easily convert it back. Now for the successor test you just need to define the increment operation (which is just adding 1 with carry). With that you can just compare if the increment of one number is equal to the unincremented other number (and vice versa). \n\n// Convert a string representation of positive decimal integer to an array of decimals.\r\nconst toArray = numberString => Array.from(numberString, c => parseInt(c))\r\n    .reverse();\r\n\r\n// Convert the array representation of a positive decimal integer string back to the corresponding string representation (this is the inverse of `toArray`).\r\nconst fromArray = numberArray => numberArray.map(String)\r\n    .reverse()\r\n    .join('');\r\n\r\nconsole.log(fromArray(toArray(\"9007199254740993\")) === \"9007199254740993\"); // true\r\n\r\n// Perform the increment operation on the array representation of the positive decimal integer.\r\nconst increment = numberArray => {\r\n  let carry = 1;\r\n  const incrementedNumberArray = [];\r\n  numberArray.forEach(i => {\r\n      let j;\r\n      if (carry === 0) {\r\n          j = i;\r\n      } else if (carry === 1) {\r\n          if (i === 9) {\r\n              j = 0;\r\n          } else {\r\n              j = i + 1;\r\n              carry = 0;\r\n          }\r\n      }\r\n      incrementedNumberArray.push(j);\r\n  });\r\n\r\n  if (carry === 1) { \r\n    incrementedNumberArray.push(1);\r\n  }\r\n\r\n  return incrementedNumberArray;\r\n};\r\n\r\nconsole.log(fromArray(increment(toArray(\"9007199254740993\"))) === \"9007199254740994\"); // true\r\nconsole.log(fromArray(increment(toArray(\"9999999999999999\"))) === \"10000000000000000\"); // true\r\n\r\n// Test if two strings represent positive integers where one is the other's successor.  \r\nconst isSuccessor = (a, b) => {\r\n  const a_ = increment(toArray(a));\r\n  const b_ = increment(toArray(b));\r\n  return fromArray(a_) === b || fromArray(b_) === a;\r\n};\r\n\r\nconsole.log(isSuccessor(\"9007199254740993\", \"9007199254740994\")); // true\r\nconsole.log(isSuccessor(\"9007199254740994\", \"9007199254740993\")); // true\r\nconsole.log(isSuccessor(\"9999999999999999\", \"10000000000000000\")); // true\r\nconsole.log(isSuccessor(\"10000000000000000\", \"9999999999999999\")); // true\r\nconsole.log(isSuccessor(\"10000000000000000\", \"10000000000000002\")); // false\n\n\n", "abstract": ""}, {"id": 53972028, "score": 1, "vote": 0, "content": "Note: I recommend you to use BigInt(as suggested by @Andreas in comment), if you are dealing with Big Numbers. UPDATED Use this code to compare big positive integers(The arguments should be in string format) \n\nfunction compareBigNumber(num1, num2) {\r\n  if (num1 > Number.MAX_SAFE_INTEGER && num2 > Number.MAX_SAFE_INTEGER) {\r\n    var newNum1 = num1.split('').reverse();\r\n    var newNum2 = num2.split('').reverse();\r\n  \r\n    do {\r\n      newNum1.pop();\r\n      newNum2.pop();\r\n    } while (newNum1[newNum1.length-1] === '0' || newNum2[newNum2.length-1] === '0')\r\n    \r\n    return compareBigNumber(newNum1.reverse().join(''), newNum2.reverse().join(''));\r\n  } else if(num1 > Number.MAX_SAFE_INTEGER){ \r\n    return 'num1 is greater' \r\n  } else if (num2 > Number.MAX_SAFE_INTEGER) {\r\n    return 'num2 is greater'\r\n  }\r\n  else {\r\n    var num1Int = parseInt(num1);\r\n    var num2Int = parseInt(num2);\r\n    if (num1Int > num2Int) {\r\n      return 'Num1 is greater';\r\n    } else if (num2Int > num1Int){\r\n      return 'Num2 is greater'\r\n    } else {\r\n      return 'Num1 is equal to Num2';\r\n    }\r\n  }\r\n}\r\n\r\nconsole.log(compareBigNumber(\"9007199254740992\", \"9007199254740993\"))\r\nconsole.log(compareBigNumber(\"100000000000000000000\", \"0\"))\n\n\n", "abstract": ""}, {"id": 53971998, "score": 1, "vote": 0, "content": "You can use BIG integer library like one in JAVA.\ncheck here ", "abstract": ""}, {"id": 53971981, "score": 4, "vote": 0, "content": "Javascript's Number type is a numeric data type in the double-precision 64-bit floating point format (IEEE 754). If you are dealing with large integers, use a BigInt or a corresponding library.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/46103464/how-to-convert-string-to-number", "keywords": [], "tags": ["javascript", "type-conversion"], "question": {"id": 46103464, "title": "How to convert string to number?", "content": "How to convert \"4,250,000.40\" to 4,250,000.40 that is converting string to number by remaining the commas and dots? using JavaScript", "abstract": ""}, "answers": [{"id": 46103704, "score": 1, "vote": 0, "content": "You can't directly convert \"4,250,000.40\" to a number in vanilla JS, let alone preserve commas. 4,250,000.40 is not a valid number in JavaScript, because a comma is an illegal character in a Number. you can use regex to delete commas, then use Number.parseFloat(), but then number formatting is lost. Instead, I suggest using a number formatting library like Numeral.js. To convert \"4,250,000.40\" to a numeral you'd use: you can reformat your number using the format() method like so: Here's a working example, including more cool formatting: \n\nconst num = numeral(\"4,250,000.40\");\r\nconst formatedNum = num.format('0,0[.]00');\r\nconsole.log(formatedNum); // \"4,250,000.40\"\r\n// you can format number as money\r\nconsole.log(num.format('$0,0[.]00')); // $4,250,000.40\r\n// you can use abbreviations like k or m\r\nconsole.log(num.format('$0.00a')); // $4.25m\r\n// you can use financial notation\r\nconsole.log(numeral(\"-4,250,000.40\").format('($0,0)')); // ($4,250,000)\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/numeral.js/2.0.6/numeral.min.js\"></script>\n\n\n", "abstract": ""}, {"id": 46103662, "score": 1, "vote": 0, "content": "\n\nvar str =  \"4,250,000.40\";\r\nstr = str.replace(/\\,/g, \"\")\r\nconsole.log(str)\r\nconsole.log(parseFloat(str).toFixed(2))//to always show 2 decimal places\n\n\n", "abstract": ""}, {"id": 46103545, "score": 4, "vote": 0, "content": "You can use parseFloat(str) to convert a string to a number, but first you need to remove the commas from the string, as parseFloat doesn't work for numbers with commas in them.", "abstract": ""}]}]