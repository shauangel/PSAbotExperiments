[{"link": "https://stackoverflow.com/questions/10487278/how-to-declare-and-add-items-to-an-array-in-python", "keywords": [], "tags": ["python", "arrays", "list"], "question": {"id": 10487278, "title": "How to declare and add items to an array in Python", "content": "I'm trying to add items to an array in Python. I run Then, I try to add something to this array by doing: There doesn't seem to be an .append method for this. How do I add items to an array?", "abstract": ""}, "answers": [{"id": 76467696, "score": 1, "vote": 0, "content": "It's purely academic but extend() method can be used to append a value to a list as well. Simply wrap the value in a tuple/list and extend the list by it. As it happens, it's faster than iadd (+= [1])-ing a singleton list. In fact, it performs the same as list.append. See the results here. Also, since it's faster to build a tuple than a list, extending by a singleton tuple is faster than by a singleton list. However, if the list is not a singleton, iadd (+=) is very competitive in terms of performance compared to list.extend as the following experiment shows. The standard library also has the array module, which is a wrapper over C arrays. Like C arrays, array.array objects hold only a single type (which has to be specified at object creation time by using a type code), whereas Python list objects can hold anything. It also defines append/extend/remove etc. to manipulate the data. It's useful if there is a need to interface with C arrays. The main advantage of array.array objects over lists is memory-efficiency. As you can see from the example below, arr consumes roughly 10 times less memory than lst. In special cases, working with array.array objects may be faster than working with lists. There's an anecdote on the Python website that gives one such example. It's about converting a list of integers into strings. A modern version could look like below (converting to array.array is still faster than str.join).", "abstract": ""}, {"id": 74075799, "score": 0, "vote": 0, "content": "Isn't it a good idea to learn how to create an array in the most performant way? It's really simple to create and insert an values into an array: But, now we have two ways to insert one more value into this array: Slow mode: my_array.insert(0,\"A\") - moves all values \u200b\u200bto the right when entering an \"A\" in the zero position: Fast mode: my_array.append(\"A\") Adds the value \"A\" to the last position of the array, without touching the other positions: If you need to display the sorted data, do so later when necessary. Use the way that is most useful to you, but it is interesting to understand the performance of each method.", "abstract": ""}, {"id": 10487291, "score": 63, "vote": 0, "content": "If you do it this way: you are making a dictionary, not an array. If you need an array (which is called a list in python ) you declare it like this: Then you can add items like this:", "abstract": ""}, {"id": 53665125, "score": 2, "vote": 0, "content": "You can also do: Note that the numpy.append() method returns a new object, so if you want to modify your initial array, you have to write: array = ...", "abstract": ""}, {"id": 52318103, "score": 16, "vote": 0, "content": "Just for sake of completion, you can also do this: If it's a list of strings, this will also work:", "abstract": ""}, {"id": 51612333, "score": -3, "vote": 0, "content": "I believe you are all wrong. you need to do:  array = array[] in order to define it, and then:  array.append [\"hello\"] to add to it.", "abstract": ""}, {"id": 51117606, "score": 3, "vote": 0, "content": "In some languages like JAVA you define an array using curly braces as following but in python it has a different meaning: Java: However, in Python, curly braces are used to define dictionaries, which needs a key:value assignment as {'a':1, 'b':2} To actually define an array (which is actually called list in python) you can do: Python: or other examples like:", "abstract": ""}, {"id": 10487303, "score": 838, "vote": 0, "content": "{} represents an empty dictionary, not an array/list.  For lists or arrays, you need []. To initialize an empty list do this: or To add elements to the list, use append To extend the list to include the elements from another list use extend To remove an element from a list use remove Dictionaries represent a collection of key/value pairs also known as an associative array or a map.  To initialize an empty dictionary use {} or dict() Dictionaries have keys and values To extend a dictionary with the contents of another dictionary you may use the update method To remove a value from a dictionary", "abstract": ""}, {"id": 10487306, "score": 19, "vote": 0, "content": "Arrays (called list in python) use the [] notation. {} is for dict (also called hash tables, associated arrays, etc in other languages) so you won't have 'append' for a dict.  If you actually want an array (list), use:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/1514553/how-do-i-declare-an-array-in-python", "keywords": [], "tags": ["python", "arrays", "list"], "question": {"id": 1514553, "title": "How do I declare an array in Python?", "content": "How do I declare an array in Python?", "abstract": ""}, "answers": [{"id": 6768818, "score": 26, "vote": 0, "content": "For calculations, use numpy arrays like this: these numpy arrays can be saved and loaded from disk (even compressed) and complex calculations with large amounts of elements are C-like fast. Much used in scientific environments. See here for more.", "abstract": ""}, {"id": 1515282, "score": 7, "vote": 0, "content": "Following on from Lennart, there's also numpy which implements homogeneous multi-dimensional arrays.", "abstract": ""}, {"id": 70124255, "score": 2, "vote": 0, "content": "You can read and write to any element in this list with a[n] notation in the same as you would with an array. It does seem to have the same random access performance as an array. I cannot say how it allocates memory because it also supports a mix of different types including strings and objects if you need it to.", "abstract": ""}, {"id": 39003823, "score": 22, "vote": 0, "content": "A couple of contributions suggested that arrays in python are represented by lists. This is incorrect. Python has an independent implementation of array() in the standard library module array  \"array.array()\" hence it is incorrect to confuse the two. Lists are lists in python so be careful with the nomenclature used.  There is one very important difference between list and array.array().  While both of these objects are ordered sequences, array.array() is an ordered homogeneous sequences whereas a list is a non-homogeneous sequence. ", "abstract": ""}, {"id": 49868020, "score": 3, "vote": 0, "content": "You can create lists and convert them into arrays or you can create array using numpy module. Below are few examples to illustrate the same. Numpy also makes it easier to work with multi-dimensional arrays. You can also reshape this array into a 2X2 matrix using reshape function which takes in input as the dimensions of the matrix.", "abstract": ""}, {"id": 48014491, "score": 25, "vote": 0, "content": "JohnMachin's comment should be the real answer.\nAll the other answers are just workarounds in my opinion!\nSo:", "abstract": ""}, {"id": 38303109, "score": 12, "vote": 0, "content": "To add to Lennart's answer, an array may be created like this: where values can take the form of a tuple, list, or np.array, but not array: and the output will still be the same: Most methods for list work with array as well, common\nones being pop(), extend(), and append(). Judging from the answers and comments, it appears that the array\ndata structure isn't that popular. I like it though, the same\nway as one might prefer a tuple over a list. The array structure has stricter rules than a list or np.array, and this can\nreduce errors and make debugging easier, especially when working with numerical\ndata. Attempts to insert/append a float to an int array will throw a TypeError: Keeping values which are meant to be integers (e.g. list of indices) in the array\nform may therefore prevent a \"TypeError: list indices must be integers, not float\", since arrays can be iterated over, similar to np.array and lists: Annoyingly, appending an int to a float array will cause the int to become a float, without throwing an exception. np.array retain the same data type for its entries too, but instead of giving an error it will change its data type to fit new entries (usually to double or str): This is true during assignment as well. If the data type is specified, np.array will, wherever possible, transform the entries to that data type: or, in essence: while array will simply give: Because of this, it is not a good idea to use np.array for type-specific commands. The array structure is useful here. list preserves the data type of the values. And for something I find rather pesky: the data type is specified as the first argument in array(), but (usually) the second in np.array(). :| The relation to C is referred to here:\nPython List vs. Array - when to use? Have fun exploring! Note: The typed and rather strict nature of array leans more towards C rather than Python, and by design Python does not have many type-specific constraints in its functions. Its unpopularity also creates a positive feedback in collaborative work, and replacing it mostly involves an additional [int(x) for x in file]. It is therefore entirely viable and reasonable to ignore the existence of array. It shouldn't hinder most of us in any way. :D", "abstract": ""}, {"id": 1514557, "score": 413, "vote": 0, "content": "Now variable refers to an empty list*. Of course this is an assignment, not a declaration. There's no way to say in Python \"this variable should never refer to anything other than a list\", since Python is dynamically typed. *The default built-in Python type is called a list, not an array. It is an ordered container of arbitrary length that can hold a heterogenous collection of objects (their types do not matter and can be freely mixed). This should not be confused with the array module, which offers a type closer to the C array type; the contents must be homogenous (all of the same type), but the length is still dynamic.", "abstract": ""}, {"id": 36042565, "score": 189, "vote": 0, "content": "This is surprisingly complex topic in Python.  Arrays are represented by class list (see reference and do not mix them with generators). Check out usage examples: Under the hood Python's list is a wrapper for a real array which contains references to items. Also, underlying array is created with some extra space. Consequences of this are: Check this awesome table of operations complexity. Also, please see this picture, where I've tried to show most important differences between array, array of references and linked list:\n", "abstract": ""}, {"id": 13300517, "score": 8, "vote": 0, "content": "How about this...", "abstract": ""}, {"id": 21780274, "score": 4, "vote": 0, "content": "I had an array of strings and needed an array of the same length of booleans initiated to True. This is what I did", "abstract": ""}, {"id": 15822462, "score": 6, "vote": 0, "content": "Python calls them lists. You can write a list literal with square brackets and commas:", "abstract": ""}, {"id": 1514559, "score": 38, "vote": 0, "content": "This is how:", "abstract": ""}, {"id": 1514561, "score": 17, "vote": 0, "content": "You don't declare anything in Python. You just use it. I recommend you start out with something like http://diveintopython.net.", "abstract": ""}, {"id": 4476624, "score": 67, "vote": 0, "content": "I think you (meant)want an list with the first 30 cells already filled.\nSo An example to where this could be used is in Fibonacci sequence.\nSee problem 2 in Project Euler", "abstract": ""}, {"id": 1514649, "score": 140, "vote": 0, "content": "You don't actually declare things, but this is how you create an array in Python: For more info see the array module: http://docs.python.org/library/array.html Now possible you don't want an array, but a list, but others have answered that already. :)", "abstract": ""}, {"id": 1514564, "score": 13, "vote": 0, "content": "I would normally just do a = [1,2,3] which is actually a list but for arrays look at this formal definition", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/68522868/create-a-numpy-array-from-parts-of-other-arrays-in-python", "keywords": [], "tags": ["python", "arrays", "numpy"], "question": {"id": 68522868, "title": "Create a Numpy array from parts of other arrays in Python", "content": "EDIT So I just understand now that Python and Numpy just don't do polymorphism very well. Given the same data, it has to be put into the right form before most functions can use it. So expecting Python to be able to 'one-line' something is beyond its capabilities. Just for comparison, MATLAB doesn't do polymorphism very well either but it's much less noticeable as by default it keeps all numeric data as a 2D array so the majority of functions will work with the majority of data - making it soooo much easier EDIT I'm pretty new to Python and struggling to create new arrays out of existing arrays: In MATLAB the following works to create a column vector from other column vectors: a = [b(5:6); c(N:M); d(1:P); e(Q)] with a lot of computational flexibility (Q could be a vector for example). In Python, I can't find a nice command to add multiple 1D NumPy arrays together and it seems to have lots of issues with single values as it changes them from NumPy arrays to some other format, WHY?! Can anyone give me a single line of code to carry out the above? It'd be great to see - so far all I've got is lines and lines of checking for the indexing variables (N, M, P, Q) and soooo many np.array(..)'s everywhere to try and keep things the same data type. I've tried np.append but that doesn't work for multiple vectors (I could nest them but that seems very ugly, esp if I need to add many arrays) and np.concatenate complains that something is 0-dimensional, I don't understand that at all.", "abstract": ""}, "answers": [{"id": 68523177, "score": 1, "vote": 0, "content": "concatenate has no problems with a bunch of 1d array: If one argument is scalar: It make a array from the last but that's a 0d array.  In MATLAB that would be 2d - everything is 2d, there's not true scalars.  Remember, numpy works in python, which has scalars and lists.  MATLAB is matrices all the way down ... Also numpy arrays can be 0d or 1d.  There's no artificial 2d lower bound.  It's a general array language, not just matrices.  In MATLAB even 3d is a tweak on the original 2d. hstack adds a tweak to make sure all arguments are at least 1d: Even in MATLAB/Octave mismatched dimensions give problems:", "abstract": ""}, {"id": 68522975, "score": 0, "vote": 0, "content": "you would want to look on\nnp.concatenate\nwhich take sequence of arrays and axis to concatnate them on", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/62377953/how-do-i-make-a-python-array-made-up-of-multiples-of-e-g-3", "keywords": [], "tags": ["python", "arrays"], "question": {"id": 62377953, "title": "How do I make a Python array made up of multiples of (e.g) 3?", "content": "I'm making a program that counts from 1 to 1000 (printing each number) but changes the printed value at any multiple of 3. How do I make my array made up of multiples of a certain number without manually having to enter each multiple up to 1000? Thank you.", "abstract": ""}, "answers": [{"id": 62378037, "score": 1, "vote": 0, "content": "Something a lot longer but more understandable for a beginner:", "abstract": ""}, {"id": 62377968, "score": 1, "vote": 0, "content": "modulus % to check remainder To get only the multiples of 3:  ", "abstract": ""}, {"id": 62378017, "score": 0, "vote": 0, "content": "To determine if a number is a multiple of another number you can use the modulus operator '%'. So to change the output based on whether the number is a multiple of 3 you could do: If you specifically want an array of multiples you could do a variation of the above:", "abstract": ""}, {"id": 62378006, "score": 1, "vote": 0, "content": "You could use the python modulo operator with 3, e.g. 6 % 3 = 0 whereas 7 % 3 = 1. If the result is 0, the numerator is divisible by 3.", "abstract": ""}, {"id": 62378002, "score": 1, "vote": 0, "content": "As simple as :", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/1859864/how-to-create-an-integer-array-in-python", "keywords": [], "tags": ["python", "arrays"], "question": {"id": 1859864, "title": "How to create an integer array in Python?", "content": "It should not be so hard. I mean in C,  is all you need. How to create an array of all zeros for a random size. I know the zeros() function in NumPy but there must be an easy way built-in, not another module.", "abstract": ""}, "answers": [{"id": 56431492, "score": 3, "vote": 0, "content": "An alternative for casting the type when the array is made.  ", "abstract": ""}, {"id": 1859889, "score": 49, "vote": 0, "content": "If you are not satisfied with lists (because they can contain anything and take up too much memory) you can use efficient array of integers: See here If you need to initialize it, ", "abstract": ""}, {"id": 1861331, "score": 1, "vote": 0, "content": "If you need to initialize an array fast, you might do it by blocks instead of with a generator initializer, and it's going to be much faster. Creating a list by [0]*count is just as fast, still. Results:", "abstract": ""}, {"id": 1859887, "score": 33, "vote": 0, "content": "two ways: Edit: replaced range by xrange to avoid creating another list. Also: as many others have noted including Pi and Ben James, this creates a list, not a Python array. While a list is in many cases sufficient and easy enough, for performance critical uses (e.g. when duplicated in thousands of objects) you could look into python arrays. Look up the array module, as explained in the other answers in this thread.", "abstract": ""}, {"id": 1859893, "score": 6, "vote": 0, "content": "Use the array module. With it you can store collections of the same type efficiently. For more information - e.g. different types, look at the documentation of the array module. For up to 1 million entries this should feel pretty snappy. For 10 million entries my local machine thinks for 1.5 seconds.  The second parameter to array.array is a generator, which constructs the defined sequence as it is read. This way, the array module can consume the zeros one-by-one, but the generator only uses constant memory. This generator does not get bigger (memory-wise) if the sequence gets longer. The array will grow of course, but that should be obvious. You use it just like a list: ...or simply convert it to a list: Surprisingly is faster at construction than the array method. Go figure! :)", "abstract": ""}, {"id": 1860003, "score": 1, "vote": 0, "content": "Use range instead if you are using Python 3.x.", "abstract": ""}, {"id": 1859886, "score": 2, "vote": 0, "content": "gives you an array of length 10, filled with zeroes.", "abstract": ""}, {"id": 1859884, "score": 11, "vote": 0, "content": "", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/55059080/create-an-array-of-size-n-with-initialized-value", "keywords": [], "tags": ["python", "arrays"], "question": {"id": 55059080, "title": "Create an array of size n with initialized value", "content": "In python, it's possible to create an array of size n with [] * n or even initialize a fixed value for all items with [0] * n. Is it possible to do something similar but initialize the value with 500n? For example, create an array with size of 10 would result in this. [0, 500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500] I can easily achieve this with a variable and a for loop as shown below but I would like optimize this in one go to pass into Robot Framework.", "abstract": ""}, "answers": [{"id": 55059280, "score": 1, "vote": 0, "content": "It's allways a good idea to use numpy arrays. They have more fuctionalites and are very fast in use (vectorized form, and fast compiled C-code under the hood). Your example with numpy: gives:", "abstract": ""}, {"id": 55059165, "score": 2, "vote": 0, "content": "The other answer gives you a way, here's another :", "abstract": ""}, {"id": 55059124, "score": 11, "vote": 0, "content": "Use a simple comprehension:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/52051667/writing-an-arrays-inside-an-array-in-python", "keywords": [], "tags": ["python", "arrays", "syntax"], "question": {"id": 52051667, "title": "Writing an arrays inside an array in python", "content": "I need to create empty arrays inside an array in order to fill each one of them differently in a loop later on but I couldn't figure out the correct syntax. I tried something like this: Bu it gives a syntax error. I really appreciate some help.", "abstract": ""}, "answers": [{"id": 52051912, "score": 1, "vote": 0, "content": "i think this will help you (if i understand your question correctly):", "abstract": ""}, {"id": 52051801, "score": 0, "vote": 0, "content": "Everything is an object in Python. And Lists can accept any type of data. So List can accept Lists too. Using this you can just place lists in a list. ", "abstract": ""}, {"id": 52051697, "score": 0, "vote": 0, "content": "here's my example also, check this out for referencing:\nAccess item in a list of lists", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/45716569/python-how-to-create-an-array-based-on-condition", "keywords": [], "tags": ["python", "arrays", "numpy", "conditional-statements"], "question": {"id": 45716569, "title": "python how to create an array based on condition", "content": "I want to create an array with a format, and the values originate from another array. My input array consists out of three columns. I want to create an array with in the first row all values from the third column if the second column is equal. So in this example the first three values in the second column are equal, so in the new array i want the third value of each row in the new array.  result: I tried: But the result is a list of all 3rd values", "abstract": ""}, "answers": [{"id": 45716774, "score": 1, "vote": 0, "content": "The below works for me:", "abstract": ""}, {"id": 45716784, "score": 1, "vote": 0, "content": "If the second column is sorted, you can use np.diff to find out the index where the value changes and then split on it:", "abstract": ""}, {"id": 45716681, "score": 1, "vote": 0, "content": "It's important, that ais converted to a np.array for this.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/41189474/how-to-create-an-array-in-python", "keywords": [], "tags": ["python", "arrays", "python-3.x", "numpy"], "question": {"id": 41189474, "title": "How to create an array in Python", "content": "Trying to write my first python program. In a working sample program (script), some array of data is defined like this: And when I subsequently type \"x_data\" in a Python console, it returns and the script works. Now I want to use my own data sets instead.  I'm trying a statement like this and replace use of x_data with my_data, but then the program doesn't work.  I notice that when I type \"my_data\" in the Python console, it returns which is missing the parts that say \"array\" and \"dtype=float32\".  I'm guessing that difference is related to the problem. How can I declare a dataset my_data that would be treated like x_data so I can feed my own data into the program? I think it's irrelevant, but here's the full sample script I started from (which works):", "abstract": ""}, "answers": [{"id": 41189558, "score": 3, "vote": 0, "content": "I'm guessing you're coming from Matlab? Python square-bracket notation doesn't give you any type of array by default: it gives you a simpler object of the built-in type list.  numpy, the ubiquitous third-party package, is what you want to use for arrays. Clearly you already have it available. The second line below converts your variable from a list to a numpy array with the same data type as your other array x_data:", "abstract": ""}, {"id": 41189517, "score": 1, "vote": 0, "content": "numpy will construct an array from a list if you just use np.array: Note that you can specify the datatype as well: Also note that there are times when you might be working with an object that might be a list or it might be a numpy array.  np.array will copy an array if you pass that in as input.  That is sometimes not desireable for performance reasons.  If you find yourself in that situation, you can use np.asarray which will convert non-arrays into arrays but it'll return arrays untouched.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/33405358/python-how-to-make-an-array-of-arrays-of-pairs", "keywords": [], "tags": ["python"], "question": {"id": 33405358, "title": "Python: How to make an array of arrays of pairs?", "content": "I want to make an array which contains arrays of pairs (C++ like pairs) of different sizes, any idea how to do it in python? To be more specific, I need to know the equivalent to this C++ code in python:", "abstract": ""}, "answers": [{"id": 33406001, "score": 8, "vote": 0, "content": "You can implement pairs with tuples, which can be created by separating elements with commas, usually with parenthesis enclosing them for better readability. For the vectors, you can use lists which allow you to remove and add elements to them as you see fit. These are created with comma separated elements enclosed in square brackets. An example of implementing your type of structure would be: Which results in the object: Which can be visualized as:", "abstract": ""}, {"id": 33405921, "score": 3, "vote": 0, "content": "append() is similar to push_back() method for C++ vector. pop() is the same thing as pop() method for C++ vector. () is used in place of make_pair() in C++ pair Hope this clear it all. ", "abstract": ""}, {"id": 33405972, "score": 1, "vote": 0, "content": "In Python we call vector as list. To construct a list, use \nl = []. To construct an empty list of list, use ll = [[]] To construct an empty list of list of tuple, First, you need a list of list, uselll = [[]]. Then you construct a pair, in Python we call it tuple. Say we have a tuple t = (3, 9). Then we may append this tuple to our lll ==> Use lll[0].append(t). Print out lll, we get [[(3, 9)]]. ", "abstract": ""}]}]