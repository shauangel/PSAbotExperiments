[{"link": "https://stackoverflow.com/questions/11736407/apply-list-of-functions-on-an-object-in-python", "keywords": [], "tags": ["python", "functional-programming"], "question": {"id": 11736407, "title": "Apply list of functions on an object in Python", "content": "Is there any clean way to apply a list of functions on an object in Python without lambda or list comprehensions? Like the Haskell expression: Example with lambda in Python: Is it extendable to class functions? Perhaps something from operator or itertools?", "abstract": ""}, "answers": [{"id": 69120128, "score": 1, "vote": 0, "content": "I think the question can be read in two ways, apply a list of functions to an object and yield the result of each in a list (Single input, multiple output) OR apply a list of function to an object in sequence (Singe input, single output). The latter is solved by the compose function, or by defining your own: Most answers to the latter are equivalent, but really the list comprehension  either because the functions are applied in \"parallel\" not in sequence or because you have to import a separate library.  looking at a few answer, it can depend on what your result should look like, i.e. are you okay to have In all those cases the result is:", "abstract": ""}, {"id": 11736942, "score": 12, "vote": 0, "content": "I think this should fit your 'functional' criteria, To answer your question, I don't think there is a clean way and you should just acclimatize to list comprehensions. As suggested by @J.F.Sebastian Here is a crazy way of doing it: As suggested by @AleksiTorhamo", "abstract": ""}, {"id": 60139520, "score": 1, "vote": 0, "content": "The library toolz has a compose function that does just that.", "abstract": ""}, {"id": 58327951, "score": 0, "vote": 0, "content": "This is my solution: result\nOut[16]: ['aa', 'aaaa', 'bb', 'bbbb', 'cc', 'cccc', 'dd', 'dddd']", "abstract": ""}, {"id": 20838771, "score": 9, "vote": 0, "content": "The problem is the missing $ operator which is trivially defined by then one can do the currying ($ obj) with a partial in python like this: partial(apply, a=obj) having this we can do a map apply with", "abstract": ""}, {"id": 11736703, "score": 5, "vote": 0, "content": "I think that list comprehensions are the best way to build one list based on another. Applying regular functions from a list is quite easy: If you don't need the whole list of results at once, but only need to iterate over the items in one at a time, a generator expression may be better: If your functions are methods, rather than basic functions there are two ways to go: Using bound methods, in which case you don't need to provide the object at all when making the function calls: Or using unbound methods, which are simply regular functions that expect an instance of the class they are defined in as their first argument (conventionally named self): Of course, if you don't need to capture the results of the function, it is simplest to simply write a loop:", "abstract": ""}, {"id": 11736719, "score": 18, "vote": 0, "content": "You could always just create a function to take care of it for you:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/22514947/call-methods-in-sequence", "keywords": [], "tags": ["java", "methods"], "question": {"id": 22514947, "title": "Call Methods in Sequence", "content": "I have 5 different methods like this I want to call this method from 1 to 5 is there any convinient way to do this. I don't want to call one by one or I don't want to put method call  inside other method. How Can I do this??", "abstract": ""}, "answers": [{"id": 74256352, "score": 3, "vote": 0, "content": "You can use the Execute Around Method pattern. More info at https://agiledeveloper.com/", "abstract": ""}, {"id": 22515138, "score": 2, "vote": 0, "content": "Have you looked into fluent design patterns? http://www.javacodegeeks.com/2013/01/fluent-object-creation.html Example would be something like this:", "abstract": ""}, {"id": 22515034, "score": 0, "vote": 0, "content": "The only way to call methods by name is through reflection.  See this article for how to do this: How do I invoke a Java method when given the method name as a string? Something like this should work:", "abstract": ""}, {"id": 22515267, "score": 1, "vote": 0, "content": "You could do this with reflection as other answers have previously mentioned.  Reflection is generally avoided if possible. In reality the most common design pattern to address your concern would be Chain of Responsibility.\nhttp://en.wikipedia.org/wiki/Chain-of-responsibility_pattern", "abstract": ""}, {"id": 22515057, "score": 4, "vote": 0, "content": "I believe you could do it with reflection with something like: Haven't tested it out, so no guarantees. ", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/39123375/apply-a-list-of-python-functions-in-order-elegantly", "keywords": [], "tags": ["python", "functional-programming", "function-composition"], "question": {"id": 39123375, "title": "Apply a list of Python functions in order elegantly", "content": "I have an input value val and a list of functions to be applied in the order: How to apply elegantly and not writing and also not using for loop: Thanks Martijn for the awesome answer. There's some reading I found: https://mathieularose.com/function-composition-in-python/ .", "abstract": ""}, "answers": [{"id": 39123400, "score": 33, "vote": 0, "content": "Use the reduce() function: reduce() applies the first argument, a callable, to each element taken from the second argument, plus the accumulated result so far (as (result, element)). The third argument is a starting value (the first element from funcs would be used otherwise). In Python 3, the built-in function was moved to the functools.reduce() location; for forward compatibility that same reference is available in Python 2.6 and up. Other languages may call this folding. If you need intermediate results for each function too, use itertools.accumulate() (only from Python 3.3 onwards for a version that takes a function argument):", "abstract": ""}, {"id": 39130019, "score": 8, "vote": 0, "content": "MartijnPieters answer is excellent. The only thing I would add is that this is called function composition Giving names to these generics means you can use them whenever the need arises Sometimes you want it to look nicer though - And sometimes you want more flexibility -", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/50872410/how-to-apply-sequence-of-functions-to-an-object", "keywords": [], "tags": ["python", "python-3.x", "class", "scope"], "question": {"id": 50872410, "title": "How to apply sequence of functions to an object?", "content": "Based on a set of instructions in the form of a string, I have to apply certain instructions (fxns) on an object, one after the other. This is a part of a larger system. I've arrived at this point. I need a way to iterate, and return the object's condition at the end of the instructions. I came across this reference, but over there, functions are being applied to a constant initial data to get a list of outputs. In my case however, the object is changing with the iteration. hence the while statement, but I also need an iterate to apply my ith function.  I tried to make a recursive function as well (it was inside a for statement, and it didn't feel right at all), with the base condition being length of instructions reaching 0, (each recursive call carrying out an instruction, till no more left, hence it is also decreasing in complexity), it looks like a good candidate for recursion, and I will appreciate a solution in that manner, if anyone is interested.  fun_args is a list and a list is not callable, actually need something like - fun_args[i](intermediate)", "abstract": ""}, "answers": [{"id": 69120426, "score": 0, "vote": 0, "content": "I think you were pretty close with the idea of a recursion: But why not decode the instruction set outside of the function and pass in the initial object plus the list of transformations? It can turn into a one-liner:", "abstract": ""}, {"id": 50872560, "score": 0, "vote": 0, "content": "The solution is quite simple:", "abstract": ""}, {"id": 50872556, "score": 0, "vote": 0, "content": "If you have a list of functions, you can then apply them one by one:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/72340656/calling-multiple-methods-of-an-object-in-sequence", "keywords": [], "tags": ["python"], "question": {"id": 72340656, "title": "Calling multiple methods of an object in sequence", "content": "I need to do something like this: Is there a way to shorten this? Like: or something?", "abstract": ""}, "answers": [{"id": 72341124, "score": 1, "vote": 0, "content": "For a systematic approach and keeping the integrity of the methods use methodcaller. Compatible with arguments, see doc.", "abstract": ""}, {"id": 72340759, "score": 2, "vote": 0, "content": "You can do this by ensuring that the instance functions (methods) each return a reference to the instance in which they are running (self) Output: Observation: Whilst it can be done, I offer this merely as an answer to the original question. I do not condone the practice", "abstract": ""}, {"id": 72340714, "score": 3, "vote": 0, "content": "You can call a objects method by string using the getattr() function build into python.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/68083727/java-stream-how-to-apply-a-function-to-the-previous-result", "keywords": [], "tags": ["java"], "question": {"id": 68083727, "title": "Java stream, how to apply a function to the previous result", "content": "I was looking for a right answer, but found nothing that fill my purpose. I have a simple for loop like this: and I never understood if the same result can be achieved using java stream. With reduce maybe? I need to pass the response of the previuos loop (saved in the \"test\" variable) to the next loop (see clean method, where I pass test). How can I do that?", "abstract": ""}, "answers": [{"id": 68084955, "score": 1, "vote": 0, "content": "To expand on my comment, with streams you basically could use reduction, e.g. by using the reduce() method. Example: This would result in: Note, however, that streams are not a silver bullet and sometimes a simple loop like your initial code is just fine or even better. This seems to be such a case.", "abstract": ""}, {"id": 68084323, "score": 4, "vote": 0, "content": "If you want to do something for each element in a list (with a for each loop) I would suggest using the forEach or forEachOrdered functions. These should represent your for(Object o : objects). You can easily define your own Consumer class, which handles all the stuff for you: This example uses Integer as a provided class, if you want to use your own just replace Integer. You can even use generics: Output: If you want to learn more about streams the oracle docs provide some good stuff.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/55883499/java-can-i-add-functions-to-a-collection-for-executing-in-sequence", "keywords": [], "tags": ["java"], "question": {"id": 55883499, "title": "Java Can I Add Functions to a Collection for Executing in Sequence?", "content": "I'm new to Java. I want rewrite some Python code to Java to achieve basically the same functions. One part in my Python code is to execute the functions in sequence. Can I create a similar collection of methods in Java? process_workflow.py The methods of each stage are defined in another Python script. stages.py My tentative Java code:", "abstract": ""}, "answers": [{"id": 55883579, "score": 0, "vote": 0, "content": "I would use reflection:", "abstract": ""}, {"id": 55883581, "score": 4, "vote": 0, "content": "You can do it in Java 8+ with Functional Interfaces and Method References. In your case, a void method with no parameters and no throws clause, your methods match the Runnable interface method: So your code would be: If the methods are static, e.g. they don't need access to instance fields, your code would be: The processWorkflow method would still be the same. As you can see, that closely matches your Python code, but it is fully type-safe.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/55401522/calling-class-object-methods-in-sequence", "keywords": [], "tags": ["python"], "question": {"id": 55401522, "title": "Calling class/ object methods in sequence", "content": "Is there a way to call class/ object methods in a sequence without writing every time the \"class.method\" or \"object.method\"?  ", "abstract": ""}, "answers": [{"id": 55401653, "score": 1, "vote": 0, "content": "You can store the function objects in a list so that you can iterate through the list to call the function objects instead:", "abstract": ""}, {"id": 55401642, "score": 0, "vote": 0, "content": "One way would be to make it a fluid design, and return the class from each classmethod: Now, you can chain the function calls: Will this design meet your need, and go along your work is highly dependent on your code.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/46293228/enforce-a-sequence-for-calling-methods-in-a-class", "keywords": [], "tags": ["python"], "question": {"id": 46293228, "title": "Enforce a sequence for calling methods in a class", "content": "Lets say we want to implement a functionality using a class What's the best way to make sure that generate_query() has been called before send_query(), ofcourse vice versa doesn't make sense. It's important because simply mentioning in the API documentation to call another method before you've called send_query() is another thing, but checking it explicitly in the code in send_query() that generate_query() has been called before is a good practice IMO. I am expecting a solution like if generate_query() has not been called, we raise an exception or so. There was a nice pythonic way to do this, I had read somewhere, but I forgot the source and the solution both. Help is appreciated!", "abstract": ""}, "answers": [{"id": 51708475, "score": 1, "vote": 0, "content": "I've come up with a base class you can inherit from to enforce method call order (tested in Python 2.7 and 3.6): Be warned, I don't fully understand how this works (I've managed to stop __getattribute__ from causing infinite recursion, but I don't understand what caused it in the first place, and I don't understand why I have to use FunctionType in one place and MethodType in another). It passed my minimal testing (Python 2.7 and 3.6), but you'll want to make sure you test it as well. All you need to do with your class is make it inherit from Sequenced, and modify its __init__ method like so: The base class allows your class to contain other methods (sequencing is only enforced on methods within the _method_sequence list). _method_sequence can contain duplicates if you want methods to be called more than once. In the case of a sequenced method being called out of sequence, or attempting to use a sequenced method after already having gone through the list, RuntimeError is raised. It's possible to modify the base class so that sequence methods can be called repeatedly once available, but I'll leave that as an exercise to the reader.", "abstract": ""}, {"id": 46293360, "score": 0, "vote": 0, "content": "One option could be to use boolean flags. This approach is simple, but not very clean. I would advice you to try to reconstruct the class and methods. Requiring methods to run in a particular order is prone for errors, especially if it is not documented.", "abstract": ""}, {"id": 46293285, "score": 0, "vote": 0, "content": "My idea would be to keep a instance variable name flag which will be True,if the generate_query is called, and if flag is false, it means that generate_query is not called and so, you will call the generate_query inside send_query or show a message.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/32872589/apply-a-sequence-of-functions-to-value-and-get-the-final-result", "keywords": [], "tags": ["scala"], "question": {"id": 32872589, "title": "Apply a sequence of functions to value and get the final result", "content": "I wish to apply a sequence of functions to an object (each of the functions may return the same or modified object) and get the ultimate result returned by the last function. Is there an idiomatic Scala way to turn this (pseudocode): into this? The pipeline is initialized at runtime and contains an undetermined number of \"manglers\". I tried with foreach but it requires an intermediate var to store the result, and foldLeft only works on types of ListMap, while the initial value and the result are of type Something. Thanks", "abstract": ""}, "answers": [{"id": 32872834, "score": 2, "vote": 0, "content": "Assuming input and output types are the same, I'd go with a reduceLeft and composition by andThen:", "abstract": ""}, {"id": 32872791, "score": 0, "vote": 0, "content": "Get rid of your keys, first:", "abstract": ""}, {"id": 32872771, "score": 0, "vote": 0, "content": "I think foldLeft is the right choice:", "abstract": ""}, {"id": 32872750, "score": 6, "vote": 0, "content": "This should do it: No idea why pipeline contains pairs, though.", "abstract": ""}]}]