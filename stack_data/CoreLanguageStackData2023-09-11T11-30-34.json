[{"link": "https://stackoverflow.com/questions/76856193/higher-order-function-in-python", "keywords": [], "tags": ["python", "higher-order-functions"], "question": {"id": 76856193, "title": "Higher-order function in Python", "content": "When doing the Homework 3 of CS 61A, I meet a problem as shown below in annotation: the name h is fine, but initially I use the name func, which appears in function composer before, and it causes a RecursionError. Why? I tried the Python Tutor to visualize the code execution, but I still have difficulty understanding the reason of this error...", "abstract": ""}, "answers": [{"id": 76866932, "score": 0, "vote": 0, "content": "You call func_adder with a new function g to create h.\nYou use composer(h) to create a new composer function that includes the composition of func and h.\nBut, this new composer function is never used to actually perform any computation. Instead, it becomes part of the nested structure of the composer function itself.\nDue to this recursion, your code enters an infinite loop, repeatedly creating new composer functions without ever applying the composed functions to any input.\nBelow code should help solve your issue.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/71035822/python-higher-order-function-new-way-to-find-fibonacci-numbers", "keywords": [], "tags": ["python", "fibonacci", "higher-order-functions"], "question": {"id": 71035822, "title": "Python Higher Order Function: New way to find Fibonacci Numbers", "content": "I am given a question to write a higher order function to find fibonacci numbers.\nFirst, I am defined the combine function below: For example, new_fib(10) = 55 The function I'm supposed to define is thus to find the nth fibonacci number: The idea I have to solve this question is simply to chuck the fibonacci sequence into the f(x) function, but I've been facing a lot of problems. Here's what I have now: But that's wrong because it accumulates too fast. I can picture why in my head, but cannot figure a way out to get around it. Does anyone have any advice? It would be greatly appreciated! Thank you!", "abstract": ""}, "answers": [{"id": 75336610, "score": -1, "vote": 0, "content": "", "abstract": ""}, {"id": 71036511, "score": 0, "vote": 0, "content": "The operation should just be a, b => b, a+b, and you iterate it. Code could be: It correctly gives 55 for new_fib(10)", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/74854614/python-pass-function-with-parameters-as-parameter-to-higher-order-function", "keywords": [], "tags": ["python", "python-3.x"], "question": {"id": 74854614, "title": "Python pass function with parameters as parameter to higher order function?", "content": "When ever I try to pass one function with parameter (test) to a function (await_char) the passod on function executes first skipping the runtime order of await_char? ` ` I tried args, kwargs but I don't know how to make this optional parameter", "abstract": ""}, "answers": [{"id": 74854675, "score": 1, "vote": 0, "content": "Typically when you pass arguments to a function, those arguments are evaluated when the function is called. In your case, you want a pointer to a function that will be called later. There are a few ways to do this, but the simplest and first that comes to mind is via the lambda operator. It allows you to create a nameless function and then use that unnamed function later. But, more than that, when you define the unnamed function, you can pass whatever arguments you want to at the time of definition. So, simplest change to your code is to change: to: Also, as a side note, please be consistent with your argument order. You define: but then later call it via  await_char(param, msg, func) more or less... The order must be maintained, or you will get unexpected results. Also, as a matter of taste, func=\"\" is not the best default choice. Typically for a variable like func, None would be a more common default value. \"\" for msg is a fine choice.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/74483499/python-higher-order-function-with-varying-arguments", "keywords": [], "tags": ["python", "python-3.x", "higher-order-functions"], "question": {"id": 74483499, "title": "Python Higher order-function with varying arguments", "content": "I am trying to write a higher-order function that takes a varying amount of arguments.\nFor instance something like this Is it possible to do this without changing the functions one_arg() or two_arg() ? I've looked into using *argv but I don't think I understand it well enough or see a way to use that without changing those two functions", "abstract": ""}, "answers": [{"id": 74483522, "score": 1, "vote": 0, "content": "you can just use * to define multiple args. Also for more details regarding functions and object oriented programming in python you can refer to this link There are a lot more additional resources available online for you to learn", "abstract": ""}, {"id": 74483521, "score": 0, "vote": 0, "content": "Define higher and call fnc like this: Within the body of higher, args is a tuple of the positional arguments passed after fnc.  Calling fnc(*args) spreads that tuple into individual positional arguments to fnc.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/70168737/higher-order-function-callable-in-python", "keywords": [], "tags": ["python", "higher-order-functions", "callable"], "question": {"id": 70168737, "title": "higher-order function callable in python", "content": "I have the following code which I struggle to understand.\nIt defines 2 functions and then it assign the the function to h, but what are X and Y? more info\ndef func_max(f: Callable[[int], int], g: Callable[[int], int])-> Callable[[int], int]: that takes as parameters the functions f and g as above. It returns the function h(x) that is defined on integers x and the return value of h on an integer x is equal to the maximum of m and n, where m = f(x) and n = g(x). The exercise is asking to assemble the following in the correct order, which I will try but it does not work, here it goes: For example I don't understand how small x enters into play now...", "abstract": ""}, "answers": [{"id": 70168970, "score": 1, "vote": 0, "content": "High order functional programming can get real weird real quickly. Since this seems to be a homework exercise, I won't give you the straight answer, but consider this: This defines a function that modifies the function it gets passed. I can use it like this: So, make_function_print_arg is a function which takes a function f as an argument. Within its body, it defines a new function. This new function takes a single argument, prints that argument out, then calls f with that single argument. Finally, make_function_print_arg returns the new function it just defined. Later on, we can call make_function_print_arg with a function that we've already defined, which returns a new function that's a lot like our old function, but with some modified behaviour. Now, in your case, you want to define a function which takes two functions as arguments, calls both of them, and returns whichever result is greater. I'm pretty certain that one of the lines you need to unscramble should read, return g(x), so I think either you or your teacher made a typo, but working around that, see if you can use the ideas in make_function_print_arg to manage it! For your own education, you might also want to read about how decorators work, which is quite similar to what you're learning about right now: https://book.pythontips.com/en/latest/decorators.html", "abstract": ""}, {"id": 70168888, "score": 0, "vote": 0, "content": "In your code, you are calling only f(x) in both if and else statement. You can try:", "abstract": ""}, {"id": 70168821, "score": 3, "vote": 0, "content": "max_func should return a function that takes an argument (x), applies it to f and g and then return the maximal value:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/69102744/python-higher-order-functions-how-do-i-avoid-repeating-arguments", "keywords": [], "tags": ["python", "dependency-injection", "higher-order-functions", "functools"], "question": {"id": 69102744, "title": "Python higher order functions: how do I avoid repeating arguments?", "content": "I have a higher order function with required argument required, function func, and arguments for func *args. However, func may take required as an argument. This works fine but is not pythonic when I supply some func which takes required as an argument. Now when calling with the higher order function, I must repeat the argument! This does not seem neat to me, and I'd much rather have higher_order_func only require an argument once. Solution 1 Use functools.partial and supply the partial function to higher_order_func. This doesn't really solve the problem, required is still written out twice. Solution 2 Check if 'required' is in func's argument names, and call it conditionally. I can now call as desired: Neater, but seems hacky. Is there a more pythonic way to achieve this?", "abstract": ""}, "answers": []}, {"link": "https://stackoverflow.com/questions/68150958/higher-order-functions-and-frame-stacking", "keywords": [], "tags": ["python", "higher-order-functions"], "question": {"id": 68150958, "title": "Higher Order Functions and Frame Stacking", "content": "I have been struggling to understand the concept of scoping the frames with a given higher order function being called recursively. An example I can give that I learnt in class is: From what I understand, we are stacking our make function and upon calling take, it will evaluate the current and previous call to the make functions to see whether attempt matches one of our keys. In a more general way, what is the concept behind this H.O.F manipulation and how do I make similar code from it?", "abstract": ""}, "answers": [{"id": 68190424, "score": 1, "vote": 0, "content": "It's true that such a doubly nested inner function involving multiple closures is quite convoluted and hard to wrap one's head around. It can be helpful to take a look at what the dynamically defined inner functions actually look like in a particular case. For example, after running your sample code, the take functions will be equivalent to being defined like this: Looking at this code, it's much easier to understand why take3('key3') == 'code3' or take3('key1') == 'code1'. You can see that the functions' else branches work as kind of a default-value cascade, enabling the correct key look-up, ultimately falling back to 0 if the key is not found. To get acquainted with the concept of higher order functions, I would definitely recommend to start with something less complicated, e.g. a factory function that makes simple multiplying functions: These two dynamically generated functions will work exactly the same as if you defined them manually like", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/48837431/higher-order-functions-on-python", "keywords": [], "tags": ["python", "higher-order-functions"], "question": {"id": 48837431, "title": "Higher Order Functions on Python", "content": "I am given a list of functions and asked to define plus(x,y) with add1 and repeated. plus is a function that takes in two numbers and returns the total. However, I cannot get any output with my definition. It just gives the name of the function. Any help is appreciated!", "abstract": ""}, "answers": [{"id": 48837500, "score": 1, "vote": 0, "content": "The detail is that plus returns a function and that's why you see the name of the function instead of a numeric value. I think that's why there is the x parameter in plus. Just change this line of code to This will evaluate the return function of repeated with the value in x. So using  plus(5, 1) >> 6", "abstract": ""}, {"id": 48837475, "score": 1, "vote": 0, "content": "That is an interesting way to do addition. It works quite well, you just missed one thing. Repeated returns a function which will give the sum, not the sum itself. So you just have to call repeated(add1, y) on x like this The rest of the code works fine.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/47124302/higher-order-function-python", "keywords": [], "tags": ["python"], "question": {"id": 47124302, "title": "Higher order function - Python", "content": "I have an assignment to write a code in high order function (Function 1). However, I do not know why I should write it like that instead of normal one (Function 2). I would really appreciate if someone could show me when High order function is better.", "abstract": ""}, "answers": [{"id": 47124372, "score": 0, "vote": 0, "content": "I lack formal knowledge of functional programming, but in essence, having higher order functions allows you to create functions as needed and pass them to other higher order functions. Just like objects can take in other objects, languages that treat functions as first class citizens allow functions to be passed into other functions. Consider this example, This add function can be used to create functions as needed Note that when you create a function within a function, the inner function is within a closure and has access to the scope of the outer function. In the case of the add function, the inner func has access to a when it returned by add and used in twoMore. Just to conclude my point about passing functions around, consider this other example", "abstract": ""}, {"id": 47124379, "score": 2, "vote": 0, "content": "First, give your functions a better name, so the usage is more clearly: So the function is used to define a polynomial, which can be used to evaluate for different x: And to use it somewhere else:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/30609943/python-higher-order-functions-with-methods", "keywords": [], "tags": ["python", "higher-order-functions"], "question": {"id": 30609943, "title": "Python: Higher Order Functions with Methods", "content": "In Python, is there anyway to pass a method to a higher order function, as you would if passing a regular function? For example, let's say I have a string, \"str\", and depending on some condition, \"cond\", I want to apply some arbitrary method, \"meth\", to the string and return it. In code: Now, I know the above doesn't work. I also know that I could write something like: and pass the object and method I want to execute to func like this: func(str, str.capitalize(), cond). The problem with the above is that: If I, for example, want to modify \"str\" in anyway before the application of the method, then I end up with an incorrect result. Consider: will not work as intended. So, returning to the beginning: is there anyway to accomplish what I want? Or am I approaching this from the wrong direction altogether?", "abstract": ""}, "answers": [{"id": 30610101, "score": 3, "vote": 0, "content": "You can pass a method to a higher order function just like you would any function, you just have to pass it as object.method: result: Or alternatively if you might try: However, as pointed out in the comments, this second approach won't work if you have a statement as s = s + 'a' inside the function, since you are just binding the local variable s to a new string, while method is still bound to the upper method of the string initially passed to the function.", "abstract": ""}, {"id": 30610138, "score": 0, "vote": 0, "content": "Don't quite sure what you're asking, but you could pass a function like the following. And run it like this: (for example lowercase) should return \"abc\"", "abstract": ""}, {"id": 30610120, "score": 1, "vote": 0, "content": "I think what you what is to pass meth as an unbounded method, so it can be bounded to another object dynamicly. you can think an unbounded method as an regular who must take an object as its first argument", "abstract": ""}, {"id": 30610087, "score": 0, "vote": 0, "content": "This does not allow you to call the function exactly as you wanted but it gets really close so perhaps it solves your problem.", "abstract": ""}]}]