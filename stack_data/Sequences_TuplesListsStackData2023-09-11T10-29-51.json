[{"link": "https://stackoverflow.com/questions/71875601/how-to-create-a-multidimensional-list-of-a-variable-amount-of-dimensions-in-pyth", "keywords": [], "tags": ["python", "list", "recursion", "multidimensional-array"], "question": {"id": 71875601, "title": "How to create a multidimensional list of a variable amount of dimensions in python?", "content": "I am trying to create a function that will make a multidimensional list taking an input number to choose the amount of dimensions the list will be. This is my code so far: I think this isn't working because the recursion is just putting in the single dimensional list, but I am not sure on that.", "abstract": ""}, "answers": [{"id": 71875657, "score": 3, "vote": 0, "content": "You're overcomplicating it IMO.  The general idea behind recursion is to solve the easiest case first, and then return the result of the more difficult case in terms of an incrementally easier case. For this function, the \"easy case\" is that a 1-dimensional list is [].  The incrementally easier case is that an n-dimensional list is an n-1-dimensional list inside a list.  Hence: If you wanted to complicate it a bit to make it a more interesting example of recursion, you could define a filler value for the 1-dimensional lists and the length of each list:", "abstract": ""}, {"id": 71875671, "score": 1, "vote": 0, "content": "as @Samwise wisely said, you have simpled awesome approuch like his, specifically for your issue,\nyou need to send down nested list instead of appending item and returning it:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/68779250/python-enumerate-a-multidimensional-list", "keywords": [], "tags": ["python", "multidimensional-array", "enumeration"], "question": {"id": 68779250, "title": "Python - enumerate a multidimensional list", "content": "Let's say I have a multidimensional array, foobar: Note that foobar is jagged. The thing I need to do is replace each number in foobar with a tuple containing that number and its exact position in foobar. I also need to be able to do this when the number of dimensions and whether or not foobar is jagged is unknown. Here is something similar, except it only works for 2 dimensions: Is there a user-defined function that can do what I said above?", "abstract": ""}, "answers": [{"id": 68785884, "score": 0, "vote": 0, "content": "So, I saw DarryIG's answer and modified it to fit my style: Credit will go to him. Thanks so much!", "abstract": ""}, {"id": 68779679, "score": 2, "vote": 0, "content": "Recursive generator for an arbitrary number of dimensions Code Test", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/13447882/python-2-7-creating-a-multidimensional-list", "keywords": [], "tags": ["python", "list", "python-2.7", "list-comprehension"], "question": {"id": 13447882, "title": "Python 2.7 creating a multidimensional list", "content": "In Python I want an intuitive way to create a 3 dimensional list. I want an (n by n) list.  So for n = 4 it should be: I've tried using: Which both appear to be creating copies of a reference.\nI've also tried naive application of the list builder with little success: I've also tried building up the array iteratively using loops, with no success.  I also tried this: Is there an easier or more intuitive way of doing this?", "abstract": ""}, "answers": [{"id": 67745723, "score": 1, "vote": 0, "content": "Here is a losution that works for any number of dimention :", "abstract": ""}, {"id": 66808223, "score": 0, "vote": 0, "content": "Just use a simple recursive function that continuously appends new arrays to the initialized arrays within itself. If you wanted to specify the size of each dimension, the amount of arrays within each dimension, then you could modify nd_array into doing so.", "abstract": ""}, {"id": 58325251, "score": 0, "vote": 0, "content": "You can also build a 2D list with different length rows using the append method.\ne.g. Result:", "abstract": ""}, {"id": 53567522, "score": 1, "vote": 0, "content": "Here's one that will give you an N dimensional \"matrix\" filled up with copies of a copiable object. Edit: This is a slight modification of pterodragon's original answer, which I much prefer to user2114402's less readable answer. In fact, outside of a doc-string the only difference from pterodragon's solution is that I explicitly use a list of dimension sizes, rather than have the user pass them as arguments.", "abstract": ""}, {"id": 52396188, "score": 2, "vote": 0, "content": "", "abstract": ""}, {"id": 42542269, "score": 0, "vote": 0, "content": "Here is a more generic way of doing it.  Result:", "abstract": ""}, {"id": 36703104, "score": 3, "vote": 0, "content": "In Python I made a little factory method to create a list of variable dimensions and variable sizes on each of those dimensions: run it like this: Which prints: The four dimensional lists (2x3x4x5),(5x4x3x2)", "abstract": ""}, {"id": 36498666, "score": 4, "vote": 0, "content": "A very simple and elegant  way is:", "abstract": ""}, {"id": 33460287, "score": 1, "vote": 0, "content": "I am amazed no one tried to devise a generic way to do it.\nSee my answer here: https://stackoverflow.com/a/33460217/5256940 Edit: Built on user2114402's answer: added default value parameter", "abstract": ""}, {"id": 19151158, "score": 6, "vote": 0, "content": "looks like the most easiest way is as follows: it's work for me", "abstract": ""}, {"id": 18744974, "score": 2, "vote": 0, "content": "How about this: You can then use it as follows", "abstract": ""}, {"id": 13447996, "score": 3, "vote": 0, "content": "i found this: You can now add items to the list: from here: How to define two-dimensional array in python", "abstract": ""}, {"id": 13448022, "score": 22, "vote": 0, "content": "I think your list comprehension versions were very close to working. You don't need to do any list multiplication (which doesn't work with empty lists anyway). Here's a working version:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/17636567/how-to-create-a-multi-dimensional-list", "keywords": [], "tags": ["python", "list"], "question": {"id": 17636567, "title": "How to create a multi-dimensional list", "content": "I want to initialize a multidimensional list. Basically, I want a 10x10 grid - a list of 10 lists each containing 10 items. Each list value should be initialized to the integer 0. The obvious way to do this in a one-liner: myList = [[0]*10]*10 won't work because it produces a list of 10 references to one list, so changing an item in any row changes it in all rows. The documentation I've seen talks about using [:] to copy a list, but that still won't work when using the multiplier: myList = [0]*10; myList = myList[:]*10 has the same effect as myList = [[0]*10]*10. Short of creating a loop of myList.append()s, is there a quick efficient way to initialize a list in this way?", "abstract": ""}, "answers": [{"id": 65860372, "score": 1, "vote": 0, "content": "Here is a function which works for an arbitrary number of dimensions using recursive list comprehensions. It doesn't need any imports to work. Example:", "abstract": ""}, {"id": 64809838, "score": -1, "vote": 0, "content": "Yet another method, but using the OP's rejected method. The output and testing below: The output is unlike the expected clone of l[0]. Although this is not time efficient. It takes nearly 7 seconds for a 1000X1000 list, where as list comprehensions took only 0.0052158 seconds for the same.", "abstract": ""}, {"id": 63993919, "score": 0, "vote": 0, "content": "I found that to get what you mean you need to youse Where dims is a list of length of the number of the dimentions you want and the content is the size of the requiered nd-list in every dimention.\nNot the most elegant but clear and does the job.", "abstract": ""}, {"id": 50590888, "score": 2, "vote": 0, "content": "An additional solution is to use NumPy library: This can be easily converted to a regular python list with the .tolist() method if necessary.", "abstract": ""}, {"id": 17636582, "score": 13, "vote": 0, "content": "This is a job for...the nested list comprehension!", "abstract": ""}, {"id": 17636593, "score": 27, "vote": 0, "content": "You can do it quite efficiently with a list comprehension:", "abstract": ""}, {"id": 26067367, "score": 2, "vote": 0, "content": "Just thought I'd add an answer because the question asked for the general n-dimensional case and I don't think that was answered yet. You can do this recursively for any number of dimensions with the following example:", "abstract": ""}, {"id": 17636785, "score": 0, "vote": 0, "content": "You might actually need an array instead of some lists. Almost every time I see this \"presized nested list\" pattern, something is not quite right.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/61871681/how-to-create-dynamic-multidimensional-list-in-python", "keywords": [], "tags": ["python", "arrays", "python-3.x", "list"], "question": {"id": 61871681, "title": "How to create dynamic multidimensional list in python", "content": "I know there are a lot of questions like this one, but I haven't found my answer so far. I am trying to dynamically fill a list with other lists, but I don't know why my code doesn't do what I want. My code: What I get: What I realy want: My goal would be, to dynamically add more dimensions arranged like this. Can somebody tell me, what I'm doing wrong? Thanks a lot.", "abstract": ""}, "answers": [{"id": 61871933, "score": 0, "vote": 0, "content": "", "abstract": ""}, {"id": 61871888, "score": 0, "vote": 0, "content": "In your example, x is a list containing three elements (integers).\nWith append, you add a new element. By appending y, you are adding a list as a fourth element (3 integers, one list). If you want to create a list of lists, tread x and y as elements for that, and combine them in a list: list_of_lists will then be [[1, 2, 3], [4, 5, 6]]. You can add another list by appending them: ... which will result in list_of_lists being [[1, 2, 3], [4, 5, 6], [7, 8, 9]].", "abstract": ""}, {"id": 61871886, "score": 0, "vote": 0, "content": "What you want is create a list of lists. You can do:  Actually, if you want to deal with multi-dimensional arrays, you should probably look at the numpy library (https://numpy.org/) ", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/56927865/create-a-multidimensional-list-from-array-objects", "keywords": [], "tags": ["arrays", "reactjs", "javascript-objects"], "question": {"id": 56927865, "title": "Create a multidimensional list from Array Objects", "content": "I am trying to create a multidimensional list from object full of arrays from a rest request in Javascript. The issue is my ability iterate over an array of objects. Can someone give me an example on how to turn this data structure into a JSX component?  I am trying to create a list that is wrapped in a div and looks like:   The data structure looks like this,\n The function that is set in the React Component is the following,", "abstract": ""}, "answers": [{"id": 56927950, "score": 2, "vote": 0, "content": "See sandbox here for live example: https://codesandbox.io/s/confident-heyrovsky-s0zg4 Assuming your data-structure looks something like: We can use Object.entries() to cleanly create an array of arrays, for each key-value pair. Then use .map() to create our outer-ordered-list items. And within each group, we will use another .map() to create the unordered-list-items.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/56199061/dynamic-multidimensional-list-in-python", "keywords": [], "tags": ["python", "arrays", "multidimensional-array"], "question": {"id": 56199061, "title": "Dynamic multidimensional list in Python", "content": "I want to create function which can insert a given value to a given index into a given array. It's quite simple with two-dimensional arrays: But what, if I want to do the same trick with multidimensional index? Suppose, we have arr = [] at the beginning. Then after executing insertInto((0,0,2), arr, 'yey') given arr should look like [[[None, None, 'yey']]], and arr[0][0][2] == 'yey'. I've tried to make such function, but it's hard to go into new dimensionality level. My idea was: The problem with this solution very obvious: I can't assign (for example) a = l[0] (where l is a list and a is some temporary variable) and then modify a, because it will not affect l (see this question). Does anybody have an idea how to do this another way? This code should not require any libraries.", "abstract": ""}, "answers": [{"id": 56199235, "score": 1, "vote": 0, "content": "A way to simplify the problem would be to use recursive functions. That way variables stay in the scope and shouldn't erase each other. I did use (index, *tail) instead of a tuple based index for simplicity The only drawback is that you're limited by the python callstack for the depth you can insert (~100 afaik) ", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/55325738/how-to-create-multidimensional-lists-and-loop-widgets-containing-the-lists-value", "keywords": [], "tags": ["dart", "flutter"], "question": {"id": 55325738, "title": "How to create multidimensional lists and loop widgets containing the lists value?", "content": "I'm new to Flutter & Dart and trying to build an App. My Goal for now is to build a List (Array), but with an \"index\" to access it later. Afterwards I want to output it within a widget. Unfortunately I haven't found any tutorials or helpful ressources on the web. Build a List which contains the date & days for an event. I tried the following, but it doesn't work. Loop throught the list and output it within a widget So how may I build the list the right way and output it? What I want to output inside a Text Widget is actually the title, date and day...but really tried many ways to acchieve it, no way. :)))  Thanks in advance!", "abstract": ""}, "answers": [{"id": 55326759, "score": 3, "vote": 0, "content": "you may create a basic class for your need create a List from that class/object and you able to render title , date and day with like that or you can change the Container according to your needs/design   ", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/47703909/creating-a-multidimensional-list-in-python3-and-assign-values-in-a-loop", "keywords": [], "tags": ["python", "multidimensional-array", "dynamic-arrays"], "question": {"id": 47703909, "title": "Creating a multidimensional list in python3 and assign values in a loop", "content": "I'm trying to create and fill in a multidimensional list in python 3.4 like this: then in a while list: but this way I'm getting the error: I know how many elements there will be but I'd prefer to do that more dynamically. Any idea how I should do this the right way?", "abstract": ""}, "answers": [{"id": 47704753, "score": 0, "vote": 0, "content": "you can not assign a value to an index which doesn't exist but you can append it to the bottom of the list or if you want to insert your element in a specific index you can use the insert function you can also use dictionary like this", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/34483800/how-to-create-a-multidimensional-array-from-lists-with-numpy", "keywords": [], "tags": ["python", "arrays", "list", "numpy"], "question": {"id": 34483800, "title": "How to create a multidimensional array from lists with NumPy?", "content": "There should be a way to turn a lists like this: to something like this: Right now I'm accomplishing this using for loops. Anyway for loops are slow and, not to sound like an infomercial but, there has got to be a better way! ", "abstract": ""}, "answers": [{"id": 34483818, "score": 7, "vote": 0, "content": "One way is to use column_stack: column_stack coerces the lists to arrays first and returns an array. Since a and b are both a list of lists of a single element, each becomes a 2D column vector when coerced to an array. Because of this fact, you could also use hstack or concatenate to achieve the same thing (they also coerce the lists to arrays that have the correct shape for what we want). Use np.hstack((a, b)) or np.concatenate((a, b), axis=1). For completeness, it's also possible to use np.c_ by writing np.c_[a, b]. The other methods are more direct and possibly faster though.", "abstract": ""}, {"id": 34483960, "score": 2, "vote": 0, "content": "A non-numpy solution is  Oops - not quite.  Without the inner brackets, zip does a nice job of regrouping lists: Playing around a bit more, I get I'm also a big fan of list comprehensions. They are a form of looping, but compact and about as fast as possible with plain Python.  Here too I need [0] to pull terms out of the inner lists. itertools.chain is another good tool for flattening nested lists: But since you mention numpy we can use: The basic concatenate works because np.array(a) produces a (5,1) array.  So 2 such arrays can be joined into a (5,2) array without any further shape adjustment. To get back to the nested list format, use tolist on that array. hstack and column_stack also join on the 1 axis, adjusting dimensions if needed.  But I like the explicit control that np.concatenate gives (and requires).", "abstract": ""}]}]