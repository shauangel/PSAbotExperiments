[{"link": "https://stackoverflow.com/questions/3061/calling-a-function-of-a-module-by-using-its-name-a-string", "keywords": [], "tags": ["python", "object", "reflection"], "question": {"id": 3061, "title": "Calling a function of a module by using its name (a string)", "content": "How do I call a function, using a string with the function's name? For example:", "abstract": ""}, "answers": [{"id": 4605, "score": 467, "vote": 0, "content": "Based on Patrick's solution, to get the module dynamically as well, import it using:", "abstract": ""}, {"id": 834451, "score": 756, "vote": 0, "content": "Using locals(), which returns a dictionary with the current local symbol table: Using globals(), which returns a dictionary with the global symbol table:", "abstract": ""}, {"id": 3071, "score": 2864, "vote": 0, "content": "Given a module foo with method bar: getattr can similarly be used on class instance bound methods, module-level methods, class methods... the list goes on.", "abstract": ""}, {"id": 69249811, "score": 11, "vote": 0, "content": "Nobody mentioned operator.attrgetter yet:", "abstract": ""}, {"id": 68283436, "score": 17, "vote": 0, "content": "In python3, you can use the __getattribute__ method. See following example with a list method name string:", "abstract": ""}, {"id": 67982516, "score": 3, "vote": 0, "content": "i'm facing the similar problem before, which is to convert a string to a function. but i can't use eval() or ast.literal_eval(), because i don't want to execute this code immediately. e.g. i have a string \"foo.bar\", and i want to assign it to x as a function name instead of a string, which means i can call the function by x() ON DEMAND. here's my code: as for your question, you only need to add your module name foo and . before {} as follows: WARNING!!! either eval() or exec() is a dangerous method, you should confirm the safety.\nWARNING!!! either eval() or exec() is a dangerous method, you should confirm the safety.\nWARNING!!! either eval() or exec() is a dangerous method, you should confirm the safety.", "abstract": ""}, {"id": 62937980, "score": 17, "vote": 0, "content": "Although getattr() is elegant (and about 7x faster) method, you can get return value from the function (local, class method, module) with eval as elegant as x = eval('foo.bar')(). And when you implement some error handling then quite securely (the same principle can be used for getattr). Example with module import and class: When module or class does not exist (typo or anything better) then NameError is raised. When function does not exist, then AttributeError is raised. This can be used to handle errors:", "abstract": ""}, {"id": 62672406, "score": 8, "vote": 0, "content": "getattr calls method by name from an object.\nBut this object should be parent of calling class.\nThe parent class can be got by super(self.__class__, self)", "abstract": ""}, {"id": 57696855, "score": -16, "vote": 0, "content": "This is a simple answer, this will allow you to clear the screen for example. There are two examples below, with eval and exec, that will print 0 at the top after cleaning (if you're using Windows, change clear to cls, Linux and Mac users leave as is for example) or just execute it, respectively.", "abstract": ""}, {"id": 55363812, "score": 21, "vote": 0, "content": "As this question How to dynamically call methods within a class using method-name assignment to a variable [duplicate] marked as a duplicate as this one, I am posting a related answer here: The scenario is, a method in a class want to call another method on the same class dynamically, I have added some details to original example which offers some wider scenario and clarity: Output (Python 3.7.x) function1: 12  function2: 12", "abstract": ""}, {"id": 41024742, "score": 46, "vote": 0, "content": "Try this. While this still uses eval, it only uses it to summon the function from the current context. Then, you have the real function to use as you wish. The main benefit for me from this is that you will get any eval-related errors at the point of summoning the function. Then you will get only the function-related errors when you call.", "abstract": ""}, {"id": 40219576, "score": 88, "vote": 0, "content": "The best answer according to the Python programming FAQ would be: The primary advantage of this technique is that the strings do not need to match the names of the functions. This is also the primary technique used to emulate a case construct", "abstract": ""}, {"id": 12025554, "score": 163, "vote": 0, "content": "Just a simple contribution. If the class that we need to instance is in the same file, we can use something like this: For example: And, if not a class:", "abstract": ""}, {"id": 22959509, "score": 72, "vote": 0, "content": "The answer (I hope) no one ever wanted Eval like behavior Why not add auto-importing In case we have extra dictionaries we want to check We need to go deeper", "abstract": ""}, {"id": 19393328, "score": 156, "vote": 0, "content": "Given a string, with a complete python path to a function, this is how I went about getting the result of said function:", "abstract": ""}, {"id": 14072943, "score": 18, "vote": 0, "content": "none of what was suggested helped me. I did discover this though. I am using python 2.66  Hope this helps", "abstract": ""}, {"id": 9272378, "score": 43, "vote": 0, "content": "For what it's worth, if you needed to pass the function (or class) name and app name as a string, then you could do this:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/68894606/calling-a-method-based-upon-string-input", "keywords": [], "tags": ["python", "string", "if-statement", "methods", "case"], "question": {"id": 68894606, "title": "Calling a method based upon string input", "content": "I'm coding in Python and have an input as a string that I want to use to decide which method to call. The way I'm implementing it now could get really lengthy, and I was wondering if there was a \"case\" type of command that could make this more streamlined. I thought of perhaps putting a dictionary together of string commands and methods but wasn't sure how to execute that either.", "abstract": ""}, "answers": [{"id": 68894756, "score": 1, "vote": 0, "content": "There is no case (pattern matching) in Python, 3.10 will gain a case statement, but its behaviour will be quite a bit different from what people might be used to from languages like C/C++. That said, your other thought of using dictionaries seems correct to me.  Try something like this: In Python a function is also a object, and can be stored in variables and containers.  So delayed execution is possible by calling it by adding () at a later point.  You will note that I wrapped your multi-line block in a function, unfortunately, there's no on-the-fly way to group multiple statements in Python.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/65915977/java-how-to-select-call-a-function-by-a-strings-content", "keywords": [], "tags": ["java", "reflection"], "question": {"id": 65915977, "title": "Java: How to select/call a function by a strings content?", "content": "I have a list and I have functions. I want to iterate the list and call the function that matches the lists element.\nHow can I do that in a more elegant way than comparing the name in a if or switch?", "abstract": ""}, "answers": [{"id": 65916451, "score": 3, "vote": 0, "content": "Use the Replace Conditional with Polymorphism refactoring along with lambdas/method references. Assuming that your methods don't take parameters and don't return anything, they match the Runnable interface:", "abstract": ""}, {"id": 65916093, "score": 5, "vote": 0, "content": "I strongly advise against to use reflection in such case - it's obviously code smell, it's breaching the security of your code and may cause many, many issues and drawbacks - just think what will happen if someone will put NotSoElegant in the list. Of course there are methods to fetch method by name so basically you could scan the class, get method by string, handle exceptions... Do not do this. Basically there is nothing bad in having such set of ifs however you can refactor this a little bit using switch statement If you want to be more SOLID complain and do not break Open-Closed rule you should rather think about using some design patterns (like Strategy) but do not use reflection :)", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/60930604/calling-a-class-function-using-strings-in-python", "keywords": [], "tags": ["python", "string", "oop"], "question": {"id": 60930604, "title": "Calling a class function using strings in Python", "content": "So basicly I'm trying to call functions within classes using strings. So normally if you create a class, you're able to call the functions as seen below: This works fine ofcourse but I'm working on a bigger code using a lot of strings and I'm trying to call a function within a class using my strings. Say you have a variable with the string \"test1\" and then try to call the function as seen below: This doesn't work because Python doesn't recognize it as an attribute of the class. If I use a normal function that's not within a class, I would be able to call it using a string with the globals() function. But if I try to use the same method to call my function within a class then I get a KeyError. Using the code below: Does anyone have a solution for this? Any help would be greatly appreciated. Thank you in advance!", "abstract": ""}, "answers": [{"id": 60930639, "score": 3, "vote": 0, "content": "Use getattr. Or, use operator.methodcaller.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/60458257/how-do-you-use-a-string-from-a-list-to-call-a-function-with-the-same-name-in-py", "keywords": [], "tags": ["python"], "question": {"id": 60458257, "title": "How do you use a string from a list to call a function with the same name, in Python?", "content": "I wasn't able to find a satisfying answer anywhere so I decided to ask. Let's say we have a global counter and a global list we also we have those functions defined: I have an interface with a button, every time I press it, the global counter increments. Depending on the number, I need to call a different function. I can implement this with if and elif but I don't think it's that smart.\nIs there a way I can call those functions using the list? Example  when counter=0=>list[0]=>the string is 'function1'=> call function1() press button again counter=1=>list[1]=>the string is 'function2' => call function2()", "abstract": ""}, "answers": [{"id": 60459129, "score": 1, "vote": 0, "content": "Similar to what @chepner said, I would approach the problem that way. Potentially storing the functions in a dictionary and looking up the function based on the counter: Then: and now that when function_to_call() is called it would print function 1 called This is how I would think about approaching the problem.", "abstract": ""}, {"id": 60458319, "score": 3, "vote": 0, "content": "You can call a function by its name like this: locals()[\"myfunction\"]() or: globals()[\"myfunction\"]() or if its from another module like this: Or if it suits your use case, just use a list of functions instead of a list of strings:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/58555611/how-to-call-a-string-type-method", "keywords": [], "tags": ["java"], "question": {"id": 58555611, "title": "how to call a string type method?", "content": "how to call this method in the main method?\nI'm not able to call my user-defined method in the main method. How to do it?", "abstract": ""}, "answers": [{"id": 58556779, "score": 1, "vote": 0, "content": "You can simply call the function as you have defined it as static.\nI have passed input values as Null which you can replace as you need. NOTE  : Your method name doesn't follow java coding conventions. You should follow Oracle guidelines around it. https://www.oracle.com/technetwork/java/codeconventions-135099.html", "abstract": ""}, {"id": 58557530, "score": 0, "vote": 0, "content": "Almost there. The convention being method and variable names in java beginning with a small letter.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/42227477/call-a-function-from-a-stored-string-in-python", "keywords": [], "tags": ["python", "python-3.x"], "question": {"id": 42227477, "title": "Call a function from a stored string in Python", "content": "What I need is something that gets the variable and if the variable is the name of a function, the function will be called.\nI am not trying to get a function from a module but from within the program itself Example: I don't want something like this because I have many functions: My question is something like this, but I ask for the Python syntax. I am using Python 3.5.1", "abstract": ""}, "answers": [{"id": 42227653, "score": 9, "vote": 0, "content": "You can do this :", "abstract": ""}, {"id": 42227682, "score": 2, "vote": 0, "content": "This should do it  Now list_of_functions is a list of tuples with the name of each function at position 0 and the function itself at position 1. ", "abstract": ""}, {"id": 42227583, "score": 5, "vote": 0, "content": "It is quite common in Python to use the command pattern. First move all of your functions into a class, and give them names which have a prefix that isn't used in the input. Then use getattr() to find the correct function and call it. This has a couple of advantages over Daniel's call_dict: you don't have to list the name of the functions a second time, and you don't have to list the callable functions a second time either. The 'cmd_' prefix is there to ensure you can have other methods in the class but still control exactly which ones are directly callable.", "abstract": ""}, {"id": 42227516, "score": 19, "vote": 0, "content": "Use a dict mapping names to functions.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/31255560/string-input-to-specify-which-function-to-call-java-best-practice", "keywords": [], "tags": ["java", "string", "function", "user-input"], "question": {"id": 31255560, "title": "String input to specify which function to call [Java] [Best Practice]", "content": "I am writing an application that executes certain functions depending on user input. \nE.g. if the user input were to be \n\"1 2 add\" the output would be \"3\".\nI aim to implement many such methods (div, modulo, etc.). As my Scanner recognizes a function name like \"add\" the function \"add()\" should be called.  My way to do this is to let a FunctionHandler class evaluate the input. Main: Function Handler: As I am adding more and more functions the if statement gets very large, and of course the FunctionHandler class too. Also, whenever I add a new function, I have to change code in two places: I have to define the function, and then add the else if clause in handle() to call the function. Which means two pieces of information that should be encapsulated are \"stored\" completely independent from each other.\nI was wondering what the best practice was to solve this kind of situation?  I was thinking about using enums, but they don't seem to fit well in this case. Another idea I had was creating an interface Function, and then a class for each function that implements Function. The interface would have two methods:\ngetName()\nexecute() Then I could create an array (manually) of Functions in the FunctionHandler, through which I could loop to see if the command the user enters matches getName().\nHowever, having a different class for each function is not very clean either, and it also does not get rid of the problem that for each function I am adding I have to do it in two places: the class and the array. This question is only about finding out how to solve this problem cleanly. A pointer in the right direction would be appreciated! Thanks a lot!", "abstract": ""}, "answers": [{"id": 31256097, "score": 0, "vote": 0, "content": "I would do something like this: You basically can use any functional interface in place of Runnable, I used it, because it matches your add() method. You can map the names of the functions to their actual executable instance, get them by name from the Map and execute them. You could also create an enum with the desired executable blocks:", "abstract": ""}, {"id": 31256089, "score": 2, "vote": 0, "content": "Another option would be to keep a Map of handlers. If you're using Java 8, they can even be method references. One downside to doing it this way is that your input and output types must be the same for all operations.", "abstract": ""}, {"id": 31255956, "score": 1, "vote": 0, "content": "You could create a custom annotation for the various functions. Then you could employ your array idea, but have it use reflection to discover which functions have your new annotation and what their names are. As background, take a look at http://www.oracle.com/technetwork/articles/hunter-meta-2-098036.html and http://www.oracle.com/technetwork/articles/hunter-meta-3-092019.html. They're a bit old, but seem to address the necessary ideas.", "abstract": ""}, {"id": 31255818, "score": 0, "vote": 0, "content": "Assuming you do not have a lot of functions that you want to do this way, and do not want to expose yourself to the security risks caused by reflection, you could use a string switch, like this: Starting Java 7, you can use Strings in a switch statement and the compiler will make something reasonable out of it", "abstract": ""}, {"id": 31255746, "score": 0, "vote": 0, "content": "You can always use reflection if you want a short solution. In your handle method you could do something like this:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/4131864/use-a-string-to-call-function-in-python", "keywords": [], "tags": ["python", "string", "function"], "question": {"id": 4131864, "title": "Use a string to call function in Python", "content": "Some days ago I was searching on the net and I found an interesting article about python dictionaries. It was about using the keys in the dictionary to call a function. In that article the author has defined some functions, and then a dictionary with key exactly same as the function name. Then he could get an input parameter from user and call the same method (something like implementing case break)\nAfter that I realised about the same thing but somehow different. I want to know how I can implement this.\nIf I have a function: And now if I have a string like this: Is there a way to execute this query and get a result: JoeBrand\nFor example something I remember is that we might give a string to exec() statement and it does it for us. But I\u2019m not sure about this special case, and also I do not know the efficient way in Python. And also I will be so grateful to help me how to handle that functions return value, for example in my case how can I print the full name returned by that function?", "abstract": ""}, "answers": [{"id": 16683842, "score": 12, "vote": 0, "content": "I know this question is rather old, but you could do something like this: argsdict is a dictionary of argument, globals calls the function using a string, and ** expands the dictionary to a parameter list. Much cleaner than eval. The only trouble lies in splitting up the string. A (very messy) solution:", "abstract": ""}, {"id": 4131935, "score": 51, "vote": 0, "content": "This does not exactly answer your question, but maybe it helps nevertheless: As mentioned, eval should be avoided if possible. A better way imo is to use dictionary unpacking. This is also very dynamic and less error prone. Example:", "abstract": ""}, {"id": 4131877, "score": 41, "vote": 0, "content": "You could use eval(): Beware though, eval() is considered evil by many people.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/11649848/call-methods-by-string", "keywords": [], "tags": ["python", "python-2.5"], "question": {"id": 11649848, "title": "Call methods by string", "content": "I have the following class. If an instance of this class is created, it iterates over a list of strings and calls methods depending on the actual string. The strings in the list have the names of the  corresponding methods. How can I do this in a more elegant way?\nI don't want to add another elif-path for every \"function\" I add to the list.", "abstract": ""}, "answers": [{"id": 11650914, "score": 1, "vote": 0, "content": "Why don't you use lambdas? Such as say, Output, 9 11 OR, you can do this... Will give you, 9 129", "abstract": ""}, {"id": 11649920, "score": 13, "vote": 0, "content": "For also private functions: . Return the value of the named attribute of object. name must be a string. If the string is the name of one of the object\u2019s attributes, the result is the value of that attribute. For example, getattr(x, 'foobar') is equivalent to x.foobar. If the named attribute does not exist, default is returned if provided, otherwise AttributeError is raised. http://docs.python.org/library/functions.html#getattr", "abstract": ""}, {"id": 11650613, "score": -2, "vote": 0, "content": "You can use eval which make's your program more simple and short.", "abstract": ""}, {"id": 11650545, "score": 2, "vote": 0, "content": "This is usually solved with a dictionary lookup because functions are first-class datatypes in Python. For example:", "abstract": ""}, {"id": 11650347, "score": 0, "vote": 0, "content": "", "abstract": ""}]}]