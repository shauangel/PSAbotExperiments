[
  {
    "link": "https://stackoverflow.com/questions/74662820/raspberry-pi-python-module-global-variables-not-working",
    "keywords": [],
    "tags": [
      "python-3.x",
      "module",
      "raspberry-pi",
      "windows-10",
      "global-variables"
    ],
    "question": {
      "id": 74662820,
      "title": "raspberry pi python module global variables not working",
      "content": "I am finding code that runs differently between python on raspberry pi and windows, that I doubt is due to a minor version difference. When a global variable in module1 is updated during running, then accessed by a function from module2, it does not see the updated value. It sees the value defined at the time of initial import of module1. I find that python 3.9.2 running on a raspberry pi handles module imports of the global variables as constants instead of variables. This is different from python 3.9.7 running in visual studio 2022 on windows 10, which sees the updated value in module2 function access of the module1 var. The scenario is a module with a global variable and has a Setup() function, which modifies the global variable. Pretty sure the raspberry pi python version is not expected behavior. What say y'all? I think this is a bug. I have several systems each in their own modules. As a group, they run on multiple machines on multiple OS's. Each machine has it's own legacy directory structure. Each such system can have several instances, and test vs development vs production instances. I use a function to set the root directories and drive names for each machine and each separate instance. The function updates some of the global vars in the modules, to allow simple development and maintenance of the whole. It's not that this couldn't be done other ways; I presume I'll have to. But nowhere have I seen that python can only pass module vars as constants. It does say \"global vars\"! Anyone else have experience on this? Thanks in advance. I wrote the above code to test. searched for similar issues.",
      "abstract": ""
    },
    "answers": []
  },
  {
    "link": "https://stackoverflow.com/questions/71785266/using-global-variables-when-importing-functions",
    "keywords": [],
    "tags": [
      "python",
      "python-3.x"
    ],
    "question": {
      "id": 71785266,
      "title": "Using global variables when importing functions",
      "content": "The code below works, when I pass in the workbook and dataframe but if it doesn't work if I declare global variables within the import function, getting an error of 'NameError: name 'wb' is not defined.' so I don't believe it's recognising the global variable from the main script. Any ideas of what I'm doing wrong?",
      "abstract": ""
    },
    "answers": [
      {
        "id": 71785774,
        "score": 1,
        "vote": 0,
        "content": "Globals in Python are global to a module, not across all modules. as explained in this answer Visibility of global variables in imported modules So you have to put this code inside your functions in order to work: And in your main module",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/68152369/global-variables-between-modules",
    "keywords": [],
    "tags": [
      "python",
      "python-3.x",
      "global-variables"
    ],
    "question": {
      "id": 68152369,
      "title": "Global variables between modules",
      "content": "I have not been able to find a reason why the matter does not work for me, so I would like to ask a question here. I have 2 files: file2.py: and main.py: And I am getting the error: NameError: name 'justTry' is not defined.\nWhy can't I use the justTry variable, which I declared as a global variable in the step before the listing?",
      "abstract": ""
    },
    "answers": [
      {
        "id": 68153138,
        "score": 3,
        "vote": 0,
        "content": "when \"*importing\" something, it executes the code, and copy's the globals in to your globals. but if globals get alterd later, it won't re-copy the globals. the solution is, to re-import the file after test is called file2.py: main.py:",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/67927657/python-global-variable-in-import",
    "keywords": [],
    "tags": [
      "python",
      "import",
      "global"
    ],
    "question": {
      "id": 67927657,
      "title": "Python global variable in import *",
      "content": "In Python 3.8.10, consider test.py: If I import test.py, no problem: But if I import *, which variables A and B are referred to as global?: Now, if I reimport *, the variables become visible: What is going on? Where do variables A and B 'live'?",
      "abstract": ""
    },
    "answers": []
  },
  {
    "link": "https://stackoverflow.com/questions/67195152/accessing-and-changing-module-level-variable",
    "keywords": [],
    "tags": [
      "python",
      "global"
    ],
    "question": {
      "id": 67195152,
      "title": "accessing and changing module level variable",
      "content": "I am studying python from book from Introduction to Computation and Programming Using Python. Here global variables and modules are explained as below keyword 'global' tells python that name should be defined at the outermost scope of the program rather than within the scope of the function. I have file name circle.py Now at python command line I have following output is 3.14159 output is 12.56636 Now I defined following output is 2 output is 12.56636 I am expecting output to print 8 as i have changed global variable pi to 2. Is my understanding is correct? Please correct me I think I am wrong. Request to help me in understanding the concepts here.",
      "abstract": ""
    },
    "answers": []
  },
  {
    "link": "https://stackoverflow.com/questions/66869073/how-to-pass-around-global-variable-in-python-modules",
    "keywords": [],
    "tags": [
      "python",
      "module",
      "global"
    ],
    "question": {
      "id": 66869073,
      "title": "how to pass around global variable in python modules?",
      "content": "I would like to pass around a global variable in python. I know this is not an advisable method, but this belongs to a bigger application where I need to do this. this is my main.py and this is my allclasses.py see attached picture of the structure... somehow the import main in the allclasses is a problm. i tried from main import * same problem\nI have an import error:\nCannot import name 'Machine' from 'allfiles.subfiles.allclasses  I just need to pass around this global variable from to allclasses (unidirectional so there will be no cyclic problems) the value is set once (from func) and won t be changed anymore\nAm I missing something basic here?",
      "abstract": ""
    },
    "answers": [
      {
        "id": 66869622,
        "score": 0,
        "vote": 0,
        "content": "This still does not solve my problem. the import is done after the definition of the variable. it follows the direction perfectly",
        "abstract": ""
      },
      {
        "id": 66869176,
        "score": -1,
        "vote": 0,
        "content": "You can't import two files to each other, I think you should use a database.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/64834953/python-optimal-way-to-re-assign-global-variables-from-function-in-other-module",
    "keywords": [],
    "tags": [
      "python",
      "import",
      "module",
      "global-variables"
    ],
    "question": {
      "id": 64834953,
      "title": "Python - Optimal way to re-assign global variables from function in other module",
      "content": "I have a module which I called entities.py - there are 2 classes within it and 2 global variables as in below pattern: I also have another module (let's call it main.py for now) where I import both classes and constants as like here: In the same \"main.py\" module I have another constant: THIRD_VAR = ..., and another class, in which all of imported names are being used. Now, I have a function, which is being called only if a certain condition is met (passing config file path as CLI argument in my case). As my best bet, I've written it as following: This works perfectly fine, although PyCharm indicates two issues, which at least I don't consider accurate. from entities import FirstClass, SecondClass, FIRST_VAR, SECOND_VAR - here it warns me that FIRST_VAR and SECOND_VAR are unused imports, but from my understanding and testing they are used and not re-declared elsewhere unless function update_consts_from_config is invoked. Also, under update_consts_from_config function: global FIRST_VAR - at this and next line, it says\nGlobal variable FIRST_VAR is undefined at the module level My question is, should I really care about those warnings and (as I think the code is correct and clear), or am I missing something important and should come up with something different here? I know I can do something as: and work from there, but this look like an overkill for me, entities module has only what I have to import in main.py which also strictly depends on it, therefore I would rather stick to importing those names explicitly than referencing them by entities. just for that reason What do you think would be a best practice here? I would like my code to clear, unambiguous and somehow optimal.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 64836766,
        "score": 3,
        "vote": 0,
        "content": "Import only entities, then refer to variables in its namespace to access/modify them. Note:  this pattern, modifying constants in other modules (which then, to purists, aren't so much constants as globals) can be justified.  I have tons of cases where I use constants, rather than magic variables, as module level configuration.  However, for example for testing, I might reach in and modify these constants.  Say to switch a cache expiry from 2 days to 0.1 seconds to test caching.  Or like you propose, to override configuration.  Tread carefully, but it can be useful. main.py: entities.py: $ python main.py Now, if FIRST_VAR wasn't a string, int or another type of immutable, you should I think be able to import it separately and mutate it.  Like SECOND_VAR.append(\"config override\") in main.py.  But assigning to a global in main.py will only affect affect the main.py binding, so if you want to share actual state between main.py and entities and other modules, everyone, not just main.py needs to import entities then access entities.FIRST_VAR. Oh, and if you had: then its instance-level value of that immutable string/int would not be affected by any overrides done after an instance creation.  Mutables like lists or dictionaries would be affected because they're all different bindings pointing to the same variable. Last, wrt to those \"tricky\" namespaces.  global in your original code means: \"dont consider FIRST_VAR as a variable to assign in update_consts_from_config s local namespace , instead assign it to main.py global, script-level namespace\". It does not mean \"assign it to some global state magically shared between entities.py and main.py\".  __builtins__ might be that beast but modifying it is considered extremely bad form in Python.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/59221031/python-3-and-global-variable-in-module",
    "keywords": [],
    "tags": [
      "python",
      "python-3.x",
      "variables",
      "module",
      "global"
    ],
    "question": {
      "id": 59221031,
      "title": "Python 3 and global variable in module",
      "content": "main1.py module mya.py name 'a' is not defined.\nI don't understand why. I declare variable a as global in module, so from this point a=0 as it is in mail1.py\nupd: I need work globaly. Starting value for variable \"a\" set in main.py, function in module mya.py will edit \"a\", and return new value to main.py for further use.\n--- closed topic---\nNow I use \"arguments\" and \"return\" and in work: mya.py main1.py",
      "abstract": ""
    },
    "answers": [
      {
        "id": 59221129,
        "score": 0,
        "vote": 0,
        "content": "From Visibility of global variables in imported modules: Globals in Python are global to a module, not across all modules. (Many people are confused by this, because in, say, C, a global is the same across all implementation files unless you explicitly make it static.)  One approach to deal with it is:",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/1977362/how-to-create-module-wide-variables-in-python",
    "keywords": [],
    "tags": [
      "python",
      "variables",
      "singleton",
      "module",
      "scope"
    ],
    "question": {
      "id": 1977362,
      "title": "How to create module-wide variables in Python?",
      "content": "Is there a way to set up a global variable inside of a module? When I tried to do it the most obvious way as appears below, the Python interpreter said the variable __DBNAME__ did not exist. And after importing the module in a different file And the traceback was: ...\n  UnboundLocalError: local variable 'DBNAME' referenced before assignment\n  ... Any ideas? I'm trying to set up a singleton by using a module, as per this fellow's recommendation.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 35904211,
        "score": 127,
        "vote": 0,
        "content": "Explicit access to module level variables by accessing them explicity on the module In short: The technique described here is the same as in steveha's answer, except, that no artificial helper object is created to explicitly scope variables. Instead the module object itself is given a variable pointer, and therefore provides explicit scoping upon access from everywhere. (like assignments in local function scope). Think of it like self for the current module instead of the current instance ! As modules are cached and therefore import only once, you can import db.py as often on as many clients as you want, manipulating the same, universal state: As an additional bonus I find it quite pythonic overall as it nicely fits Pythons policy of Explicit is better than implicit.",
        "abstract": ""
      },
      {
        "id": 34168541,
        "score": 36,
        "vote": 0,
        "content": "Steveha's answer was helpful to me, but omits an important point (one that I think wisty was getting at). The global keyword is not necessary if you only access but do not assign the variable in the function. If you assign the variable without the global keyword then Python creates a new local var -- the module variable's value will now be hidden inside the function.  Use the global keyword to assign the module var inside a function. Pylint 1.3.1 under Python 2.7 enforces NOT using global if you don't assign the var.",
        "abstract": ""
      },
      {
        "id": 1978217,
        "score": -12,
        "vote": 0,
        "content": "You are falling for a subtle quirk. You cannot re-assign module-level variables inside a python function. I think this is there to stop people re-assigning stuff inside a function by accident.  You can access the module namespace, you just shouldn't try to re-assign. If your function assigns something, it automatically becomes a function variable - and python won't look in the module namespace. You can do: but you cannot re-assign __DB_NAME__ inside a function.  One workaround: Note, I'm not re-assigning __DB_NAME__, I'm just modifying its contents.",
        "abstract": ""
      },
      {
        "id": 1978076,
        "score": 314,
        "vote": 0,
        "content": "Here is what is going on. First, the only global variables Python really has are module-scoped variables.  You cannot make a variable that is truly global; all you can do is make a variable in a particular scope.  (If you make a variable inside the Python interpreter, and then import other modules, your variable is in the outermost scope and thus global within your Python session.) All you have to do to make a module-global variable is just assign to a name. Imagine a file called foo.py, containing this single line: Now imagine you import it. However, let's suppose you want to use one of your module-scope variables as a global inside a function, as in your example.  Python's default is to assume that function variables are local.  You simply add a global declaration in your function, before you try to use the global. By the way, for this example, the simple if not __DBNAME__ test is adequate, because any string value other than an empty string will evaluate true, so any actual database name will evaluate true.  But for variables that might contain a number value that might be 0, you can't just say if not variablename; in that case, you should explicitly test for None using the is operator.  I modified the example to add an explicit None test.  The explicit test for None is never wrong, so I default to using it. Finally, as others have noted on this page, two leading underscores signals to Python that you want the variable to be \"private\" to the module.  If you ever do an import * from mymodule, Python will not import names with two leading underscores into your name space.  But if you just do a simple import mymodule and then say dir(mymodule) you will see the \"private\" variables in the list, and if you explicitly refer to mymodule.__DBNAME__ Python won't care, it will just let you refer to it.  The double leading underscores are a major clue to users of your module that you don't want them rebinding that name to some value of their own. It is considered best practice in Python not to do import *, but to minimize the coupling and maximize explicitness by either using mymodule.something or by explicitly doing an import like from mymodule import something. EDIT: If, for some reason, you need to do something like this in a very old version of Python that doesn't have the global keyword, there is an easy workaround.  Instead of setting a module global variable directly, use a mutable type at the module global level, and store your values inside it. In your functions, the global variable name will be read-only; you won't be able to rebind the actual global variable name.  (If you assign to that variable name inside your function it will only affect the local variable name inside the function.)  But you can use that local variable name to access the actual global object, and store data inside it. You can use a list but your code will be ugly: A dict is better.  But the most convenient is a class instance, and you can just use a trivial class: (You don't really need to capitalize the database name variable.) I like the syntactic sugar of just using __m.dbname rather than __m[\"DBNAME\"]; it seems the most convenient solution in my opinion.  But the dict solution works fine also. With a dict you can use any hashable value as a key, but when you are happy with names that are valid identifiers, you can use a trivial class like Box in the above.",
        "abstract": ""
      },
      {
        "id": 1977383,
        "score": 8,
        "vote": 0,
        "content": "For this, you need to declare the variable as global. However, a global variable is also accessible from outside the module by using module_name.var_name. Add this as the first line of your module:",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/48869966/how-to-use-global-variables-within-python-package",
    "keywords": [],
    "tags": [
      "python",
      "global-variables",
      "package"
    ],
    "question": {
      "id": 48869966,
      "title": "How to use global variables within python package",
      "content": "I have several python functions that I am trying to create into a package. Each function exists in its own python file, and uses global variables to return some objects back to the global environment , some of which get used by the other python functions.  When these functions are standalone functions that have been defined in the python console, they work just fine, but when I put them all together into a python package, the global variables are not being returned as a global variable any longer.  Why do functions that are defined with a package file not return global variables / how can I bypass this? A very simple example: python_function1.py python_function2.py",
      "abstract": ""
    },
    "answers": [
      {
        "id": 48870337,
        "score": 5,
        "vote": 0,
        "content": "As per documentation states: The canonical way to share information across modules within a single\n  program is to create a special module (often called config or cfg).\n  Just import the config module in all modules of your application; \n  the module then becomes available as a global name. \n  Because there is only one instance of each module, any changes made to the \n  module object get reflected everywhere. You can check this documentation for example code: https://docs.python.org/3/faq/programming.html#how-do-i-share-global-variables-across-modules",
        "abstract": ""
      }
    ]
  }
]