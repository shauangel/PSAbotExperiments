[{"link": "https://stackoverflow.com/questions/1708510/list-vs-tuple-when-to-use-each", "keywords": [], "tags": ["python", "list", "types", "tuples"], "question": {"id": 1708510, "title": "List vs tuple, when to use each?", "content": "In Python, when should you use lists and when tuples? Sometimes you don't have a choice, for example if you have then x must be a tuple. But if I am the one who designs the API and gets to choose the data types, then what are the guidelines?", "abstract": ""}, "answers": [{"id": 1708538, "score": 849, "vote": 0, "content": "Tuples are fixed size in nature whereas lists are dynamic.\nIn other words, a tuple is immutable whereas a list is mutable. Tuples are faster than lists. If you're defining a constant set of values and all you're ever going to do with it is iterate through it, use a tuple instead of a list. It makes your code safer if you \u201cwrite-protect\u201d data that does not need to be changed. Using a tuple instead of a list is like having an implied assert statement that this data is constant, and that special thought (and a specific function) is required to override that. Some tuples can be used as dictionary keys (specifically, tuples that contain immutable values like strings, numbers, and other tuples). Lists can never be used as dictionary keys, because lists are mutable. Source: Dive into Python 3", "abstract": ""}, {"id": 1708610, "score": 267, "vote": 0, "content": "There's a strong culture of tuples being for heterogeneous collections, similar to what you'd use structs for in C, and lists being for homogeneous collections, similar to what you'd use arrays for.  But I've never quite squared this with the mutability issue mentioned in the other answers.  Mutability has teeth to it (you actually can't change a tuple), while homogeneity is not enforced, and so seems to be a much less interesting distinction.", "abstract": ""}, {"id": 23573932, "score": 4, "vote": 0, "content": "A minor but notable advantage of a list over a tuple is that lists tend to be slightly more portable.  Standard tools are less likely to support tuples.  JSON, for example, does not have a tuple type.  YAML does, but its syntax is ugly compared to its list syntax, which is quite nice.   In those cases, you may wish to use a tuple internally then convert to list as part of an export process.  Alternately, you might want to use lists everywhere for consistency.", "abstract": ""}, {"id": 1708702, "score": 19, "vote": 0, "content": "The first thing you need to decide is whether the data structure needs to be mutable or not. As has been mentioned, lists are mutable, tuples are not. This also means that tuples can be used for dictionary keys, wheres lists cannot. In my experience, tuples are generally used where order and position is meaningful and consistant. For example, in creating a data structure for a choose your own adventure game, I chose to use tuples instead of lists because the position in the tuple was meaningful. Here is one example from that data structure: The first position in the tuple is the choice displayed to the user when they play the game and the second position is the key of the page that choice goes to and this is consistent for all pages. Tuples are also more memory efficient than lists, though I'm not sure when that benefit becomes apparent. Also check out the chapters on lists and tuples in Think Python.", "abstract": ""}, {"id": 1708935, "score": 11, "vote": 0, "content": "But if I am the one who designs the API and gets to choose the data types, then what are the guidelines? For input parameters it's best to accept the most generic interface that does what you need. It is seldom just a tuple or list - more often it's sequence, sliceable or even iterable. Python's duck typing usually gets it for free, unless you explicitly check input types. Don't do that unless absolutely unavoidable. For the data that you produce (output parameters) just return what's most convenient for you, e.g. return whatever datatype you keep or whatever your helper function returns.  One thing to keep in mind is to avoid returning a list (or any other mutable) that's part of your state, e.g.", "abstract": ""}, {"id": 1708537, "score": 89, "vote": 0, "content": "I believe (and I am hardly well-versed in Python) that the main difference is that a tuple is immutable (it can't be changed in place after assignment) and a list is mutable (you can append, change, subtract, etc). So, I tend to make my tuples things that shouldn't change after assignment and my lists things that can.", "abstract": ""}, {"id": 1708603, "score": 53, "vote": 0, "content": "Must it be mutable?  Use a list.\nMust it not be mutable?  Use a tuple. Otherwise, it's a question of choice. For collections of heterogeneous objects (like a address broken into name, street, city, state and zip) I prefer to use a tuple.  They can always be easily promoted to named tuples. Likewise, if the collection is going to be iterated over, I prefer a list.  If it's just a container to hold multiple objects as one, I prefer a tuple.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/16296643/convert-tuple-to-list-and-back", "keywords": [], "tags": ["python", "list", "tuples"], "question": {"id": 16296643, "title": "Convert tuple to list and back", "content": "I'm currently working on a map editor for a game in pygame, using tile maps.\nThe level is built up out of blocks in the following structure (though much larger): where \"1\" is a block that's a wall and \"0\" is a block that's empty air. The following code is basically the one handling the change of block type: But since the level is stored in a tuple, I'm unable to change the values of the different blocks. How do I go about changing the different values in the level in an easy manner?", "abstract": ""}, "answers": [{"id": 74207660, "score": 0, "vote": 0, "content": "In my case, I wanted to merge rows/ lists:", "abstract": ""}, {"id": 66065962, "score": 2, "vote": 0, "content": "Just using the command list did not work for me. if you have a tuple just iterate until you have the elements there are necessary and after that append to a list. And if you go to the element level you can change it easily. input: output:", "abstract": ""}, {"id": 63192001, "score": 23, "vote": 0, "content": "Since Python 3.5 (PEP 448 -- Additional Unpacking Generalizations) one can use the following literal syntax to convert a tuple to a list: A list comprehension can be use to convert a tuple of tuples to a list of lists:", "abstract": ""}, {"id": 53889456, "score": 5, "vote": 0, "content": "List to Tuple and back can be done as below", "abstract": ""}, {"id": 30949608, "score": 20, "vote": 0, "content": "To convert tuples to list  (Commas were missing between the tuples in the given question, it was added to prevent error message) Method 1:  Method 2: Method 1 took --- 0.0019991397857666016 seconds --- Method 2 took --- 0.0010001659393310547 seconds ---", "abstract": ""}, {"id": 30549155, "score": 16, "vote": 0, "content": "Why don't you try converting its type from a tuple to a list and vice versa.", "abstract": ""}, {"id": 16296703, "score": 89, "vote": 0, "content": "You have a tuple of tuples.\nTo convert every tuple to a list: --- OR --- And after you are done editing, just convert them back: --- OR --- (Thanks @jamylak) You can also use a numpy array: For manipulating:", "abstract": ""}, {"id": 23497549, "score": 368, "vote": 0, "content": "Convert tuple to list: Convert list to tuple:", "abstract": ""}, {"id": 16296969, "score": 5, "vote": 0, "content": "Both the answers are good, but a little advice: Tuples are immutable, which implies that they cannot be changed. So if you need to manipulate data, it is better to store data in a list, it will reduce unnecessary overhead. In your case extract the data to a list, as shown by eumiro, and after modifying create a similar tuple of similar structure as answer given by Schoolboy. Also as suggested using numpy array is a better option", "abstract": ""}, {"id": 16297196, "score": 2, "vote": 0, "content": "You could dramatically speed up your stuff if you used just one list instead of a list of lists.  This is possible of course only if all your inner lists are of the same size (which is true in your example, so I just assume this). And you could be even faster if you used a bitfield instead of a list: with But that's working only if your fields just contain 0 or 1 of course.  If you need more values, you'd have to combine several bits which would make the issue much more complicated.", "abstract": ""}, {"id": 16296668, "score": 27, "vote": 0, "content": "You can have a list of lists. Convert your tuple of tuples to a list of lists using: or and modify them accordingly. But a numpy array is cooler.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/71969368/python-list-of-tuples", "keywords": [], "tags": ["python", "list", "tuples", "dataset", "analytics"], "question": {"id": 71969368, "title": "Python: List of tuples", "content": "Please, if I have a list of tuples, say: list = [('James', 27, 2000), ('Aaron', 24, 1290), ('Max', 23, 2300), ('Ben', 27, 1900)] How do I get all the names in ascending order? How do I get a list that shows the tuples in ascending order of names? Thanks", "abstract": ""}, "answers": [{"id": 71969552, "score": 0, "vote": 0, "content": "You can use key parameter in sort or sorted function. Here's an example: And the result will be: You can use list comprehension to extract names from sorted list:", "abstract": ""}, {"id": 71969470, "score": 0, "vote": 0, "content": "Be advised that list is an object in Python, so when you create a variable with the name list, you overwrite that reference and you cannot use list(something) after in your program.", "abstract": ""}, {"id": 71969465, "score": 0, "vote": 0, "content": "Output: Output:", "abstract": ""}, {"id": 71969456, "score": 0, "vote": 0, "content": "Prints", "abstract": ""}, {"id": 71969441, "score": 0, "vote": 0, "content": "Assuming by ascending you mean alphabetical?\nYou can do it with sorted: Output:", "abstract": ""}, {"id": 71969440, "score": 0, "vote": 0, "content": "If you sort a list of tuples, by default the first item in the tuple is taken as the key. Therefore: Output: Or, if you want the tuples then: ...which produces:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/3121979/how-to-sort-a-list-tuple-of-lists-tuples-by-the-element-at-a-given-index", "keywords": [], "tags": ["python", "list", "sorting", "tuples"], "question": {"id": 3121979, "title": "How to sort a list/tuple of lists/tuples by the element at a given index?", "content": "I have some data either in a list of lists or a list of tuples, like this: And I want to sort by the 2nd element in the subset. Meaning, sorting by 2,5,8 where 2 is from (1,2,3), 5 is from (4,5,6). What is the common way to do this? Should I store tuples or lists in my list?", "abstract": ""}, "answers": [{"id": 3121985, "score": 1466, "vote": 0, "content": "or: The default sort mode is ascending. To sort in descending order use the option reverse=True: or:", "abstract": ""}, {"id": 66538998, "score": 1, "vote": 0, "content": "I use this in my code: Depending on which element you want to sort it by you can put it in the", "abstract": ""}, {"id": 38304923, "score": 16, "vote": 0, "content": "Without lambda:", "abstract": ""}, {"id": 44187425, "score": 7, "vote": 0, "content": "@Stephen 's answer is to the point! Here is an example for better visualization, Shout out for the Ready Player One fans! =) key is a function that will be called to transform the collection's items for comparison.. like compareTo method in Java.  The parameter passed to key must be something that is callable. Here, the use of lambda creates an anonymous function (which is a callable).\nThe syntax of lambda is the word lambda followed by a iterable name then a single block of code.  Below example, we are sorting a list of tuple that holds the info abt time of certain event and actor name.  We are sorting this list by time of event occurrence - which is the 0th element of a tuple. Note - s.sort([cmp[, key[, reverse]]])  sorts the items of s in place", "abstract": ""}, {"id": 27001786, "score": 67, "vote": 0, "content": "I just want to add to Stephen's answer if you want to sort the array from high to low, another way other than in the comments above is just to add this to the line:  and the result will be as follows:", "abstract": ""}, {"id": 42241229, "score": 29, "vote": 0, "content": "In order to sort a list of tuples (<word>, <count>), for count in descending order and word in alphabetical order: I use this method: and it gives me the result:", "abstract": ""}, {"id": 39716417, "score": 11, "vote": 0, "content": "itemgetter() is somewhat faster than lambda tup: tup[1], but the increase is relatively modest (around 10 to 25 percent). (IPython session)", "abstract": ""}, {"id": 34375589, "score": 88, "vote": 0, "content": "For sorting by multiple criteria, namely for instance by the second and third elements in a tuple, let and so define a lambda that returns a tuple that describes priority, for instance", "abstract": ""}, {"id": 22162201, "score": -4, "vote": 0, "content": "Sorting a tuple is quite simple:", "abstract": ""}, {"id": 3122110, "score": 30, "vote": 0, "content": "Stephen's answer is the one I'd use.  For completeness, here's the DSU (decorate-sort-undecorate) pattern with list comprehensions: Or, more tersely: As noted in the Python Sorting HowTo, this has been unnecessary since Python 2.4, when key functions became available.", "abstract": ""}, {"id": 19901707, "score": 302, "vote": 0, "content": "", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/69764523/how-to-get-the-names-from-a-tuple-list", "keywords": [], "tags": ["python", "django", "tuples"], "question": {"id": 69764523, "title": "How to get the names from a tuple list", "content": "I currently have a list of Names in a tuple list and when they are displayed on my form, they are displayed like so: Which is exactly how they are shown in the code. How would I get them to display like so: My code currently looks like so Views.py template.html", "abstract": ""}, "answers": [{"id": 69765420, "score": 1, "vote": 0, "content": "Suppose your list looks like this: It is a list of tuples. You can access the value of tuple by first looping inside the list and then printing the index of the 1st element of that list (i.e., tuple):", "abstract": ""}, {"id": 69764617, "score": 1, "vote": 0, "content": "", "abstract": ""}, {"id": 69764594, "score": 1, "vote": 0, "content": "You can get the values by index:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/66073930/python-tuple-inside-list", "keywords": [], "tags": ["python", "list", "tuples"], "question": {"id": 66073930, "title": "Python tuple inside list", "content": "I have a data structure like below, How do I append new values based on the name. Like, if input name is Sam and amount is 200. if Sam already existed, it should append to Sam's list otherwise it should create a new element in the list.", "abstract": ""}, "answers": [{"id": 66074102, "score": 1, "vote": 0, "content": "As a basic rule, tuples are non-mutable. So you cannot change a tuple. However, you can replace a tuple with another tuple inside a list. That's how we are going to solve your problem. Here's the code to do this. The output is as follows:\nExample with a name that exists in the list: Another example with a name that does not exist in the list: If you are interested in an alternate approach, you can convert the list of tuples into a dictionary. Then insert the data into a dictionary, and convert it back to a list of tuple. Same results as above.", "abstract": ""}, {"id": 66074106, "score": 1, "vote": 0, "content": "While simple iteration can solve the problem. But if you are curious and speed is a crucial thing and moreover can't use dict then you can look up how dict or hash map work. You can implement the same. Here I am giving one example, but it does not balance itself, meaning that if the data structure is full, you need to expand the list index to suppose 2 times. But it represents the underlining idea.", "abstract": ""}, {"id": 66073986, "score": 1, "vote": 0, "content": "Dictionary is much better for your purpose. If you insist on using the existing list of tuples, then iterate on all items and read the name at zero index of tuple and proceed accordingly. Ugly and inefficient.", "abstract": ""}, {"id": 66073970, "score": 1, "vote": 0, "content": "To start with a python dictionary would be much more fitting for what you are trying to do. But I am guessing you either have a reason you can't use that or you want to learn how to iterate through a list. Here is the example code: I commented each line so you know what it does as well as give the outputs to the prints. Without using a dict you have to iterate through the entire list by hand. Please let me know if this helps or if you have any questions!", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/65920260/whats-the-difference-between-a-tuple-and-list-in-the-python-which-one-is-more-e", "keywords": [], "tags": ["python", "django", "list", "tuples", "data-science"], "question": {"id": 65920260, "title": "What&#39;s the difference between a tuple and list in the python which one is more efficient", "content": "In my one of the interview the interview ask me about the tuple and the list in python. And ask which is more efficient in case of finding a element on both .", "abstract": ""}, "answers": [{"id": 65920300, "score": 1, "vote": 0, "content": "The major difference between tuples and lists is that a list is mutable, whereas a tuple is immutable. This means that a list can be changed, but a tuple cannot.The contents in a list can be modified, edited or deleted  while the contents in a tuple are fixed and cannot be modified, edited or deleted.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/64985519/is-order-maintained-when-going-from-tuple-to-list-in-python", "keywords": [], "tags": ["python", "python-3.x", "list"], "question": {"id": 64985519, "title": "Is order maintained when going from tuple to list in python?", "content": "I'm pretty sure this is the case but I couldn't find any documentation about it: If I have a tuple my_tuple and create a list from it my_list = list(my_tuple) can I be sure that the order is preserved?", "abstract": ""}, "answers": [{"id": 64985754, "score": 1, "vote": 0, "content": "Yes, list is populated in the order that the iterable provides, this is clearly documented: The constructor builds a list whose items are the same and in the same\norder as iterable\u2019s items. And tuple object are ordered.", "abstract": ""}, {"id": 64985720, "score": 0, "vote": 0, "content": "A tuple is a collection of objects which are ordered and immutable. Tuples are sequences, just like lists. The differences between tuples and lists are, the tuples cannot be changed unlike lists and tuples use parentheses, whereas lists use square brackets. So the data copied between the list and tuple will always maintain the same order. Documentation for python tuple can be found at below link, https://www.tutorialspoint.com/python/python_tuples.htm", "abstract": ""}, {"id": 64985711, "score": 1, "vote": 0, "content": "Yes. The list constructor iterates over its argument in order. So a = list(b) is equivalent to: ... and iterating over a tuple yields each of its elements in order. So order is preserved.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/44751916/python-change-tuple-in-a-list-of-tuples", "keywords": [], "tags": ["python", "list", "tuples"], "question": {"id": 44751916, "title": "Python: Change tuple in a list of tuples", "content": "I am trying to replace a value in a tuple in a list of tuples. This code currently is not working. Can someone help?\nthe current output shows Expected output is:", "abstract": ""}, "answers": [{"id": 44752084, "score": 0, "vote": 0, "content": "Lists are useful data structures when you want to work with modifiable elements. Tuples are immutable. Current code might be inefficient for large amounts of data as you constantly convert a tuple into a list, modify an element and back into tuples. The following code does the same but works with lists. ", "abstract": ""}, {"id": 44751953, "score": 5, "vote": 0, "content": "I think assigning the updated tuple to the corresponding index in the list will solve the issue since tuples are immutable. To keep the corresponding index enumerate can be used while iterating through the list. You can try following: Output:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/31175223/append-a-tuple-to-a-list-whats-the-difference-between-two-ways", "keywords": [], "tags": ["python", "list", "types", "append", "tuples"], "question": {"id": 31175223, "title": "Append a tuple to a list - what&#39;s the difference between two ways?", "content": "I wrote my first \"Hello World\" 4 months ago. Since then, I have been following a Coursera Python course provided by Rice University. I recently worked on a mini-project involving tuples and lists. There is something strange about adding a tuple into a list for me: It's quite confusing for me. Why specifying the tuple to be appended by using \"tuple(...)\" instead of simple \"(...)\" will cause a ValueError? BTW: I used CodeSkulptor coding tool used in the course", "abstract": ""}, "answers": [{"id": 31175274, "score": 2, "vote": 0, "content": "I believe tuple() takes a list as an argument\nFor example, see what happens if you wrap your array with brackets", "abstract": ""}, {"id": 31175271, "score": 24, "vote": 0, "content": "Because tuple(3, 4) is not the correct syntax to create a tuple. The correct syntax is -  or  You can see it from here - https://docs.python.org/2/library/functions.html#tuple", "abstract": ""}, {"id": 31175266, "score": 2, "vote": 0, "content": "It has nothing to do with append.  tuple(3, 4) all by itself raises that error. The reason is that, as the error message says, tuple expects an iterable argument.  You can make a tuple of the contents of a single object by passing that single object to tuple.  You can't make a tuple of two things by passing them as separate arguments. Just do (3, 4) to make a tuple, as in your first example.  There's no reason not to use that simple syntax for writing a tuple.", "abstract": ""}, {"id": 31175264, "score": 87, "vote": 0, "content": "The tuple function takes only one argument which has to be an iterable tuple([iterable]) Return a tuple whose items are the same and in the same order as iterable\u2018s items. Try making 3,4 an iterable by either using [3,4] (a list) or (3,4) (a tuple) For example will work", "abstract": ""}, {"id": 31175263, "score": 1, "vote": 0, "content": "There should be no difference, but your tuple method is wrong, try:", "abstract": ""}]}]