[{"link": "https://stackoverflow.com/questions/6618515/sorting-list-according-to-corresponding-values-from-a-parallel-list", "keywords": [], "tags": ["python", "list", "sorting"], "question": {"id": 6618515, "title": "Sorting list according to corresponding values from a parallel list", "content": "I have a list of strings like this: What is the shortest way of sorting X using values from Y to get the following output? The order of the elements having the same \"key\" does not matter. I can resort to the use of for constructs but I am curious if there is a shorter way. Any suggestions?", "abstract": ""}, "answers": [{"id": 74631231, "score": -2, "vote": 0, "content": "I think that the title of the original question is not accurate. If you have 2 lists of identical number of items and where every item in list 1 is related to list 2 in the same order (e.g a = 0 , b = 1, etc.) then the question should be 'How to sort a dictionary?', not 'How to sorting list based on values from another list?'. The solution below is the most efficient in this case: Result:", "abstract": ""}, {"id": 74556316, "score": 1, "vote": 0, "content": "I think most of the solutions above will not work if the 2 lists are of different sizes or contain different items. The solution below is simple and should fix those issues: output:", "abstract": ""}, {"id": 74557324, "score": 3, "vote": 0, "content": "Most of the solutions above are complicated and I think they will not work if the lists are of different lengths or do not contain the exact same items. The solution below is simple and does not require any imports. Output:", "abstract": ""}, {"id": 71997103, "score": 1, "vote": 0, "content": "This function should work for arrays.", "abstract": ""}, {"id": 67025986, "score": 2, "vote": 0, "content": "You can do so in one line:", "abstract": ""}, {"id": 6618543, "score": 827, "vote": 0, "content": "Shortest Code Example: Generally Speaking Explained: For more information on how to set\\use the key parameter as well as the sorted function in general, take a look at this.", "abstract": ""}, {"id": 6618548, "score": 49, "vote": 0, "content": "The most obvious solution to me is to use the key keyword arg. Note that you can shorten this to a one-liner if you care to: As Wenmin Mu and Jack Peng have pointed out, this assumes that the values in X are all distinct. That's easily managed with an index list: Since the decorate-sort-undecorate approach described by Whatang is a little simpler and works in all cases, it's probably better most of the time. (This is a very old answer!)", "abstract": ""}, {"id": 61824097, "score": 5, "vote": 0, "content": "This is an old question but some of the answers I see posted don't actually work because zip is not scriptable. Other answers didn't bother to import operator and provide more info about this module and its benefits here. There are at least two good idioms for this problem. Starting with the example input you provided: This is also known as the Schwartzian_transform after R. Schwartz who popularized this pattern in Perl in the 90s: Note that in this case Y and X are sorted and compared lexicographically. That is, the first items (from Y) are compared; and if they are the same then the second items (from X) are compared, and so on. This can create unstable outputs unless you include the original list indices for the lexicographic ordering to keep duplicates in their original order. This gives you more direct control over how to sort the input, so you can get sorting stability by simply stating the specific key to sort by. See more examples here.", "abstract": ""}, {"id": 45514542, "score": 38, "vote": 0, "content": "more_itertools has a tool for sorting iterables in parallel: Given Demo", "abstract": ""}, {"id": 29066554, "score": 16, "vote": 0, "content": "I like having a list of sorted indices. That way, I can sort any list in the same order as the source list. Once you have a list of sorted indices, a simple list comprehension will do the trick: Note that the sorted index list can also be gotten using numpy.argsort().", "abstract": ""}, {"id": 51903823, "score": 27, "vote": 0, "content": "I actually came here looking to sort a list by a list where the values matched.", "abstract": ""}, {"id": 48820358, "score": 0, "vote": 0, "content": "To get unique values present in list2 To find the loc of the index in list2  Location of index in list2 is tracked using cur_loclist [0, 3, 7, 1, 2, 4, 8, 5, 6]", "abstract": ""}, {"id": 19382336, "score": 17, "vote": 0, "content": "Another alternative, combining several of the answers. In order to work for python3:", "abstract": ""}, {"id": 49494834, "score": 2, "vote": 0, "content": "I have created a more general function, that sorts more than two lists based on another one, inspired by @Whatang's answer.", "abstract": ""}, {"id": 49072756, "score": 2, "vote": 0, "content": "Here is Whatangs answer if you want to get both sorted lists (python3). Just remember Zx and Zy are tuples.\nI am also wandering if there is a better way to do that. Warning: If you run it with empty lists it crashes.", "abstract": ""}, {"id": 48176435, "score": 2, "vote": 0, "content": "A quick one-liner. Say you want list a to match list b. This is helpful when needing to order a smaller list to values in larger. Assuming that the larger list contains all values in the smaller list, it can be done.", "abstract": ""}, {"id": 48142660, "score": 2, "vote": 0, "content": "You can create a pandas Series, using the primary list as data and the other list as index, and then just sort by the index: output:", "abstract": ""}, {"id": 21077060, "score": 131, "vote": 0, "content": "Also, if you don't mind using numpy arrays (or in fact already are dealing with numpy arrays...), here is another nice solution: I found it here:\nhttp://scienceoss.com/sort-one-list-by-another-list/", "abstract": ""}, {"id": 6620187, "score": 8, "vote": 0, "content": "zip, sort by the second column, return the first column.", "abstract": ""}, {"id": 6618553, "score": 146, "vote": 0, "content": "Zip the two lists together, sort it, then take the parts you want: Combine these together to get:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/71773352/how-can-i-sort-a-list-based-on-another-list", "keywords": [], "tags": ["python", "list", "loops", "sorting"], "question": {"id": 71773352, "title": "How can I sort a list based on another list?", "content": "Say I have two lists: test  (1st one which will be the sorted one), and sort (which is the sorting index of the other list): How can I sort test based on the matrix position? This would be my desired solution: Edit: I see there are many alike questions like mine, I tried a solution from Sorting list based on values from another list, which is the following: As it can be seen, this is not equal to my desired output as 20 should be on the first place.", "abstract": ""}, "answers": [{"id": 71773459, "score": 1, "vote": 0, "content": "You can do this with list comprehension or looping over the matrix element to check each iteration if it belongs in the test array. Example using list comprehension: Example with normal append: Edit: updated the for loop to append everything not in test to another array. When the result array extend() that one, they would be combined. If this is what you're looking for, the list comprehension example here will not give the expected result.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/67826601/how-to-sort-one-list-and-re-sort-another-list-keeping-same-relation-python", "keywords": [], "tags": ["python", "sorting"], "question": {"id": 67826601, "title": "How to sort one list and re-sort another list keeping same relation python?", "content": "I have a list1 of items: that I want to sort A corresponding list2 of values for these items is: [10, 11, 8, 5] How do I sort list1: [2 8 9 10]\nand maintain the same relationship to the other list so that the other list will reoorder\n[5, 11, 10, 8] There was a similar question here: Python sort one list from another list\nbut it's when we're given an ordering.", "abstract": ""}, "answers": [{"id": 67826705, "score": 5, "vote": 0, "content": "You could use this: or this: The first one makes a new list that has matching pairs from list1 and list2, then sorts the pairs, which will mainly focus on the values that came from list1, and use the list2 value as a tiebreaker. Then zip(*new_list) is a standard Python trick for splitting the pairs back into separate lists. It combines all the pairs together to make a new list with two long rows, one with the first item from each pair and one with the second item. Then assigning that list to two variables splits it into two lists. The second one creates indexes for the items in both lists, then sorts the indexes using the corresponding item from list1 as a key. Then it retrieved the items from each list using the new ordering. Or this hybrid may be more readable:", "abstract": ""}, {"id": 67826855, "score": 1, "vote": 0, "content": "An approach that would work with even operations other than sort, if the list elements are unique: Code: Output:", "abstract": ""}, {"id": 67826669, "score": 5, "vote": 0, "content": "One option is to zip the two lists together, sort them by the first item in each tuple of the zipped list, and then grab the second item from that sorted list. If you need both lists as the output, then this answer does just that in the same clean fashion as this one.", "abstract": ""}, {"id": 67826688, "score": 1, "vote": 0, "content": "", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/67792194/how-to-filter-and-sort-a-list-using-another-list-in-kotlin", "keywords": [], "tags": ["kotlin"], "question": {"id": 67792194, "title": "How to filter and sort a List using another List in kotlin", "content": "My code say list1 is of Type1 and list2 is of Type2 Type1 is a data class that contains id,name,type,duration Type2 is a data class that contains only id and position both contain ids that match but only list 2 contains the positions so I create an empty list Here I am trying is to make the filteredList a list of Type1 that has only the\nitems from list1 that are present in list2 with matching the ids. I am stuck\nafter this step. how do I sort the filteredList with the position values present in list2 ?", "abstract": ""}, "answers": [{"id": 67792942, "score": 2, "vote": 0, "content": "As far as I understood, you need filter out all items of list1 with ids absent in list2 and sort them based on some property of list2 object.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/67544062/c-sort-list-according-to-another-list-values", "keywords": [], "tags": ["c#", "list", "sorting"], "question": {"id": 67544062, "title": "C# Sort List according to another List values", "content": "I need to sort one list (string) according to another list values (int) from the smallest to the highest int.\nPossibility to have several times the same string. For example: output: This line should probably work but I still miss something:", "abstract": ""}, "answers": []}, {"link": "https://stackoverflow.com/questions/64269092/how-to-sort-a-list-by-another-list", "keywords": [], "tags": ["list", "sorting", "flutter", "dart"], "question": {"id": 64269092, "title": "How to sort a list by another list", "content": "How can I sort a list with objects so that the properties of the objects match a different list in dart?", "abstract": ""}, "answers": [{"id": 64269293, "score": 5, "vote": 0, "content": "This isn't the most performant way, but it's probably one of the simplest. Use a sorting method that sorts based on the object's field's location in the other array: This way is slightly more involved but more performant as you only need to iterate over each list once each. It involves making a map out of your list and then using that as the source of truth to rebuild a sorted list: The first option is better if space is an issue, the second is better if speed is an issue.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/61024568/python-3-x-sort-one-list-based-on-another-list-and-then-return-both-lists-sor", "keywords": [], "tags": ["python", "python-3.x", "list"], "question": {"id": 61024568, "title": "Python 3.x -- sort one list based on another list and then return both lists sorted", "content": "Problem: I would like to sort one list based on another list and then return both lists sorted. I'm doing it like this: Question: Is it possible to merge the last two lines into one line? I found question: Sorting list based on values from another list? but it's not exactly what I'm  asking for.", "abstract": ""}, "answers": [{"id": 61025052, "score": 1, "vote": 0, "content": "Is it possible to merge the last two lines into one line? Yes it is. ordered_candidates excludes the points from the result, since you only choose the candidates with [x for _, x in...]. This basically only selects the second item from each tuple. Additionally, ordered_points sorts only the points. They both also sort in reverse with reverse=True.  Seems like you can just modify ordered_candidates to include both items in the (point, candidate) pairs.", "abstract": ""}, {"id": 61025069, "score": 0, "vote": 0, "content": "It is possible to do this by:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/61119161/sort-a-list-according-to-another-list-with-uneven-length", "keywords": [], "tags": ["python"], "question": {"id": 61119161, "title": "Sort a list according to another list, with uneven length", "content": "Let's say I have two lists,\u00a0l1\u00a0and\u00a0l2:  The list l2 will be sorted according to the ordering of list l1, so in this case: Note: List l2 will always have 2 items which have a different value. I can think of a naive loop approach to doing this, but that is going to be really inefficient. What is a pythonic and efficient way of doing this?", "abstract": ""}, "answers": [{"id": 61119662, "score": 0, "vote": 0, "content": "You can traverse l1 while matching it with l2 elements. Whenever you find an element you can mark that index of l1 or maybe store that index in a new list l3. Now in the end you can sort the l3 list based on index numbers.  The above code takes in all the values from l2, marks their index numbers in l1.Then we sort all the index numbers and put the sorted values in l2. Hope this can help a little.  ", "abstract": ""}, {"id": 61119426, "score": 2, "vote": 0, "content": "Idea from: here", "abstract": ""}, {"id": 61119415, "score": 3, "vote": 0, "content": "Here's a fast solution.  First build a dict mapping values to indices: Then use it to obtain sort keys: Creating d is O(len(l1)), and the sort is O(len(l2)*log(len(l2))).", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/60211248/sort-a-list-by-presence-of-items-in-another-list", "keywords": [], "tags": ["python", "list", "sorting"], "question": {"id": 60211248, "title": "Sort a list by presence of items in another list", "content": "Suppose I have two lists: How would you sort this most efficiently, such that: list b is sorted with respect to a. Unique elements in b should be placed at the end of the sorted list. Unique elements in a can be ignored. example output: Sorry, it's a simple question. My attempt is stuck at the point of taking the intersection. ", "abstract": ""}, "answers": [{"id": 60235049, "score": 2, "vote": 0, "content": "Your title is actually clearer than your description and can be pretty directly translated to code: Sort a list by presence of items in another list Code: or Sorting booleans is practically indistinguishable from linear time, and these solutions are faster than the accepted solution both on your example data as well as on example data I tried with millions of random numbers (where about half of b's elements were in a). \nBenchmarks Note: Benchmark code:", "abstract": ""}, {"id": 60211389, "score": 7, "vote": 0, "content": "There is no need to actually sort here. You want the elements in a which are in b, in the same order as they were in a; followed by the elements in b which are not in a, in the same order as they were in b. We can just do this with two filters, using the sets for fast membership tests: Or if you prefer comprehensions: Both take linear time, which is better than sorting.", "abstract": ""}, {"id": 60211465, "score": 0, "vote": 0, "content": "Maybe this should work.", "abstract": ""}, {"id": 60211400, "score": 2, "vote": 0, "content": "As you gave the hint of using set, it seems to me that the two lists contain non-duplicated items. Then you can simply do list comprehension: This is O(n^2), however. If your list is large and want to make it faster, try to build a set of a and b respectively and use them for membership check.", "abstract": ""}, {"id": 60211313, "score": 6, "vote": 0, "content": "You can create a custom dictionary, with the keys being the entries in a and the values their position. Then sort b according to the values in the dictionary. You can use dict.get for the lookup and inf if the value is not present: ", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/50702846/sort-a-list-according-to-another-list", "keywords": [], "tags": ["c#"], "question": {"id": 50702846, "title": "Sort a list according to another list", "content": "I have a list1 like this : I have another list2 that list2 count is equal with list1 count (6=6) : I want sort list1 according to list2, that list2 to be sorted ascending. as a result : I used the following code. But the result is not sorted", "abstract": ""}, "answers": [{"id": 60091252, "score": 4, "vote": 0, "content": "You could use Enumerable.Zip to combine them, then OrderBy to order Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results. Output", "abstract": ""}, {"id": 50703076, "score": 0, "vote": 0, "content": "Try this: should give the expected result.", "abstract": ""}, {"id": 50703161, "score": 4, "vote": 0, "content": "You can do this directly if you use an array instead of a list: The Array.Sort(Array keys, Array items) method is provided for this exact purpose. Sorts a pair of one-dimensional Array objects (one contains the keys and the other contains the corresponding items) based on the keys in the first Array using the IComparable implementation of each key. Sadly, there is no equivalent for List<T>.", "abstract": ""}, {"id": 50702938, "score": 5, "vote": 0, "content": "Why not use a sorted dictionary? You'll now be able to access the values in the correct order.", "abstract": ""}, {"id": 50702899, "score": 0, "vote": 0, "content": "Try this: It should produce the expected result given the following two lists:", "abstract": ""}]}]