[{"link": "https://stackoverflow.com/questions/76297911/what-are-the-common-ways-to-distinguish-between-identifier-of-local-variables-an", "keywords": [], "tags": ["coding-style", "rename", "naming-conventions", "naming", "prefix"], "question": {"id": 76297911, "title": "What are the common ways to distinguish between identifier of local variables and global variables?", "content": "I write a function with using same identifier for local variable and globel variable, as shown as following codes: I want to reduce this kind of naming style to avoid ambiguity.\nBut the only method I can think of is adding prefix or suffix to identifier, like this: My question is:\nWhat are the common ways or conventions to distinguish between local variables and global variables?", "abstract": ""}, "answers": [{"id": 76304542, "score": 1, "vote": 0, "content": "The first observation is that if the variables are global you don't need to pass them to the function; it already has access to them. However, the best strategy is to avoid global variables if possible so the function is self-contained. In general it's good practice to use more descriptive names for global variables, or at least avoid unnecessary abbreviations, for instance elapsed_time and node_count. I always let the last word describe the variable in its most basic sense; the first variable is a time and the second is a count. With this practice you can see at a glance what kind of value you are dealing with. Remember that each variable or function parameter exists in a context; a global variable exist in the context of the module and a parameter and a local variable exist in the context of a function. That alone often implies what the name should be. Encoding the global property in the variable name is an ugly solution if you ask me. It is ugly because a variable should be named after what kind of values it holds, nothing more and nothing less.", "abstract": ""}, {"id": 76297993, "score": 1, "vote": 0, "content": "It is not typical Python Style to do what you suggest. https://pep8.org/#global-variable-names However, there are several other styles you can take inspiration from. You can try a g_ prefix to note a global variable. I've seen this used although it is not popular. Some code styles also have guidance on global variable where you use UpperCamelCase for global variables (and functions) and lowerCamelCase for locals. If you instead prefer underscores, it's easily modified to be Upper_With_Under and lower_with_under. Typically, in modern code styles we don't rely on naming to note which variable is in what scope. If a programmer cannot keep track of which name is in what scope, that should tell you that the file is too complex with too many names and too many overlapping scopes. You should take this confusion and turn it into a round of simplification, modularization, and abstraction so that the code is easier to understand and keep in your mind. Code that is too complex for you to keep track of is code that is too complex to modify.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/423379/using-global-variables-in-a-function", "keywords": [], "tags": ["python", "global-variables", "scope"], "question": {"id": 423379, "title": "Using global variables in a function", "content": "How do I create or use a global variable inside a function? How do I use a global variable that was defined in one function inside other functions? Failing to use the global keyword where appropriate often causes UnboundLocalError. The precise rules for this are explained at UnboundLocalError on local variable when reassigned after first use. Generally, please close other questions as a duplicate of that question when an explanation is sought, and this question when someone simply needs to know the global keyword.", "abstract": ""}, "answers": [{"id": 423668, "score": 897, "vote": 0, "content": "If I'm understanding your situation correctly, what you're seeing is the result of how Python handles local (function) and global (module) namespaces. Say you've got a module like this: You might be expecting this to print 42, but instead, it prints 5.  As has already been mentioned, if you add a 'global' declaration to func1(), then func2() will print 42. What's going on here is that Python assumes that any name that is assigned to, anywhere within a function, is local to that function unless explicitly told otherwise.  If it is only reading from a name, and the name doesn't exist locally, it will try to look up the name in any containing scopes (e.g. the module's global scope). When you assign 42 to the name _my_global, therefore, Python creates a local variable that shadows the global variable of the same name.  That local goes out of scope and is garbage-collected when func1() returns; meanwhile, func2() can never see anything other than the (unmodified) global name.  Note that this namespace decision happens at compile time, not at runtime -- if you were to read the value of _my_global inside func1() before you assign to it, you'd get an UnboundLocalError, because Python has already decided that it must be a local variable but it has not had any value associated with it yet.  But by using the 'global' statement, you tell Python that it should look elsewhere for the name instead of assigning to it locally. (I believe that this behavior originated largely through optimization of local namespaces -- without this behavior,  Python's VM would need to perform at least three name lookups each time a new name is assigned to inside a function (to ensure that the name didn't already exist at module/builtin level), which would significantly slow down a very common operation.)", "abstract": ""}, {"id": 423596, "score": 5130, "vote": 0, "content": "You can use a global variable within other functions by declaring it as global within each function that assigns a value to it: Since it's unclear whether globvar = 1 is creating a local variable or changing a global variable, Python defaults to creating a local variable, and makes you explicitly choose the other behavior with the global keyword. See other answers if you want to share a global variable across modules.", "abstract": ""}, {"id": 74636428, "score": -4, "vote": 0, "content": "if you want to access global var you just add global keyword inside your function\nex:\nglobal_var = 'yeah'", "abstract": ""}, {"id": 71883300, "score": 0, "vote": 0, "content": "Here we are comparing global variable Initialized that 0, so while loop condition got true Function will get called.Loop will be infinite", "abstract": ""}, {"id": 71663780, "score": 9, "vote": 0, "content": "Explanation: global_var is a global variable and all functions and classes can access that variable. The func_1() accessed that global variable using the keyword global which points to the variable which is written in the global scope. If I didn't write the global keyword the variable global_var inside func_1 is considered a local variable that is only usable inside the function. Then inside func_1, I have incremented that global variable by 1. The same happened in func_2(). After calling func_1 and func_2, you'll see the global_var is changed", "abstract": ""}, {"id": 71074895, "score": 1, "vote": 0, "content": "Like this code: Key: If you declare a variable outside the strings, it become global. If you declare a variable inside the strings, it become local. If you want to declare a global variable inside the strings, use the keyword global before the variable you want to declare: and then you have 100 in the document.", "abstract": ""}, {"id": 67339244, "score": 5, "vote": 0, "content": "Though this has been answered, I am giving solution again as I prefer single line\nThis is if you wish to create global variable within function", "abstract": ""}, {"id": 423401, "score": 273, "vote": 0, "content": "You may want to explore the notion of namespaces. In Python, the module is the natural place for global data: Each module has its own private symbol table, which is used as the global symbol table by all functions defined in the module. Thus, the author of a module can use global variables in the module without worrying about accidental clashes with a user\u2019s global variables. On the other hand, if you know what you are doing you can touch a module\u2019s global variables with the same notation used to refer to its functions, modname.itemname. A specific use of global-in-a-module is described here - How do I share global variables across modules?, and for completeness the contents are shared here: The canonical way to share information across modules within a single program is to create a special configuration module (often called config or cfg). Just import the configuration module in all modules of your application; the module then becomes available as a global name. Because there is only one instance of each module, any changes made to the module object get reflected everywhere. For example: File: config.py File: mod.py File: main.py", "abstract": ""}, {"id": 27287648, "score": 33, "vote": 0, "content": "What you are saying is to use the method like this: But the better way is to use the global variable like this: Both give the same output.", "abstract": ""}, {"id": 28329600, "score": 30, "vote": 0, "content": "Try this:", "abstract": ""}, {"id": 63629668, "score": 7, "vote": 0, "content": "There are 2 ways to declare a variable as global: 1. assign variable inside functions and use global line 2. assign variable outside functions: Now we can use these declared global variables in the other functions: Note 1: If you want to change a global variable inside another function like update_variables() you should use global line in that function before assigning the variable: Note 2: There is a exception for note 1 for list and dictionary variables while not using global line inside a function:", "abstract": ""}, {"id": 61992762, "score": 8, "vote": 0, "content": "Globals in connection with multiprocessing on different platforms/envrionments \nas Windows/Mac OS on the one side and Linux on the other are troublesome. I will show you this with a simple example pointing out a problem which I run into some time ago.  If you want to understand, why things are different on Windows/MacOs and Linux you \nneed to know that, the default mechanism to start a new process on ... They are different in Memory allocation an initialisation ... (but I don't go into this\nhere).  Let's have a look at the problem/example ... If you run this on Windows (And I suppose on MacOS too), you get the following output ... If you run this on Linux, you get the following instead. ", "abstract": ""}, {"id": 34559513, "score": 69, "vote": 0, "content": "We can create a global with the following function: Writing a function does not actually run its code. So we call the create_global_variable function: You can just use it, so long as you don't expect to change which object it points to:  For example,  and now we can use the global variable: To point the global variable at a different object, you are required to use the global keyword again: Note that after writing this function, the code actually changing it has still not run: So after calling the function: we can see that the global variable has been changed. The global_variable name now points to 'Bar': Note that \"global\" in Python is not truly global - it's only global to the module level. So it is only available to functions written in the modules in which it is global. Functions remember the module in which they are written, so when they are exported into other modules, they still look in the module in which they were created to find global variables. If you create a local variable with the same name, it will overshadow a global variable: But using that misnamed local variable does not change the global variable: Note that you should avoid using the local variables with the same names as globals unless you know precisely what you are doing and have a very good reason to do so. I have not yet encountered such a reason. A follow on comment asks: what to do if I want to create a global variable inside a function inside a class and want to use that variable inside another function inside another class? Here I demonstrate we get the same behavior in methods as we do in regular functions: And now: But I would suggest instead of using global variables you use class attributes, to avoid cluttering the module namespace. Also note we don't use self arguments here - these could be class methods (handy if mutating the class attribute from the usual cls argument) or static methods (no self or cls).", "abstract": ""}, {"id": 46058078, "score": 9, "vote": 0, "content": "I'm adding this as I haven't seen it in any of the other answers and it might be useful for someone struggling with something similar. The globals() function returns a mutable global symbol dictionary where you can \"magically\" make data available for the rest of your code. \nFor example: and  Will just let you dump/load variables out of and into the global namespace. Super convenient, no muss, no fuss. Pretty sure it's Python 3 only.", "abstract": ""}, {"id": 33320055, "score": 20, "vote": 0, "content": "Following on and as an add on, use a file to contain all global variables all declared locally and then import as: File initval.py: File getstocks.py:", "abstract": ""}, {"id": 19347254, "score": 35, "vote": 0, "content": "As it turns out the answer is always simple. Here is a small sample module with a simple way to show it in a main definition: Here is how to show it in a main definition: This simple code works just like that, and it will execute. I hope it helps.", "abstract": ""}, {"id": 45769568, "score": 8, "vote": 0, "content": "Reference the class namespace where you want the change to show up.   In this example, runner is using max from the file config. I want my test to change the value of max when runner is using it. main/config.py main/runner.py tests/runner_test.py", "abstract": ""}, {"id": 43285234, "score": 23, "vote": 0, "content": "In case you have a local variable with the same name, you might want to use the globals() function.", "abstract": ""}, {"id": 423641, "score": 75, "vote": 0, "content": "If you want to refer to a global variable in a function, you can use the global keyword to declare which variables are global. You don't have to use it in all cases (as someone here incorrectly claims) - if the name referenced in an expression cannot be found in local scope or scopes in the functions in which this function is defined, it is looked up among global variables. However, if you assign to a new variable not declared as global in the function, it is implicitly declared as local, and it can overshadow any existing global variable with the same name. Also, global variables are useful, contrary to some OOP zealots who claim otherwise - especially for smaller scripts, where OOP is overkill.", "abstract": ""}, {"id": 19151605, "score": 41, "vote": 0, "content": "With parallel execution, global variables can cause unexpected results if you don't understand what is happening. Here is an example of using a global variable within multiprocessing. We can clearly see that each process works with its own copy of the variable: Output:", "abstract": ""}, {"id": 34664752, "score": 17, "vote": 0, "content": "Writing to explicit elements of a global array does not apparently need the global declaration, though writing to it \"wholesale\" does have that requirement:", "abstract": ""}, {"id": 27580376, "score": 30, "vote": 0, "content": "You need to reference the global variable in every function you want to use. As follows:", "abstract": ""}, {"id": 24572187, "score": 58, "vote": 0, "content": "In addition to already existing answers and to make this more confusing: In Python, variables that are only referenced inside a function are\n  implicitly global. If a variable is assigned a new value anywhere\n  within the function\u2019s body, it\u2019s assumed to be a local. If a variable\n  is ever assigned a new value inside the function, the variable is\n  implicitly local, and you need to explicitly declare it as \u2018global\u2019. Though a bit surprising at first, a moment\u2019s consideration explains\n  this. On one hand, requiring global for assigned variables provides a\n  bar against unintended side-effects. On the other hand, if global was\n  required for all global references, you\u2019d be using global all the\n  time. You\u2019d have to declare as global every reference to a built-in\n  function or to a component of an imported module. This clutter would\n  defeat the usefulness of the global declaration for identifying\n  side-effects. Source: What are the rules for local and global variables in Python?.", "abstract": ""}, {"id": 6664227, "score": 117, "vote": 0, "content": "Python uses a simple heuristic to decide which scope it should load a variable from, between local and global.  If a variable name appears on the left hand side of an assignment, but is not declared global, it is assumed to be local.  If it does not appear on the left hand side of an assignment, it is assumed to be global.   See how baz, which appears on the left side of an assignment in foo(), is the only LOAD_FAST variable.", "abstract": ""}, {"id": 427818, "score": 27, "vote": 0, "content": "You're not actually storing the global in a local variable, just creating a local reference to the same object that your original global reference refers to. Remember that pretty much everything in Python is a name referring to an object, and nothing gets copied in usual operation. If you didn't have to explicitly specify when an identifier was to refer to a predefined global, then you'd presumably have to explicitly specify when an identifier is a new local variable instead (for example, with something like the 'var' command seen in JavaScript). Since local variables are more common than global variables in any serious and non-trivial system, Python's system makes more sense in most cases. You could have a language which attempted to guess, using a global variable if it existed or creating a local variable if it didn't. However, that would be very error-prone. For example, importing another module could inadvertently introduce a global variable by that name, changing the behaviour of your program.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/75270283/how-to-declare-a-global-variable-in-python-correctly", "keywords": [], "tags": ["python"], "question": {"id": 75270283, "title": "How to declare a global variable in Python correctly", "content": "I have the following piece of code that presented below with tic-tac-toe implementation. As far as I understand variable \"player\" is global one and it's value 'X' should be accessed from any place of the program. But as a result I got the error: print(f\"Player {player}, make your move (row column): \") UnboundLocalError: local variable 'player' referenced before assignment. How to declare global variables in a correct way in Python? What I'm doing wrong? I expected the code of tic-tac-toe working correctly but it didn't. To resolve the issue I tried to change \"player\" scope and moved an assignment inside greet() method before infinite loop. It works perfect, but I have no clue why it didn't work before, as a global variable.", "abstract": ""}, "answers": [{"id": 75273202, "score": 0, "vote": 0, "content": "You 'declare' a variable player and assigned it a string value X.\nplayer = 'X' You then 'reference' this variable within a function that doesn't have the variable passed to it as argument).\nIf you go through the full error code you received, you'll note the offending line of code.\nPS: you only paste the specific part of the error (which is fine though). To resolve this, within the function greet(), simply declare global player Pls, read more on UnboundLocalError, on local and global variables.\nAlso, do check a previous question with is incidentally a duplicate of another question! Why does this UnboundLocalError occur (closure)? [Additions]\nWith that said, I'll strongly recommend that you wrapped up your functions within a class. It'll come up handy in referencing your variables, assigning values to them, keeping state through self.\nAlso, give due thoughts to try, error handling especially around input(), and board assigning.", "abstract": ""}, {"id": 75270312, "score": 4, "vote": 0, "content": "You \"declare\" it outside the the functions as you did here. But you're missing the global keyword. Then: If you only read its value inside a function, it's treated as a global variable. Normally, if you write to it, it's treated as a local variable. To write to it as a global variable, add the global keyword in the function definition before using the variable. Source: https://docs.python.org/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python", "abstract": ""}, {"id": 75270348, "score": 1, "vote": 0, "content": "To declare a global variable you simply need to add a line above the declerration saying global followed by the name of the variable. E.g:", "abstract": ""}, {"id": 75270298, "score": 3, "vote": 0, "content": "If a function assigns to a variable name (which your greet() function does for the player variable), then that variable name is treated as local everywhere in the function, even if there is a global variable of the same name. If you want the function to use the global variable, put this at the top of the function: By contrast, your print_board() function does not assign to a variable named board, therefore it is able to use that global variable without explicitly declaring global board.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/70314166/python-variable-scope-global-vs-local-scope-clash", "keywords": [], "tags": ["python", "global-variables", "local-variables"], "question": {"id": 70314166, "title": "Python variable scope - Global vs Local Scope clash", "content": "Based on the different conditions used in a if conditional check, the variable's global & local scopes are affected. I tried running the below code in multiple online IDEs as well, Almost all throws the error message in most runs & not all runs Can someone clarify the reason for the behaviour? #Code Sample 1: Within the function definition, Outside of if condition the variable holds no value !!!, And throws error but not in all runs And the output is: #Code Sample 2: Within the function definition, Outside of if condition the variable holds the local value instead of the globally assigned value And the output is:", "abstract": ""}, "answers": [{"id": 70314225, "score": 0, "vote": 0, "content": "you declare a=10 outside the function scope, and then here: you use a within the function, but only when the randomly generated number is 0. For the code to work, you need to add this to the function", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/2601269/arguments-local-variables-and-global-variables-coding-convention-in-python", "keywords": [], "tags": ["python", "coding-style"], "question": {"id": 2601269, "title": "Arguments, local variables, and global variables coding convention in Python", "content": "In python, there is no way to differentiate between arguments, local variables, and global variables. The easy way to do so might be have some coding convention such as  Is this a Pythonian way to go? I mean, is there well established/agreed coding-standards to differentiate them in python? === ADDED === I just want to discriminate between arguments and local variables. As arguments are given from outside, and more like a ROM in the sense that it is not assumed to be read only. \nC++ provides the const keyword to prevent the arguments from changing, but not for python. I thought appending _ can be one of a way to mimic this feature in python. ", "abstract": ""}, "answers": [{"id": 72419312, "score": -2, "vote": 0, "content": "Local variables are variables that are declared inside a function. Global variables are variables that are declared outside a function. For Example:", "abstract": ""}, {"id": 2602117, "score": 2, "vote": 0, "content": "It is usually obvious in python which variables are local and which are global, since to modify a global variable you have to declare it using the the global keyword at the start of a function.  However I sometimes add a global declaration even if it is not necessary for python to compile it, in order to emphasize that an object is global - e.g. modifying a mutable global data-structure. Arguments should be obvious because they are in the function declaration.  As others have said constants should be in UPPER_CASE_WITH_UNDERSCORES, which is a convention shared by many languages. If you find that you are having trouble keeping track of which are global, local and parameter variables I suggest that the problem may be your functions are too long and doing too much.  Functions & methods should be short and do exactly one thing.  I start to get the refactoring itch if my functions go over about 10-20 lines of code. I recommend reading the book Clean Code by Robert Martin.  The examples are in Java, but the principles apply to all languages.", "abstract": ""}, {"id": 2601829, "score": 0, "vote": 0, "content": "That's absolutly awful. There is no reason whatsoever to use a special naming scheme for global and local objects. Also you should avoid having global objects unless they are functions, classes or constants. Names for constants should be uppercase and seperated with underscores LIKE_THIS, class names look LikeThis and functions and method names should look like any other name. Names for objects which are implementation specific, can be changed/removed at any time or can not be relied on for any other good reasons should be prefixed with an underscore. You should also read the Python styleguide PEP 8 which covers these and more style-related rules you should follow as long as it doesn't make your code less readable. Most Python projects follow this or at least a compatible version of this style guide.", "abstract": ""}, {"id": 2601682, "score": 5, "vote": 0, "content": "I would do all your python programming according to PEP 8 guidelines.  Anyone who has to read your code will thank you for it. http://www.python.org/dev/peps/pep-0008/ Why is there a need to distinguish between arguments and local variables, since one is merely a subset of the other.  You can use locals(), globals(), and vars() to view scope if you are having local-global issues.  The inspect module can help with that, too.  And if possible, avoid using global variables as much as possible.  ", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/62010259/the-rule-of-thumb-as-to-when-we-should-use-a-global-variable-in-a-function", "keywords": [], "tags": ["python", "function", "global-variables", "turtle-graphics", "python-turtle"], "question": {"id": 62010259, "title": "The rule of thumb as to when we should use a global variable in a function", "content": " I've heard that globalizing variables isn't a very practice, so I try to minimize the amount by not globalizing any, and only globalize the ones that the error message tells me to. But doing that is quite annoying, and it wastes time.   and when it is not necessary?", "abstract": ""}, "answers": [{"id": 62019566, "score": 2, "vote": 0, "content": "Although it is not an answer, I just wanted to point out one more thing to look out for when shadowing names from outer scopes / global variables. cdlane writes in their answer that  You don't need the global declaration to examine a global variable.  I think it goes even further than that, because you cannot use the global keyword that way, as it is a declaration. As cdlane already said, it is used to declare variables in a local scope (such as a function or class) to be of global scope, such that you can assign new values to these variables from a local scope. You can even use the gobal keyword to declare new global variables from a local scope, although again, as cdlane pointed out, this is not a good idea. Here is some code highlighting these behaviours: So far nothing really new. However, when you are shadowing the names from global variables, but are still accessing the global variables elsewhere in the same scope, this becomes a problem.  The only way that I know of to avoid this, is to use the globals() function, although this really defeats all purpose and I wouldn't recommend it. I would however recommend to read PEP 3104 - Access to Names in Outer Scopes, which discusses these kinds of problems and presents a solution, which was ultimately never implemented though.", "abstract": ""}, {"id": 62011770, "score": 11, "vote": 0, "content": "Style rules are not language rules.  I.e. you shouldn't use eval(), but there it is, in the language. tell me the rule of thumb as to when we should global a variable in a\n  function, and when it is not necessary? The rules for when, and when not, to use global are simple, but even tutorials on the web get it wrong. (Yes, that's partly a style rule.) When you define a top level variable outside a function, Python makes it global. (You don't use the global keyword for this.)  When you assign to a variable inside a function, Python assumes it is local to the function.  You only need the global keyword when you want change that later assumption so you can reassign (=) a global variable from within a function.  You don't need the global declaration to examine a global variable.  You don't need it to invoke a method on a global variable that might change its internal state or content: The global declaration is used in any function where a global variable is reassigned.  It is is placed ahead of the first reference to the variable, access or assignment.  For simplicity, and style, global statements are put at the beginning of the function. A statement like, \"You should never use global variables\", is a style rule and true of most programming languages -- apply it if/when you can.  And if you absolutely can't, don't feel bad about it, just: Global constants are less an issue: @juanpa.arrivillaga's example of go_left() taking the additional values as parameters instead of global variables, fails to take into account that go_left() is a callback and that the turtle event assignment functions don't provide for additional parameters.  (They should, but they don't.) We can get around this using a lambda expression (or partial function from functools), but when used this way, lambda isn't particularly great style either, IMHO. @martineau's suggestion of \"making them attributes of a class that the class' methods can access\" (aka class variables) is fine, but what is left unsaid is that it means subclassing Turtle or wrapping a turtle instance with another class.   My personal issue with mutable globals is that they are problematic in a multi-threaded world.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/56689105/difference-behavior-between-a-python-global-variable-and-a-global-list", "keywords": [], "tags": ["python", "global-variables"], "question": {"id": 56689105, "title": "Difference behavior between a python global variable and a global list?", "content": "I am confused with the python's design of global variables, it seems quite different for a normal global variable and a global list, consider the following code: The code is quite self-explained, I would like to know why this is the case, what is the logic behind that. Besides, I've also tested a dictionary, it behaves like a list. What about other stuff, such as a class instance or something...", "abstract": ""}, "answers": [{"id": 56689314, "score": 3, "vote": 0, "content": "From the Programming FAQs: In Python, variables that are only referenced inside a function are implicitly global. If a variable is assigned a value anywhere within the function\u2019s body, it\u2019s assumed to be a local unless explicitly declared as global. When you write: You are assigning a value to the name global_var after you have already referenced the global version The += construct needs to read the global then reassign to it \u2014 it's equivalent to: According to the above rule, this would make it a local variable unless declared global but you've already referenced the global. When you write: You are not assigning a new value to the name global_list. global_list still points to the same array, the same thing happens with a dictionary. You would need to declare global global_list if you tried to reassign with something like:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/53007076/global-variable-reassignment-in-python", "keywords": [], "tags": ["python", "python-2.7", "hoisting"], "question": {"id": 53007076, "title": "global variable reassignment in python", "content": "When I try to reassign a variable inside a function, I get error of UnboundLocalError. Following is a snippet of my problem. when I execute it then I get the following: To solve this issue we can use global keyword like this I am looking for an explanation, to this behaviour, it seems somewhat similar to hoisting concept in javascript. I did find few resources, like source1, source2 but none of them explained well enough. Can someone give a proper explanation with what exactly happens under the hood in python?", "abstract": ""}, "answers": [{"id": 53007405, "score": 0, "vote": 0, "content": "Note that if you had written There wouldn't have been an exception. This is because, despite it's name, global_variable would be a local variable in the function's scope. Any variable you assign to in a function is local unless you explicitly tell it otherwise. In a function, when you access a variable (use it's value somehow, like printing it in these examples), python will first look for the variable in the local scope, and then in the global scope. Would access the global variable, for example. When python tries to compile your function, it sees that global_variable is assigned to, and therefore tries to treat it as local, but then it tries to access it before it's defined in that scope. The global keyword tells python to treat that name as refering to something in the global scope for that function, therefore assignments change the global variable, and do not introduce a new variable in the local scope.", "abstract": ""}, {"id": 53007309, "score": 0, "vote": 0, "content": "The problem is that when you run the code and it enters in the function this has a scope, where global_variable has not been defined yet. ", "abstract": ""}, {"id": 53007304, "score": 0, "vote": 0, "content": "A variable can't be both local and global inside of a function. So Python decides that we want a local variable due to the assignment to global_variable inside of abc(), so the first print statement before the definition of global_variable throws the error message above. Any variable which is changed or created inside of a function is local, if it hasn't been declared as a global variable. To tell Python, that we want to use the global variable, we have to explicitly state this by using the keyword \"global\" you can refer https://www.python-course.eu/python3_global_vs_local_variables.php for more information.", "abstract": ""}, {"id": 53007208, "score": 0, "vote": 0, "content": "This is because the Python compiler looks at all the l-values in a code block when determining which variables are local to that code block. Since in your code, global_variable is used as an l-value in the function block of abc, it is regarded as a variable local to the abc code block at compilation time, and as such, it is considered to be referenced before it is assigned a value within the abc when you try to print(global_variable) before you assign global_variable a value in the same block.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/45077902/python-local-and-global-variable", "keywords": [], "tags": ["python", "python-2.7"], "question": {"id": 45077902, "title": "Python local and global variable", "content": "Output: as per program, the last print statement should return \"s= Python is great\" because I think here S should be referred Global variable.", "abstract": ""}, "answers": [{"id": 45078344, "score": 0, "vote": 0, "content": "The output is correct. After s is defined as a global variable, you print the value assigned to s at that point which is Python is great, then you assign That's clear. to s - s is now global, so when you assign That's clear. to it inside your function, that becomes it's value in the outer scope as well. Here is a good stackoverflow answer regarding Scoping Rules.", "abstract": ""}, {"id": 45077993, "score": 2, "vote": 0, "content": "You modified the global variable in your function (f) so the variable now has the value that you modified at last\ni.e. \"That's clear.\"", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/41925835/how-can-i-tell-whether-a-variable-is-global-or-local", "keywords": [], "tags": ["python", "variables", "global", "local"], "question": {"id": 41925835, "title": "How can I tell whether a variable is global or local?", "content": "How can I tell whether a variable in Python is global or local?", "abstract": ""}, "answers": [{"id": 41925971, "score": 3, "vote": 0, "content": "globals() will return a dict of global variables locals() will return a dict of local variables to check if the scope of the variable: If you don't know about scopes, heres a good page to go to https://stackoverflow.com/a/292502/7486769", "abstract": ""}, {"id": 41925997, "score": 0, "vote": 0, "content": "If all you are doing is making a list for some documentation, all you need to do is create a list of variables that are defined outside of any function or class.  In the above, var1 is global, var2 is local.", "abstract": ""}]}]