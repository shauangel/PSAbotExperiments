[{"link": "https://stackoverflow.com/questions/159720/what-is-the-naming-convention-in-python-for-variable-and-function", "keywords": [], "tags": ["python", "python-3.x", "function", "variables", "naming-conventions"], "question": {"id": 159720, "title": "What is the naming convention in Python for variable and function?", "content": "Coming from a C# background the naming convention for variables and method names are usually either camelCase or PascalCase: In Python, I have seen the above but I have also seen underscores being used: Is there a more preferable, definitive coding style for Python?", "abstract": ""}, "answers": [{"id": 72603424, "score": 4, "vote": 0, "content": "Whether or not being in class or out of class: A variable and function are lowercase as shown below: And if they're more than one word, they're separated with underscore \"_\" as shown below: And, if a variable is a constant, it's uppercase as shown below:", "abstract": ""}, {"id": 68958842, "score": 1, "vote": 0, "content": "Lenin has told... I'm from Java/C# world too. And SQL as well.\nScrutinized myself in attempts to find first sight understandable examples of complex constructions like list in the dictionary of lists where everything is an object.\nAs for me - camelCase or their variants should become standard for any language. Underscores should be preserved for complex sentences.", "abstract": ""}, {"id": 8423697, "score": 1018, "vote": 0, "content": "The Google Python Style Guide has the following convention: module_name, package_name, ClassName, method_name, ExceptionName, function_name, GLOBAL_CONSTANT_NAME, global_var_name, instance_var_name, function_parameter_name, local_var_name. A similar naming scheme should be applied to a CLASS_CONSTANT_NAME", "abstract": ""}, {"id": 159745, "score": 1089, "vote": 0, "content": "See Python PEP 8: Function and Variable Names: Function names should be lowercase, with words separated by underscores as necessary to improve readability. Variable names follow the same convention as function names. mixedCase is allowed only in contexts where that's already the prevailing style (e.g. threading.py), to retain backwards compatibility.", "abstract": ""}, {"id": 57601736, "score": 3, "vote": 0, "content": "I personally use Java's naming conventions when developing in other programming languages as it is consistent and easy to follow. That way I am not continuously struggling over what conventions to use which shouldn't be the hardest part of my project!", "abstract": ""}, {"id": 50958547, "score": 30, "vote": 0, "content": "further to what @JohnTESlade has answered. Google's python style guide has some pretty neat recommendations, Names to Avoid Naming Convention Guidelines derived from Guido's Recommendations\n", "abstract": ""}, {"id": 37120709, "score": 18, "vote": 0, "content": "There is a paper about this: http://www.cs.kent.edu/~jmaletic/papers/ICPC2010-CamelCaseUnderScoreClouds.pdf TL;DR It says that snake_case is more readable than camelCase. That's why modern languages use (or should use) snake wherever they can.", "abstract": ""}, {"id": 2708015, "score": 55, "vote": 0, "content": "As the Style Guide for Python Code admits, The naming conventions of Python's\n  library are a bit of a mess, so we'll\n  never get this completely consistent Note that this refers just to Python's standard library. If they can't get that consistent, then there hardly is much hope of having a generally-adhered-to convention for all Python code, is there? From that, and the discussion here, I would deduce that it's not a horrible sin if one keeps using e.g. Java's or C#'s (clear and well-established) naming conventions for variables and functions when crossing over to Python. Keeping in mind, of course, that it is best to abide with whatever the prevailing style for a codebase / project / team happens to be. As the Python Style Guide points out, internal consistency matters most. Feel free to dismiss me as a heretic. :-) Like the OP, I'm not a \"Pythonista\", not yet anyway.", "abstract": ""}, {"id": 160830, "score": 290, "vote": 0, "content": "David Goodger (in \"Code Like a Pythonista\" here)  describes the PEP 8 recommendations as follows: joined_lower for functions, methods,\nattributes, variables joined_lower or ALL_CAPS for\nconstants StudlyCaps for classes camelCase only to conform to\npre-existing conventions", "abstract": ""}, {"id": 159756, "score": 5, "vote": 0, "content": "The coding style is usually part of an organization's internal policy/convention standards, but I think in general, the all_lower_case_underscore_separator style (also called snake_case) is most common in python. ", "abstract": ""}, {"id": 159798, "score": 29, "vote": 0, "content": "Most python people prefer underscores, but even I am using python since more than 5 years right now, I still do not like them. They just look ugly to me, but maybe that's all the Java in my head.  I simply like CamelCase better since it fits better with the way classes are named, It feels more logical to have SomeClass.doSomething() than SomeClass.do_something(). If you look around in the global module index in python, you will find both, which is due to the fact that it's a collection of libraries from various sources that grew overtime and not something that was developed by one company like Sun with strict coding rules. I would say the bottom line is: Use whatever you like better, it's just a question of personal taste.", "abstract": ""}, {"id": 264226, "score": 38, "vote": 0, "content": "As mentioned, PEP 8 says to use lower_case_with_underscores for variables, methods and functions. I prefer using lower_case_with_underscores for variables and mixedCase for methods and functions makes the code more explicit and readable.  Thus following the Zen of Python's \"explicit is better than implicit\" and \"Readability counts\"", "abstract": ""}, {"id": 160833, "score": 0, "vote": 0, "content": "Typically, one follow the conventions used in the language's standard library.", "abstract": ""}, {"id": 160769, "score": 21, "vote": 0, "content": "Personally I try to use CamelCase for classes, mixedCase methods and functions. Variables are usually underscore separated (when I can remember). This way I can tell at a glance what exactly I'm calling, rather than everything looking the same.", "abstract": ""}, {"id": 159778, "score": 35, "vote": 0, "content": "There is PEP 8, as other answers show, but PEP 8 is only the styleguide for the standard library, and it's only taken as gospel therein. One of the most frequent deviations of PEP 8 for other pieces of code is the variable naming, specifically for methods. There is no single predominate style, although considering the volume of code that uses mixedCase, if one were to make a strict census one would probably end up with a version of PEP 8 with mixedCase. There is little other deviation from PEP 8 that is quite as common.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/3898572/what-are-the-most-common-python-docstring-formats", "keywords": [], "tags": ["python", "coding-style", "documentation", "docstring"], "question": {"id": 3898572, "title": "What are the most common Python docstring formats?", "content": "I have seen a few different styles of writing docstrings in Python, what are the most popular styles?", "abstract": ""}, "answers": [{"id": 8109339, "score": 354, "vote": 0, "content": "The Google style guide contains an excellent Python style guide. It includes conventions for readable docstring syntax that offers better guidance than PEP-257. For example: I like to extend this to also include type information in the arguments, as described in this Sphinx documentation tutorial. For example:", "abstract": ""}, {"id": 23188939, "score": 67, "vote": 0, "content": "As apparantly no one mentioned it: you can also use the Numpy Docstring Standard. It is widely used in the scientific community. The Napolean sphinx extension to parse Google-style docstrings (recommended in the answer of @Nathan) also supports Numpy-style docstring, and makes a short comparison of both. And last a basic example to give an idea how it looks like:", "abstract": ""}, {"id": 24385103, "score": 1389, "vote": 0, "content": "Python docstrings can be written following several formats as the other posts showed. However the default Sphinx docstring format was not mentioned and is based on reStructuredText (reST). You can get some information about the main formats in this blog post. Note that the reST is recommended by the PEP 287 There follows the main used formats for docstrings. Historically a javadoc like style was prevalent, so it was taken as a base for Epydoc (with the called Epytext format) to generate documentation. Example: Nowadays, the probably more prevalent format is the reStructuredText (reST) format that is used by Sphinx to generate documentation.\nNote: it is used by default in JetBrains PyCharm (type triple quotes after defining a method and hit enter). It is also used by default as output format in Pyment. Example: Google has their own format that is often used. It also can be interpreted by Sphinx (ie. using Napoleon plugin).  Example: Even more examples Note that Numpy recommend to follow their own numpydoc based on Google format and usable by Sphinx. It is possible to use a tool like Pyment to automatically generate docstrings to a Python project not yet documented, or to convert existing docstrings (can be mixing several formats) from a format to an other one. Note: The examples are taken from the Pyment documentation", "abstract": ""}, {"id": 3899154, "score": 244, "vote": 0, "content": "Docstring conventions are in PEP-257 with much more detail than PEP-8. However, docstrings seem to be far more personal than other areas of code. Different projects will have their own standard.  I tend to always include docstrings, because they tend to demonstrate how to use the function and what it does very quickly.  I prefer to keep things consistent, regardless of the length of the string. I like how to code looks when indentation and spacing are consistent. That means, I use: Over: And tend to leave off commenting on the first line in longer docstrings: Meaning I find docstrings that start like this to be messy.", "abstract": ""}, {"id": 14285308, "score": 12, "vote": 0, "content": "It's Python; anything goes. Consider how to publish your documentation. Docstrings are invisible except to readers of your source code. People really like to browse and search documentation on the web. To achieve that, use the documentation tool Sphinx. It's the de-facto standard for documenting Python projects. The product is beautiful - take a look at https://python-guide.readthedocs.org/en/latest/ . The website Read the Docs will host your docs for free.", "abstract": ""}, {"id": 25791597, "score": 8, "vote": 0, "content": "I suggest using Vladimir Keleshev's pep257 Python program to check your docstrings against PEP-257 and the Numpy Docstring Standard for describing parameters, returns, etc. pep257 will report divergence you make from the standard and is called like pylint and pep8.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/52827722/folder-naming-convention-for-python-projects", "keywords": [], "tags": ["python", "naming", "conventions"], "question": {"id": 52827722, "title": "Folder naming convention for python projects", "content": "What is the naming convention in python community to set names for project folders and subfolders?  I find mixed up in the github. \nAppreciate your expert opinion. ", "abstract": ""}, "answers": [{"id": 59896341, "score": 9, "vote": 0, "content": "Here is an example of how we might organize a repository called altimeter-valport-lcm which contains the package altimeter_valeport_lcm. The package contains the module altimeter_valeport_lcm.parser: [NOTE]: Read More.", "abstract": ""}, {"id": 52828384, "score": 63, "vote": 0, "content": "There are three conventions, which you might find confusing. PEP8 defines a standard for how to name packages and modules: Modules should have short, all-lowercase names. Underscores can be used in the module name if it improves readability. Python packages should also have short, all-lowercase names, although the use of underscores is discouraged. Even though it's in PEP8, many packages use underscores and the community doesn't consider it poor practice. So you see many names like sqlalchemy_searchable, etc. Although you can create a folder with a name which does not match your package name, it's generally a bad idea to do so because it makes things more confusing. So you'll usually use all-lowercase names with underscores for your folders. The name of a package when it's installed doesn't need to match the name it's published to on pypi (the source for pip installs). Packages on pypi tend to be named with hyphens, not underscores.\ne.g. flask-cors, which installs the package flask_cors. However, you'll note that if you follow-up on this example that flask-cors's GitHub repo defines the package code in a flask_cors/ directory. This is the norm. It gets a bit messy though, because pip package installation is case-insensitive and treats underscores and hyphens equivalently. So Flask-Cors, fLASK_cOrs, etc are all \"equivalent\".\nPersonally, I don't like playing games with this -- I recommend just naming packages on pypi in all-lowercase with hyphens, which is what most people do. Disclaimer: I don't own or maintain sqlalchemy-searchable or flask-cors, but at time of writing they're good examples of packages with underscores in their names.", "abstract": ""}, {"id": 52828076, "score": 1, "vote": 0, "content": "Python packages should also have short, all-lowercase names, although the use of underscores is discouraged. Pep 8 Style Guide This is the recommendation for packages, which is the main folder containing modules, for testing, setup, and script files, *.py and __init__.py.  Therefore, I am assuming the folder is the package and as such, should be all lower case with no underscore (see the link Some Package Github ). ", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/5426754/google-python-style-guide", "keywords": [], "tags": ["python"], "question": {"id": 5426754, "title": "Google Python style guide", "content": "Why does the Google Python Style Guide prefer list comprehensions and for loops instead of filter, map, and reduce? Deprecated Language Features:\n ... \"Use list comprehensions and for loops instead of filter, map, and reduce. \" The explanation given : \"We do not use any Python version which does not support these features, so there is no reason not to use the new styles.\" ", "abstract": ""}, "answers": [{"id": 16329879, "score": 35, "vote": 0, "content": "The Google Python Style guide does not say  prefer list comprehensions and for loops instead of filter, map, and\n  reduce Rather, the full sentence reads,  Use list comprehensions and for loops instead of filter and map when\n  the function argument would have been an inlined lambda anyway. (my emphasis) So it is not recommending that you completely avoid using map, for instance -- only that is preferable to In this case it is clear that the list comprehension is more direct and readable.  On the other hand, there is nothing wrong with using map like this: instead of the longer-winded It performs well to boot:", "abstract": ""}, {"id": 5426851, "score": 31, "vote": 0, "content": "map and filter are way less powerful than their list comprehension equivalent. LCs can do both filtering and mapping in one step, they don't require explicit function and can  be compiled more efficiently because of their special syntax There is simply no reason to prefer map or filter over LCs.  reduce is slightly different, because there is no equivalent LC, but it has no big advantage over a ordinary for-loop either.", "abstract": ""}, {"id": 5426860, "score": 5, "vote": 0, "content": "List comprehensions are generally considered more \"pythonic\" than filter, map and reduce. See also this article by Python creator Guido van Rossum. As far as filing this under \"Deprecated Language Features\" in the style guide, there were apparently plans to deprecate filter, map and reduce in Python 3 (see the article referenced above).  Some of these plans changed eventually. reduce was dropped from being a built-in function (and moved to the functools module), but filter and map are still available as built-ins.", "abstract": ""}, {"id": 5426826, "score": 4, "vote": 0, "content": "I would think that it is because not everybody knows how to use those functions well; readability may be impaired for people who are not as familiar. Also, the for loop and list comprehension are widely used and easy to understand; even though the latter is from functional programming, just like map, filter, and reduce, it mirrors lists and for loops quite well. In any case, cramming a lambda or defining a function just to use with map, filter, or reduce can get annoying, especially since a lambda can only be a single expression and a function could clutter your code. You don't need them anyways; map(func, seq) is just [func(x) for x in seq] and filter is just a list comprehension with an if component. reduce can be done with a for loop. In short, for and list comprehensions are clearer, and they provide basically equivalent functionality in most cases.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/5117359/any-r-style-guide-checker", "keywords": [], "tags": ["r"], "question": {"id": 5117359, "title": "any R style guide / checker?", "content": "in Python I'm used to having my code \"style-checked\" by an automatic but configurable tool, called pep8, after the 8th Python enhancement proposal. in R I don't know.  Google has a style guide, but: Dirk, Alex, in your answers you pointed me at pretty printers, but in my opinion that would overdo one thing and not do another: code would be automatically edited to follow the style, while no warnings are issued for poorly chosen identifiers.", "abstract": ""}, "answers": [{"id": 54689043, "score": 1, "vote": 0, "content": "RStudio has added a style checker at some point in the past. For instance, in version 1.1.463 you can enable the feature under General Options. Here's a screenshot: ", "abstract": ""}, {"id": 48768967, "score": 4, "vote": 0, "content": "I use  styler and then lintr before I check anything into version control. styler converts your code base to match a given style - the default matches the tidyverse style described here. It modifies alignments, and some syntax (<- over =). But, it doesn't rename variables or anything like that. lintr is non-modifying. It just identifies lines of code that are inconsistent with your style guide. I use this within vim when I'm working on a package or a project to identify things that need a bit more human input to fix (renaming variables/functions etc)", "abstract": ""}, {"id": 42141069, "score": 5, "vote": 0, "content": "lintr - highlights possible syntax and style issues/errors CRAN Task View: Reproducible Research - Formatting Tools section contains other useful tools, particularly formatR which can automatically formt code.", "abstract": ""}, {"id": 24518648, "score": 4, "vote": 0, "content": "The lint package gives warnings about stylistic problems, without correcting those. \nRunning the lint() command (using the default parameter values) gives you a list of warnings for all R files in the current directory. ", "abstract": ""}, {"id": 5129258, "score": 11, "vote": 0, "content": "I think if you want such a tool, you may have to write it yourself.  The reason is that R does not have an equivalent to Python's PEP8; that is, an \"official style guide\" that has been handed down from on high and is universally followed by the majority of R programmers. In addition there are a lot of stylistic inconsistencies in the R core itself; this is a consequence of the way in which R evolved as a language.  For example, many functions in R core follow the form of foo.bar and were written before the S3 object system came along and used that notation for method dispatch.  In hindsight, the naming of these functions should probably be changed in the interests of consistency and clarity, but it is too late to consider that now. In summary, there is no official \"style lint\" tool for R because the R Core itself contains enough style lint, of which nothing can be done about, that writing one would be very difficult.  For every rule--- \"don't do this\" ---there would have to be a long list of exceptions--- \"except in this case, and this case, and this one, and ..., where it was done for historical purposes\".", "abstract": ""}, {"id": 5118354, "score": 6, "vote": 0, "content": "As for  what do most R programmers actually use I suspect that quite a few people follow R Core who have a\nR Coding standards section in the R Internals manual.     Which in a large sense falls back to these sensible Emacs defaults to be used along with ESS. Here is what I use and it is only minimally changed: As for a general, tool Xihui's formatR pretty-printer may indeed be the closest.  Or just use ESS :)", "abstract": ""}, {"id": 5117867, "score": 21, "vote": 0, "content": "There's a formatR package with tidy.source function. I use Emacs with ESS, and follow Hadley's style recommendations. It's hard to compare R with Python, since style is kind of mandatory in Python, unlike R. =) EDITa simple demonstration:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/3985563/python-best-formatting-practice-for-lists-dictionary-etc", "keywords": [], "tags": ["python", "code-formatting"], "question": {"id": 3985563, "title": "Python &quot;best formatting practice&quot; for lists, dictionary, etc", "content": "I have been looking over the Python documentation for code formatting best practice for large lists and dictionaries, for example, or or How do I handle deep nesting of lists/dictionaries?", "abstract": ""}, "answers": [{"id": 51322457, "score": 0, "vote": 0, "content": "I want to mention the following option, which is not specifically mentioned in the PEP8, but is noted in the dictionary documentation: \"When the keys are simple strings, it is sometimes easier to specify pairs using keyword arguments:\" It doesn't settle the indentation question, however.", "abstract": ""}, {"id": 18139301, "score": 40, "vote": 0, "content": "According to the PEP8 style guide there are two ways to format a dictionary: OR If you want to conform to PEP8 I would say anything else is technically wrong.", "abstract": ""}, {"id": 3985680, "score": 2, "vote": 0, "content": "Definitely NOT option 1, one of the strenghts of Python is its legibility. Option 1 severely diminishes that legibility. Out of 2 and 3, I'll echo the same reasons pyfunc stated for both. However, in my own code I prefer option 3 simply because the first element sometimes gets 'lost' by being at the end of the declare line, and upon quick glancing at code sometimes I just won't see it immediately. I know it's a little silly, but the mind works in mysterious ways ...", "abstract": ""}, {"id": 3985588, "score": 1, "vote": 0, "content": "I prefer the second or third one.  Reason: ", "abstract": ""}, {"id": 3986429, "score": 34, "vote": 0, "content": "aaronasterling's indentation style is what I prefer. This, and several other styles are explained in another SO Question. Especially Lennart Regebro's answer gave a nice overview. But this style was the one most voted for:", "abstract": ""}, {"id": 3988453, "score": 0, "vote": 0, "content": "Previous to reading this post I would have opted for the third option you give. But now I might go for the one that is NOT T\u00f6r\u00f6k G\u00e1bor's style: my_dictionary = {\n    1: 'something',\n    2: 'some other thing',\n} But honestly anything aside from your first option is probably fine.", "abstract": ""}, {"id": 3985651, "score": 6, "vote": 0, "content": "Define your dictionary in any way you want and then try this: Do you like the output?", "abstract": ""}, {"id": 3987047, "score": 0, "vote": 0, "content": "I love the second way:", "abstract": ""}, {"id": 3985719, "score": 4, "vote": 0, "content": "If you go by ganeti (which respects PEP 8) you should choose the third option. I like this esp. because you can select only the elements you want. And I feel removing or adding elements to either ends is faster this way. Note: As pointed out in the comment there should be no whitespace before ':' (E203) as per PEP.", "abstract": ""}, {"id": 3985668, "score": 41, "vote": 0, "content": "My preferred way is:", "abstract": ""}, {"id": 3985594, "score": 1, "vote": 0, "content": "Well, the first one is a no-go, since your lines should only 79 characters wide. With regards to the other two options, I suppose it's a matter of taste, but I personally prefer the second option.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/46461631/python-style-guide-intermittent-variables", "keywords": [], "tags": ["python", "coding-style"], "question": {"id": 46461631, "title": "Python style guide: intermittent variables", "content": "I was searching for a Python style guide in terms of \"intermittent variables\" and readability. The code that I develope will be mainly used by non-programming-experts, so it should be easy to read, but on the other hand, I would like to learn standard Python style. A simple example: I guess in this case, Version 2 is not really hard to read, but I hope you know what I mean.", "abstract": ""}, "answers": [{"id": 49457514, "score": 0, "vote": 0, "content": "The correct words are either intermediate variable or temporary variable. I tend more towards the style in version 1 of your example code, so I use them a lot, but I also tend to prefer more descriptive variable names when I use them. One benefit of version 2 of your code is that this isn't really necessary, since the nested function calls already describe what's happening. There should be no significant performance difference in creating a few temporary variables. The memory allocation and processing required to execute the two different versions of your code are virtually identical.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/1318799/tool-to-enforce-python-code-style-standards", "keywords": [], "tags": ["python", "coding-style"], "question": {"id": 1318799, "title": "Tool to enforce python code style/standards", "content": "I'm trying to find a tool to check for coding style in python. For PHP I've seen there is the Code Sniffer, and a small perl script used by Drupal. Is there such a tool for python code?", "abstract": ""}, "answers": [{"id": 1318812, "score": 12, "vote": 0, "content": "pylint and pyflakes would be a good start. pylint in particular is very configurable, and you can enforce quite a few things with it.", "abstract": ""}, {"id": 1318939, "score": 36, "vote": 0, "content": "In the past I've mainly use PyLint - it can highlight when you used an undefined variable, when you import things without using them and so on. It can be a bit verbose, complaining about things like lines being over 80 character long, variable not matching to specific regex's, classes having too few public methods, methods missing docs-trings. For example, for script.. PyLint generates the following messages: They are all valid complaints, but I tend to disable a lot of the convention and refactoring messages. You can disable specific messages, either as comments in your code: ..or as command line arguments to the PyLint command: With the above messages disabled, it generates the following messages for the above code: PyLint also generates a \"code report\", including how many lines of code/comments/docstring/whitespace the file has, number of messages per-category, and gives your code a \"score\" - 10 being no messages, 0 generally being a syntax error Another option is PyFlakes, which I find a little less excessively-verbose (I've recently started using it in place of PyLint). Again using the above script, PyFlakes gives the following messages: The final option I use is pep8.py, which as the name suggests enforces PEP8. It is by far the most.. pedantic script, enforcing things like correct blank-lines before/after functions/classes, spacing around code, correct 4-space indentation and so on.. Running on the code above, it produces the following: It is mostly enforces stylistic things like correct whitespace, it does not do much static-analysis of the code like PyLint or PyFlakes, so I use pep8.py in conjunction with either PyLint or PyFlakes. pep8.py was originally announced on the python mailing list here, but the download link in this is now dead.. There's a github mirror by cburroughs, with a few minor fixes at github.com/cburroughs/pep8.py, or you can grab the unmodified version from an older revision PyChecker is another option, although I haven't use it", "abstract": ""}, {"id": 14256707, "score": 4, "vote": 0, "content": "Found this stackoverflow question while searching for a pep8 style enforcement tool when taking over an existing (legacy) project. https://github.com/hhatto/autopep8 will automagically convert all the source code to confirm with pep8. Tried it on my legacy project and it works great.  So I thought I would update this answer here in SO.", "abstract": ""}, {"id": 1318807, "score": 2, "vote": 0, "content": "Theres a script called reindent.py thats sometimes included in your system's python distribution which will go through and re-indent all your code to the recommended 4 spaces indenting. Heres a copy of it in case you can't find it in your distribution: http://www.koders.com/python/fid24D30FCD2CE388C67CB980EF55630D25970CFB96.aspx?s=cdef%3Aparser", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/356161/python-coding-standards-best-practices", "keywords": [], "tags": ["python", "coding-style"], "question": {"id": 356161, "title": "Python coding standards/best practices", "content": "In python do you generally use PEP 8 -- Style Guide for Python Code as your coding standards/guidelines?  Are there any other formalized standards that you prefer?", "abstract": ""}, "answers": [{"id": 356426, "score": 5, "vote": 0, "content": "To add to bhadra's list of idiomatic guides: Checkout Anthony Baxter's presentation on Effective Python Programming (from OSON 2005). An excerpt:", "abstract": ""}, {"id": 356192, "score": 15, "vote": 0, "content": "I follow the Python Idioms and Efficiency guidelines, by Rob Knight. I think they are exactly the same as PEP 8, but are more synthetic and based on examples. If you are using wxPython you might also want to check Style Guide for wxPython code, by  Chris Barker, as well.", "abstract": ""}, {"id": 7051259, "score": 1, "vote": 0, "content": "I follow the PEP8, it is a great piece of coding style.", "abstract": ""}, {"id": 356238, "score": 156, "vote": 0, "content": "\"In python do you generally use PEP 8 -- Style Guide for Python Code as your coding standards/guidelines? Are there any other formalized standards that you prefer?\" As mentioned by you follow PEP 8 for the main text, and PEP 257 for docstring conventions Along with Python Style Guides, I suggest that you refer the following:", "abstract": ""}, {"id": 684233, "score": 8, "vote": 0, "content": "I stick to PEP-8 very closely. There are three specific things that I can't be bothered to change to PEP-8. Avoid extraneous whitespace immediately inside parentheses, brackets or braces. Suggested: spam(ham[1], {eggs: 2}) I do this anyway:  spam( ham[ 1 ], { eggs: 2 } ) Why?  30+ years of ingrained habit is snuggling ()'s up against function names or (in C) statements keywords.  Starting with Fortran IV in the 70's. Use spaces around arithmetic operators: Suggested:  x = x * 2 - 1 I do this anyway: x= x * 2 - 1 Why?  Gries' The Science of Programming suggested this as a way to emphasize the connection between assignment and the variable who's state is being changed. It doesn't work well for multiple assignment or augmented assignment, for that I use lots of spaces. For function names, method names and instance variable names Suggested:  lowercase, with words separated by underscores as necessary to improve readability. I do this anyway: camelCase Why?  20+ years of ingrained habit of camelCase, starting with Pascal in the 80's.", "abstract": ""}, {"id": 356305, "score": 5, "vote": 0, "content": "PEP 8 is good, the only thing that i wish it came down harder on was the Tabs-vs-Spaces holy war.  Basically if you are starting a project in python, you need to choose Tabs or Spaces and then shoot all offenders on sight. ", "abstract": ""}, {"id": 356183, "score": 4, "vote": 0, "content": "I follow it extremely rigorously.  The only god before PEP-8 is existing code bases.", "abstract": ""}, {"id": 356169, "score": 2, "vote": 0, "content": "Yes, I try to follow it as closely as possible. I don't follow any other coding standards.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/2815272/common-coding-style-for-python", "keywords": [], "tags": ["python", "coding-style", "naming-conventions", "indentation", "column-width"], "question": {"id": 2815272, "title": "Common coding style for Python?", "content": "I'm pretty new to Python, and I want to develop my first serious open source project. I want to ask what is the common coding style for python projects. I'll put also what I'm doing right now. 1.- What is the most widely used column width? (the eternal question)\nI'm currently sticking to 80 columns (and it's a pain!) 2.- What quotes to use? (I've seen everything and PEP 8 does not mention anything clear)\nI'm using single quotes for everything but docstrings, which use triple double quotes. 3.- Where do I put my imports?\nI'm putting them at file header in this order. 4.- Can I use \"import whatever.function as blah\"?\nI saw some documents that disregard doing this. 5.- Tabs or spaces for indenting?\nCurrently using 4 spaces tabs. 6.- Variable naming style?\nI'm using lowercase for everything but classes, which I put in camelCase. Anything you would recommend?", "abstract": ""}, "answers": [{"id": 2815333, "score": 2, "vote": 0, "content": "1.- Most everyone has a 16:9 or 16:10 monitor now days. Even if they don't have a wide-screen they have lots of pixels, 80 cols isn't a big practical deal breaker like it was when everyone was hacking at the command line in a remote terminal window on a 4:3 monitor at 320 X 240. I usually end the line when it gets too long, which is subjective. I am at 2048 X 1152 on a 23\" Monitor X 2. 2.- Single quotes by default so you don't have to escape Double quotes, Double quotes when you need to embed single quotes, and Triple quotes for strings with embedded newlines. 3.- Put them at the top of the file, sometimes you put them in the main function if they aren't needed globally to the module. 4.- It is a common idiom to rename some modules. A good example is the following. but the preferred way to import just a class or function is from module import xxx with the optional as yyy if needed 5.- Always use SPACES! 2 or 4 as long as no TABS 6.- Classes should up UpperCaseCamelStyle, variables are lowercase sometimes lowerCamelCase or sometimes all_lowecase_separated_by_underscores, as are function names. \"Constants\" should be ALL_UPPER_CASE_SEPARATED_BY_UNDERSCORES When in doubt refer to the PEP 8, the Python source, existing conventions in a code base. But the most import thing is to be internally consistent as possible. All Python code should look like it was written by the same person when ever possible.", "abstract": ""}, {"id": 2815436, "score": 1, "vote": 0, "content": "Since I'm really crazy about \"styling\" I'll write down the guidelines that I currently use in a near 8k SLOC project with about 35 files, most of it matches PEP8. PEP8 says 79(WTF?), I go with 80 and I'm used to it now. Less eye movement after all! Docstrings and stuff that spans multiple lines in '''. Everything else in ''. Also I don't like double quotes, I only use single quotes all the time... guess that's because I came form the JavaScript corner, where it's just easier too use '', because that way you don't have to escape all the HTML stuff :O At the head, built-in before custom application code. But I also go with a \"fail early\" approach, so if there's something that's version depended(GTK for example) I'd import that first. Depends, most of the times I go with import foo and from foo import, but there a certain cases(e.G. the name is already defined by another import) were I use from foo import bar as bla too. 4 Spaces. Period. If you really want to use tabs, make sure to convert them to spaces before committing when working with SCM. BUT NEVER(!) MIX TABS AND SPACES!!! It can AND WILL introduce horrible bugs. some_method or foo_function, a CONSTANT, MyClass. Also you can argue about indentation in cases where a method call or something spans multiple lines, and you can argue about which line continuation style you will use. Either surround everything with () or do the \\ at the end of the line thingy. I do the latter, and I also place operators and other stuff at the start of the next line. Also I have some guidelines for comparison operations, I always use is(not) to check against None True False and I never do an implicit boolean comparison like if foo:, I always do if foo is True:, dynamic typing is nice but in some cases I just want to be sure that the thing does the right thing!  Another thing that I do is to never use empty strings! They are in a constants file, in the rest of the code I have stuff like username == UNSET_USERNAME or label = UNSET_LABEL it's just more descriptive that way! I also have some strict whitespace guidelines and other crazy stuff, but I like it(because I'm crazy about it), I even wrote a script which checks my code:\nhttp://github.com/BonsaiDen/Atarashii/blob/master/checkstyle WARNING(!): It will hurt your feelings! Even more than JSLint does... But that's just my 2 cents.", "abstract": ""}, {"id": 2815311, "score": 20, "vote": 0, "content": "PEP 8 is pretty much \"the root\" of all common style guides. Google's Python style guide has some parts that are quite well thought of, but others are idiosyncratic (the two-space indents instead of the popular four-space ones, and the CamelCase style for functions and methods instead of the camel_case style, are pretty major idiosyncrasies). On to your specific questions: 1.- What is the most widely used column width? (the eternal question)\n  I'm currently sticking to 80 columns\n  (and it's a pain!) 80 columns is most popular 2.- What quotes to use? (I've seen everything and PEP 8 does not mention\n  anything clear) I'm using single\n  quotes for everything but docstrings,\n  which use triple double quotes. I prefer the style you're using, but even Google was not able to reach a consensus about this:-( 3.- Where do I put my imports? I'm putting them at file header in this\n  order. import sys import -rest of python\n  modules needed- import whatever import -rest of\n  application modules-  Yes, excellent choice, and popular too. 4.- Can I use \"import whatever.function as blah\"? I saw some\n  documents that disregard doing this. I strongly recommend you always import modules -- not specific names from inside a module.  This is not just style -- there are strong advantages e.g. in testability in doing that.  The as clause is fine, to shorten a module's name or avoid clashes. 5.- Tabs or spaces for indenting? Currently using 4 spaces tabs. Overwhelmingly most popular. 6.- Variable naming style? I'm using lowercase for everything but classes,\n  which I put in camelCase. Almost everybody names classes with uppercase initial and constants with all-uppercase.", "abstract": ""}]}]