[{"link": "https://stackoverflow.com/questions/69095606/adding-optional-arguments-to-a-function", "keywords": [], "tags": ["python-3.x", "type-hinting", "optional-parameters"], "question": {"id": 69095606, "title": "Adding optional arguments to a function", "content": "I am working on a project where I'm supposed to add new features to an existing codebase. As part of this, I need to add an optional argument to one of the functions but just adding the optional argument is causing some of my unit tests to fail. The function looks like the following initially: After adding another optional argument it looks like this: The only change I'm making in the codebase is adding this optional argument and it is causing some of my unit tests to fail. I was wondering if someone knows what might be the reason ?", "abstract": ""}, "answers": [{"id": 69095633, "score": 5, "vote": 0, "content": "Optional[list] means that the argument can either be a list or None. You are still required to pass it from the caller. If you want an argument that can be omitted you should use a default value, for example: assuming that None means an omitted argument in your function logic. Starting with Python 3.10, you can use the | operator to get rid of Union and Optional keywords:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/9867562/pass-kwargs-argument-to-another-function-with-kwargs", "keywords": [], "tags": ["python"], "question": {"id": 9867562, "title": "pass **kwargs argument to another function with **kwargs", "content": "I do not understand the following example, let's say I have these functions: Why is #1 the right solution and #2 the wrong one? **kwargs is basically a dict, so if I want to pass down the argument to openX I think the correct way would be without ** and just giving the dict. But Python obviously doesn't like the second one and tells me I gave 3 instead of 2 arguments. So what's the reason behind this?", "abstract": ""}, "answers": [{"id": 68700672, "score": 3, "vote": 0, "content": "The following code use kwargs and transfer it to another function: yields:", "abstract": ""}, {"id": 56791194, "score": 30, "vote": 0, "content": "Expanding on @gecco 's answer, the following is an example that'll show you the difference: Here you can see how unpacking a dictionary works, and why sending an actual dictionary fails", "abstract": ""}, {"id": 9867675, "score": 251, "vote": 0, "content": "In the second example you provide 3 arguments: filename, mode and a dictionary (kwargs). But Python expects: 2 formal arguments plus keyword arguments. By prefixing the dictionary by '**' you unpack the dictionary kwargs to keywords arguments. A dictionary (type dict) is a single variable containing key-value pairs. \"Keyword arguments\" are key-value method-parameters. Any dictionary can by unpacked to keyword arguments by prefixing it with ** during function call.", "abstract": ""}, {"id": 9867656, "score": 2, "vote": 0, "content": "For #2\nargs will be only a formal parameter with dict value, but not a keyword type parameter. If you want to pass a keyword type parameter into a keyword argument\nYou need to specific ** before your dictionary, which means  **args check this out for more detail on using **kw http://www.saltycrane.com/blog/2008/01/how-to-use-args-and-kwargs-in-python/", "abstract": ""}, {"id": 9867669, "score": 16, "vote": 0, "content": "The ** syntax tells Python to collect keyword arguments into a dictionary. The save2 is passing it down as a non-keyword argument (a dictionary object). The openX is not seeing any keyword arguments so the **args doesn't get used. It's instead getting a third non-keyword argument (the dictionary). To fix that change the definition of the openX function.", "abstract": ""}, {"id": 9867582, "score": 1, "vote": 0, "content": "Because a dictionary is a single value. You need to use keyword expansion if you want to pass it as a group of keyword arguments.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/67402942/python-optional-arguments", "keywords": [], "tags": ["python", "function", "arguments", "parameter-passing"], "question": {"id": 67402942, "title": "python: optional arguments", "content": "I would like to obtain a function that works like this: Operation should be an optional argument that specifies the operation to be performed. By default, it should consider the addition operation. I was not able to achieve this using *args and **kwargs, probably because I didn't actually get how they work. Thank you Edit: Sorry I was making a stupid mistake. Thanks anyway.", "abstract": ""}, "answers": [{"id": 67403023, "score": 1, "vote": 0, "content": "you can use optional arguments:", "abstract": ""}, {"id": 67402968, "score": 3, "vote": 0, "content": "You just need to provide a default value for the parameter. *args lets you collect arbitrary positional arguments in a single tuple named args. **kwargs works the same, but for keyword arguments, collecting them in a dict: **kwargs is typically used when you just need to pass an unknown set of arguments on to another function call. In your case here, you know that an argument named operation is to be used, so you can specify it by name in the parameter list. You can also require that it be passed as a keyword argument, like so: Now operations(a, b, 'subtraction') is illegal; it must be called like operations(a, b) or operations(a, b, operation='subtraction').", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/64723092/call-function-with-multiple-optional-arguments-of-different-types", "keywords": [], "tags": ["python", "python-3.x"], "question": {"id": 64723092, "title": "Call function with multiple optional arguments of different types", "content": "I have already checked this post and this post, but couldn't find a good way of sorting the problem of my code out. I have a code as follows: Then I create \"f\" and call \"fun\" function: The output is: which is correct, but if I do: I get the following error: Apparently, python confuses the string argument \"April\" with the list, how do I fix it?", "abstract": ""}, "answers": [{"id": 64723146, "score": 5, "vote": 0, "content": "By default, the first argument passed to the function will be assigned to the first parameter. If you want to assign the first argument to the second (or n:th) parameter, you must give it as keyword argument. See, for example The type of the arguments do not matter, but the order you used in the function definition.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/62270103/pass-an-optional-parameter-based-on-value-in-python3", "keywords": [], "tags": ["python", "python-3.x", "parameters", "boto3"], "question": {"id": 62270103, "title": "Pass an optional parameter based on value in Python3", "content": "I have a parameter that can be None or a String. In case it is None, I cannot pass it as parameter, as the library does not support None values nor empty strings. The library does not accept dictionaries as input neither. On the other side, I don't really want to write such a horrible alternative! So as you can guess, this is calling a Boto3 api.", "abstract": ""}, "answers": [{"id": 62270153, "score": 3, "vote": 0, "content": "You could try using keyword argument expansion:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/14017996/is-there-a-way-to-pass-optional-parameters-to-a-function", "keywords": [], "tags": ["python"], "question": {"id": 14017996, "title": "Is there a way to pass optional parameters to a function?", "content": "Is there a way in Python to pass optional parameters to a function while calling it and in the function definition have some code based on \"only if the optional parameter is passed\"", "abstract": ""}, "answers": [{"id": 14018011, "score": 83, "vote": 0, "content": "http://docs.python.org/2/tutorial/controlflow.html#default-argument-values I find this more readable than using **kwargs. To determine if an argument was passed at all, I use a custom utility object as the default value:", "abstract": ""}, {"id": 31139183, "score": 19, "vote": 0, "content": "", "abstract": ""}, {"id": 36364285, "score": 2, "vote": 0, "content": "You can specify a default value for the optional argument with something that would never passed to the function and check it with the is operator: then as long as you do not do func(_NO_DEFAULT) you can be accurately detect whether the argument was passed or not, and unlike the accepted answer you don't have to worry about side effects of ** notation:", "abstract": ""}, {"id": 14018432, "score": 116, "vote": 0, "content": "The Python 2 documentation, 7.6. Function definitions gives you a couple of ways to detect whether a caller supplied an optional parameter. First, you can use special formal parameter syntax *. If the function definition has a formal parameter preceded by a single *, then Python populates that parameter with any positional parameters that aren't matched by preceding formal parameters (as a tuple). If the function definition has a formal parameter preceded by **, then Python populates that parameter with any keyword parameters that aren't matched by preceding formal parameters (as a dict). The function's implementation can check the contents of these parameters for any \"optional parameters\" of the sort you want. For instance, here's a function opt_fun which takes two positional parameters x1 and x2, and looks for another keyword parameter named \"optional\".  Second, you can supply a default parameter value of some value like None which a caller would never use. If the parameter has this default value, you know the caller did not specify the parameter. If the parameter has a non-default value, you know it came from the caller.", "abstract": ""}, {"id": 14018060, "score": 7, "vote": 0, "content": "If you want give some default value to a parameter assign value in (). like (x =10). But important is first should compulsory argument then default value.    eg.  (y, x =10)    but  (x=10, y) is wrong ", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/50495738/is-there-a-way-to-pass-optional-parameters-through-two-functions", "keywords": [], "tags": ["python"], "question": {"id": 50495738, "title": "Is there a way to pass optional parameters through two functions?", "content": "Question \"Is there a way to pass optional parameters to a function?\" describes how default keyword parameters are used. I have two functions, one of which calls the other, and I want to be able to detect if the outer function was called with an optional parameter: This prints: Foo() could be written with special logic to detect whether the optional parameter is passed, but is there a pythonic way to pass an optional parameter with its optionality preserved without using extra logic? The default has to be defined at the inner function because it could be called directly.  I could also define the same default for inner and outer functions, but that's a bit ugly (violates DRY) when the default is more complex than an integer.", "abstract": ""}, "answers": [{"id": 50496246, "score": 1, "vote": 0, "content": "Perhaps just set the default argument in both places: Otherwise use kwargs which I tend to avoid for being hard to maintain:", "abstract": ""}, {"id": 50495950, "score": 0, "vote": 0, "content": "None is an object in Python (see here) This means that it is a valid argument, when you pass None to bar. That's why it does not trigger the default parameter value 5. I don't know anything else in Python, which may do so.", "abstract": ""}, {"id": 50495917, "score": 2, "vote": 0, "content": "One thing that you could do is use the **kwargs syntax to allow for any keyword arguments to be passed through, and then just raise errors if there are any extra keywords that don't mean anything (or alternatively, just cleanly ignore them, though that confuses users in case they make a typo and no error occurs). In the case of cleanly ignoring them: Basically, the **kwargs lets you pass in any keyword arguments like foo(opt = 3)  and puts them all in a dict. The downside to this is that you cannot call it like foo(3). If you want to go by placement arguments instead of keyword arguments, you can do *args which gives a tuple of the arguments, but then you are unable to call it with the keyword specified. You cannot do both, unfortunately.", "abstract": ""}, {"id": 50495832, "score": 1, "vote": 0, "content": "Since opt is not specified, it defaults to None as you have seen. This gives a definition to opt, and it does not remember or retain any property that it is a default value, so no, implementing logic here is mandatory for the required result. ", "abstract": ""}, {"id": 50495831, "score": 0, "vote": 0, "content": "In foo you call bar with opt. This overwrites the default value of opt inside bar.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/49583152/passing-an-optional-function-and-optional-parameters-to-another-function-in-py", "keywords": [], "tags": ["python", "python-3.x", "typeerror", "args"], "question": {"id": 49583152, "title": "Passing an optional function (and optional parameters) to another function in Python?", "content": "I'm new to learning Python and have enough under my belt to start attempting a beginner's Tic-Tac-Toe program. My issue is thus: I want to have a generic input function called getInput() which will get input from the user, strip trailing white space from that input, and THEN, if a function was passed to it via the optional parameter \"specialTest\", getInput() will run the input through this provided function and return the output which the specialTest function spat out. Sometimes this specialTest function will need additional arguments besides the user input. Assume for my purposes that the user input will always be the first argument and is required, and that any additional args will come afterwards. I tried to implement this situation via *args, and I got it working if the specialTest function had no additional arguments. But the first time I try to feed it additional arguments, it fails. So for example, getInput(\"Age?\", specialTest=int) works. It prompts for user input and feeds it through the int() function, finally returning the output as an integer. But when I try to pass getInput() a function which has an additional argument - an ordered dictionary which contains strings as keys and dictionaries as values - the program fails with TypeTypeError: getInput() got multiple values for argument 'specialTest'. What needs to be adjusted to get this working as intended? Code:", "abstract": ""}, "answers": [{"id": 49583388, "score": 1, "vote": 0, "content": "In order to support supplying the same parameter via a positional or keyword argument, Python converts any keyword arguments that can be into positional arguments.  That creates the conflict in your example.  Syntactically, what you want can be achieved by simply omitting the argument: Or you can resolve the ambiguity with a \u201ckeyword-only\u201d argument: Then the keyword argument cannot be converted, so there is no collision.  (This can be emulated in Python\u00a02 by using **kw to accept arbitrary keyword arguments and then checking that only the expected one is actually provided.) But the question you should be asking is \u201cHow can I preset some arguments to a function used as a callback?\u201d, to which the answer is either a lambda: or functools.partial: With either of these, you don\u2019t need TestArgs at all.  The partial approach doesn\u2019t support supplying trailing positional arguments (like varargs), but your nametoMove doesn\u2019t actually want those anyway (as established in the comments).  So in all the approaches above you omit the *.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/46739019/is-it-possible-to-pass-the-same-optional-arguments-to-multiple-functions", "keywords": [], "tags": ["python", "python-3.x", "function", "optional-arguments"], "question": {"id": 46739019, "title": "Is it possible to pass the same optional arguments to multiple functions?", "content": "I want to ask if there is a way to prevent unnecessary duplicate of code when passing the same arguments into a function's optional arguments. Hopefully the following example provides a good idea of what I am trying to do: As you can see, f1 and f2 only differ in the arg1 passed into f and afterwards I call them with the same variables for the same optional arguments.\nIt is fine when the code is short, but when I have over 10 optional arguments, it becomes unnecessarily long and redundant.\nIs it possible to do something like so I get a more succinct and easy to read code?", "abstract": ""}, "answers": [{"id": 46739365, "score": 1, "vote": 0, "content": "To answer the question you asked, the answer is yes. You can do almost exactly what you want using keyword argument unpacking. If I'm reading your intent correctly, though, the essence of your question is wanting to pass new first arguments with the same successive arguments to a function. Depending on your use case, the wrapper function g may be unnecessary. Obviously, if the first argument continues incrementing by one, a for loop is in order. Obviously, if you are never using the optional_1 parameter, you do not need to include it. But, moreover, if you find yourself using numbered arguments, there is a good chance you really should be working with tuple unpacking instead of keyword unpacking: You may also be interested in researching functools.partial, as well, which can take the place of your wrapper function g, and allow this:", "abstract": ""}, {"id": 46739096, "score": 2, "vote": 0, "content": "Any function with multiple optional arguments is a bit smelly because: You can apply a refactoring to extract the whole argument list into an Object and have the function work on that object. This works really well if you can find a unifying name that describes your argument list and fits whatever metaphor you are using around the function. You can even invert the call so that the function becomes a method of the Object, so you get some encapsulation.", "abstract": ""}, {"id": 46739060, "score": 0, "vote": 0, "content": "You use key-value pairs as function argsuments, for this purpose you can use *args and **kwargs:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/43279256/multiple-optional-arguments-python", "keywords": [], "tags": ["python-3.x", "optional-arguments"], "question": {"id": 43279256, "title": "Multiple optional arguments python", "content": "So I have a function with several optional arguments like so: Optarg1 & optarg2 are usually used together and if these 2 args are specified then optarg3 is not used.  By contrast, if optarg3 is specified then optarg1 & optarg2 are not used.  If it were one optional argument it'd be easy for the function to \"know\" which argument to use:  My question is how to I \"tell\" the function which optional argument to use when there's multiple optional arguments and not all of them are always specified?  Is parsing the arguments with **kwargs the way to go? ", "abstract": ""}, "answers": [{"id": 43280020, "score": 17, "vote": 0, "content": "**kwargs is used to let Python functions take an arbitrary number of keyword arguments and then ** unpacks a dictionary of keyword arguments. Learn More here", "abstract": ""}, {"id": 43279359, "score": 18, "vote": 0, "content": "If you assign them in the call of the function you can pre-empt which parameter you are passing in. ", "abstract": ""}]}]