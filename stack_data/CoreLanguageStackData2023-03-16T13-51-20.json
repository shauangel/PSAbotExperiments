[
  {
    "link": "https://stackoverflow.com/questions/68736719/shouldnt-shallow-copy-create-an-object-with-different-id-in-python",
    "keywords": [],
    "tags": [
      "python",
      "list",
      "shallow-copy"
    ],
    "question": {
      "id": 68736719,
      "title": "Shouldn&#39;t shallow copy create an object with different id in python?",
      "content": "I am trying to learn the concept of deep copy and shallow copy. I understand that list1  and list2 would be references to the same memory, therefore id(list1[0]) will be equal to id(list2[0]). But shouldn't id(list1) be different from id(list2) as both are different objects of class list.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 68737463,
        "score": 1,
        "vote": 0,
        "content": "In python, assignment never copies data. You just get a new name that references the same value. There are basically three cases: Assignment: just a new name that points to the same object. copy.copy the object itself is copied, but members of the object are not. So a shallow copy of a list will be a new list, have a new ID but will point to the same objects in memory for its elements as the original list. copy.deepcopy recursively copies everything. Good resources:\nhttp://www.pythontutor.com/visualize.html#mode=edit Ned Batchelder, Facts and myths about python names and values https://youtu.be/_AEJHKGk9ns",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/73328857/does-python-copy-objects-on-instance-attribute-assignment",
    "keywords": [],
    "tags": [
      "python",
      "memory",
      "bigdata"
    ],
    "question": {
      "id": 73328857,
      "title": "Does Python copy objects on instance attribute assignment?",
      "content": "Consider some Python 3 code where we have a very large object, and I need to store a reference to this object within a class due to third-party libraries. In this case, the object df is a very large numpy array (>20 GB) and my system's memory is already almost maxed out. Does assigning df as an instance attribute duplicate the memory required, or simply act as a reference to the existing object? In code: I'm hitting some memory issues later on and trying to debug where it might be coming from. My intuition tells me that Python knows to not copy the object, however if we do something like del df then instance.df is still defined.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 73328910,
        "score": 0,
        "vote": 0,
        "content": "Does Python make a copy of objects on assignment? This is because in Python, variables (names) are just references to individual objects. When you assign dict_a = dict_b, you are really copying a memory address (or pointer, if you will) from dict_b to dict_a. There is still one instance of that dictionary. In your example, df and instance.df is the same thing of dict_a and dict_b, which is only holding the reference of the instance. How to delete every reference of an object in Python? No no no. Python has a garbage collector that has very strong territory issues - it won't mess with you creating objects, you don't mess with it deleting objects. Simply put, it can't be done, and for a good reason. This is by design and intentional, delete the variable of df, would not eliminate the existence of the instance, it only remove the reference from you df, therefore, as long as instance.df is still holding the instance, you could still access it even you deleted the variable df.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/72219980/how-to-copy-a-class-object-in-python",
    "keywords": [],
    "tags": [
      "python",
      "class",
      "object",
      "copy"
    ],
    "question": {
      "id": 72219980,
      "title": "How to copy a class object in python",
      "content": "This is quite a simple question, however I cannot seem to figure out how to do it. I simply need to make a copy of a class object, for example: I tried to do both A.copy() and A.deepcopy(), but I get \"'Foo' object has no attribute 'copy'\"\nThis may be a super simple fix, however I have never used the copy module before and am not aware of why this may be an issue.\nFor reference, I need the copied object to be mutable (without affecting the original) so I figured the best way would be to use .deepcopy().",
      "abstract": ""
    },
    "answers": [
      {
        "id": 72220352,
        "score": 1,
        "vote": 0,
        "content": "You're right,  using deepcopy from the built-in copy module is the way to go, since you want the exact replica of the Object Foo. Here, passing the object Foo(5) will return a Foo object, passing it without any args will return __name__.Foo",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/23580974/copy-all-but-one-part-of-an-object-in-python",
    "keywords": [],
    "tags": [
      "python",
      "copy"
    ],
    "question": {
      "id": 23580974,
      "title": "copy all but one part of an object in python",
      "content": "How would one copy.deepcopy() all but one part of an object in python? I have an object which is basically a wrapper with some settings and some extra bits of metadata around a potentially huge pandas DataFrame. The DataFrame can contain arbitrarily huge amounts of data. I want to make a copy the object that consists of a shallow copy of the dataframe and a deepcopy() of the settings and metadata (both of which which can be mutable objects). I don't know at run time if all of the settings and metadata exist when the copy is needed. There is also the possibility to people may set additional parts of the object using my_object.extra_setting. This means that I can not just explicitly deepcopy all the parts of the object except the large dataframe. The class is: And in pseudocode the copy method is:",
      "abstract": ""
    },
    "answers": [
      {
        "id": 68746763,
        "score": 0,
        "vote": 0,
        "content": "I doubt you're still looking for an answer but I was looking for an answer and this is my solution for anyone memo is a dictionary passed to deepcopy to help it remember what it has already copied, to avoid copying an item (referenced in several places) multiple times. By placing a shallow copy of lots_of_data in the memo dictionary deepcopy will use that value instead of trying to deepcopy lots_of_data itself.",
        "abstract": ""
      },
      {
        "id": 23581063,
        "score": 3,
        "vote": 0,
        "content": "your class needs to implement __deepcopy__(), which will do the selection of the fields to copy.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/65636981/how-to-make-deep-copy-of-a-specificmutable-object",
    "keywords": [],
    "tags": [
      "python",
      "python-3.x",
      "python-chess"
    ],
    "question": {
      "id": 65636981,
      "title": "How to make deep copy of a specific(mutable) object?",
      "content": "I'm trying to make a chess engine. However, I ran into an error where: That isn't good,especially the legal move part. I traced back to the source of the error: I know about Python's quirky mutability, and though I know I can copy a list like this: type(board) returns<class 'chess.Board'>.\nHow to I make a full copy of board?\nThanks in advance.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 65637038,
        "score": 1,
        "vote": 0,
        "content": "Generally, Python has a library named 'copy' which implements deepcopy of the basic objects. Try to use from copy import deepcopy and override the __eq__ function of Board. For more information, take a look at How can I create a copy of an object in Python?",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/56478210/how-to-selectively-deep-copy-in-python",
    "keywords": [],
    "tags": [
      "python",
      "python-3.x",
      "deep-copy"
    ],
    "question": {
      "id": 56478210,
      "title": "How to selectively deep-copy in python?",
      "content": "I have multiple python classes.  Objects of one of the classes (say, class1)has a large amount of data in it (it will not be altered during runtime). Another class (say class2) has a member variable which maps to one of the objects of class1.  Assume class1 and class2 have other both mutable and immutable member variables.   Now i want too do a deepcopy of an object of class2.  It will also make a deepcopy of the class1 object in class2.  but to save memory, i want to avoid that. how do i do this?   please help me with this...\nthanks in Advance",
      "abstract": ""
    },
    "answers": [
      {
        "id": 56478412,
        "score": 4,
        "vote": 0,
        "content": "Use the __deepcopy__ hook method to customize how your objects are deep-copied.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/4794244/how-can-i-create-a-copy-of-an-object-in-python",
    "keywords": [],
    "tags": [
      "python",
      "oop",
      "object",
      "copy"
    ],
    "question": {
      "id": 4794244,
      "title": "How can I create a copy of an object in Python?",
      "content": "I would like to create a copy of an object. I want the new object to possess all properties of the old object (values of the fields). But I want to have independent objects. So, if I change values of the fields of the new object, the old object should not be affected by that.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 46939443,
        "score": 139,
        "vote": 0,
        "content": "So, if I change values of the fields of the new object, the old object should not be affected by that. You mean a mutable object then. In Python 3, lists get a copy method (in 2, you'd use a slice to make a copy): Shallow copies are just copies of the outermost container. list.copy is a shallow copy: You don't get a copy of the interior objects. They're the same object - so when they're mutated, the change shows up in both containers. Deep copies are recursive copies of each interior object. Changes are not reflected in the original, only in the copy. Immutable objects do not usually need to be copied. In fact, if you try to, Python will just give you the original object: Tuples don't even have a copy method, so let's try it with a slice: But we see it's the same object: Similarly for strings: and for frozensets, even though they have a copy method: Immutable objects should be copied if you need a mutable interior object copied. As we can see, when the interior object of the copy is mutated, the original does not change. Custom objects usually store data in a __dict__ attribute or in __slots__ (a tuple-like memory structure.) To make a copyable object, define __copy__ (for shallow copies) and/or __deepcopy__ (for deep copies). Note that deepcopy keeps a memoization dictionary of id(original) (or identity numbers) to copies. To enjoy good behavior with recursive data structures, make sure you haven't already made a copy, and if you have, return that. So let's make an object: And copy makes a shallow copy: And deepcopy now makes a deep copy:",
        "abstract": ""
      },
      {
        "id": 4794254,
        "score": 285,
        "vote": 0,
        "content": "To get a fully independent copy of an object you can use the copy.deepcopy() function. For more details about shallow and deep copying please refer to the other answers to this question and the nice explanation in this answer to a related question.",
        "abstract": ""
      },
      {
        "id": 52160051,
        "score": 24,
        "vote": 0,
        "content": "Shallow copy with copy.copy() Deep copy with copy.deepcopy() Documentation: https://docs.python.org/3/library/copy.html Tested on Python 3.6.5.",
        "abstract": ""
      },
      {
        "id": 48906171,
        "score": -2,
        "vote": 0,
        "content": "I believe the following should work with many well-behaved classed in Python: (Of course, I am not talking here about \"deep copies,\" which is a different story, and which may be not a very clear concept -- how deep is deep enough?) According to my tests with Python 3, for immutable objects, like tuples or strings, it returns the same object (because there is no need to make a shallow copy of an immutable object), but for lists or dictionaries it creates an independent shallow copy. Of course this method only works for classes whose constructors behave accordingly. Possible use cases: making a shallow copy of a standard Python container class.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/42143461/make-copy-of-object-instance-in-python",
    "keywords": [],
    "tags": [
      "python",
      "oop"
    ],
    "question": {
      "id": 42143461,
      "title": "Make copy of object instance in Python",
      "content": "I would like to make a copy of a python class object which does not change when the original object changes. Here is my simple working example: From my understanding, when I set B = A, this just means B points to the object A. Hence when I change A it changes B as well. Is it possible to instead make B a new instance with all the same properties as A, but does not change when I change A? In my above example, I would like the value for B to stay at 1 when I increment A.  If A and B were lists instead of objects I would write B = list(A). I guess I am asking if there is a similar method for class objects? Thank you in advance for your help!",
      "abstract": ""
    },
    "answers": [
      {
        "id": 42143502,
        "score": 14,
        "vote": 0,
        "content": "If you want to make a copy then one way is using deepcopy: All = does is to assign another reference to the same object in memory. The deepcopy creates a whole new object in memory with the values of A and B will reference it. if you do the following you will see different prints:",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/29398336/how-to-copy-instances-of-a-custom-defined-class-in-python-3-3",
    "keywords": [],
    "tags": [
      "python",
      "python-3.x"
    ],
    "question": {
      "id": 29398336,
      "title": "How to copy instances of a custom defined class in Python 3.3?",
      "content": "I am trying to copy instances of a custom class in Python 3.3, similar to how dict.copy() and list.copy() work. How do I go about this? Here is an example of my custom class:",
      "abstract": ""
    },
    "answers": [
      {
        "id": 29398459,
        "score": 17,
        "vote": 0,
        "content": "In general, you can use the copy module to produce copies of Python objects. copy.copy() will produce a shallow copy; a new instance is created but all attributes are simply copied over. If any of your attributes are mutable and you mutate those objects you'll see those changes reflected on both objects. copy.deepcopy() will produce a copy recursively; any mutable objects will themselves be cloned. If your class implements a __copy__ method it'll be used to create a shallow copy of the object; return a new instance with attributes copied over and altered as needed. Similarly, you can implement a __deepcopy__ method to implement a custom deep copy method; it'll be passed the memo state, pass this on to recursive copy.deepcopy() calls. Note that you cannot use this to copy a class object however. Classes are meant to be singletons; you don't need to create a copy in that case. You can use subclassing instead, or a class factory function, to produce distinct class objects.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/26014618/shallow-deep-copy-in-python",
    "keywords": [],
    "tags": [
      "python"
    ],
    "question": {
      "id": 26014618,
      "title": "Shallow/Deep copy in python",
      "content": "From my understanding of deep/shallow copying. Shallow copying assigns a new identifier to point at the same object. Deep copying creates a new object with equivalent value : My confusion is if x=y creates a shallow copy and the copy.copy() function also creates a shallow copy of the object then: why it is creating a new object if it is supposed to be a shallow copy?",
      "abstract": ""
    },
    "answers": [
      {
        "id": 26014778,
        "score": 1,
        "vote": 0,
        "content": "A shallow copy creates a new list object and copies across all the references contained in the source list. A deep copy creates new objects recursively. You won't see the difference with just immutable contents. Use nested lists to see the difference: A new copy of the outer list was created, but the contents of the original and the copy are still the same objects. The deep copy doesn't share contents with the original; the a list has been recursively copied as well.",
        "abstract": ""
      }
    ]
  }
]