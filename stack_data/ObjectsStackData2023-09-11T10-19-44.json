[{"link": "https://stackoverflow.com/questions/15078935/what-does-class-mean-in-java", "keywords": [], "tags": ["java", "class", "methods"], "question": {"id": 15078935, "title": "What does .class mean in Java?", "content": "What does .class mean in Java? For example, if I created a class called Print. What does Print.class return?", "abstract": ""}, "answers": [{"id": 15078951, "score": 193, "vote": 0, "content": "When you write .class after a class name, it references the class literal -\njava.lang.Class object that represents information about a given class. For example, if your class is Print, then Print.class is an object that represents the class Print on runtime. It is the same object that is returned by the getClass() method of any (direct) instance of Print.", "abstract": ""}, {"id": 65536977, "score": 2, "vote": 0, "content": "Adding to the above answers: Suppose you have a a class named \"myPackage.MyClass\". Assuming that is in classpath, the following statements are equivalent. Similarly, the following are also equivalent. If JVM loads a type, a class object representing that type will be present in JVM. we can get the metadata regarding the type from that class object which is used very much in reflection package. MyClass.class is a shorthand method which actually points to the Class object representing MyClass. As an addendum, some information about Class<?> reference which will be useful to read along with this as most of the time, they are used together. Class<?> reference type can hold any Class object which represents any type. This works in a similar fashion if the Class<?> reference is in method argument as well. Please note that the class \"Class\" does not have a public constructor. So you cannot instantiate \"Class\" instances with \"new\" operator.", "abstract": ""}, {"id": 15079000, "score": 72, "vote": 0, "content": ".class is used when there isn't an instance of the class available. .getClass() is used when there is an instance of the class available. object.getClass() returns the class of the given object. For example: This will output: This is the class of the string object :)", "abstract": ""}, {"id": 40016621, "score": 1, "vote": 0, "content": "A class literal is an expression consisting of the name of a class, interface, array, or primitive type, or the pseudo-type void, followed by a '.' and the token class.\nOne of the changes in JDK 5.0 is that the class java.lang.Class is generic, java.lang.Class Class<T>, therefore:  References here: https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html http://docs.oracle.com/javase/tutorial/extra/generics/literals.html http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.8.2", "abstract": ""}, {"id": 39602167, "score": 15, "vote": 0, "content": "Just to clarify, this '.class' method is not referring to the bytecode file you see after compiling java code nor a confusion between the concepts of Class vs. Object in OOP theory. This '.class' method is used in Java for code Reflection. Generally you can gather meta data for your class such as the full qualified class name, list of constants, list of public fields, etc, etc. Check these links (already mentioned above) to get all the details:\nhttps://docs.oracle.com/javase/tutorial/reflect/class/classNew.html\nhttps://docs.oracle.com/javase/8/docs/api/java/lang/Class.html Normally you don't plan on using Reflection right away when you start building your project. It's something that you know you need after trying to manage already working code. Many times you need it to manage multiple instances of your program. Maybe you want to identify each particular 'clone' to determine if something is already defined, or count the number of functions, or just simply log the details of a particular instance of your class.", "abstract": ""}, {"id": 37002946, "score": 4, "vote": 0, "content": "If there is no instance available then .class syntax is used to get the corresponding Class object for a class otherwise you can use getClass() method to get Class object. Since, there is no instance of primitive data type, we have to use .class syntax for primitive data types.", "abstract": ""}, {"id": 33557056, "score": 6, "vote": 0, "content": "If an instance of an object is available, then the simplest way to get its Class is to invoke Object.getClass() The .class Syntax If the type is available but there is no instance then it is possible to obtain a Class by appending .class to the name of the type. This is also the easiest way to obtain the Class for a primitive type. See: docs.oracle.com about class", "abstract": ""}, {"id": 27302481, "score": 2, "vote": 0, "content": "I think the key here is understanding the difference between a Class and an Object.  An Object is an instance of a Class.  But in a fully object-oriented language, a Class is also an Object.  So calling .class gets the reference to the Class object of that Class, which can then be manipulated.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/67741364/what-is-a-class", "keywords": [], "tags": ["c#", "programming-languages", "theory"], "question": {"id": 67741364, "title": "What is a class?", "content": "I can imagine the first reaction when you read the title of my question: \"How can you have such a high reputation here and ignore what a class is?\" My point is the following: until now I have always worked with C++, Delphi, Java, ... and there it's quite simple: a class is a type definition of an object. You need to reserve some space in memory to start using it (hence the constructor) and afterwards, don't forget to free that memory (if your programming language does not support garbage collection). Today, however, I had a problem concerning type definitions and constants in C#, and I fell on this URL, mentioning such pieces of source code: In order to use this, you just need to do: And you can use Months as a constant. But here's my question: where's the constructor? If this class is the type definition of an object, which object are we talking about? So, if I understand correctly, C# is based on the idea \"Everything is a class\", but in order to make this work, the C# inventors have extended the definition of a class, so now we get (C# definition): A class is one of the following: Can somebody finish the definition?", "abstract": ""}, "answers": [{"id": 67741511, "score": 1, "vote": 0, "content": "When you are creating a instance of a class you are allocating memory (using the keyword new)\nConstants are created not in runtime, they are created in compile time and stored in the assembly metadata. So when you are accessing a constant you will be not accessing an instance of a class - you will be accessing the constant from the metadata directly.\nHave a look at this post:\nHow are C# const members allocated in memory?", "abstract": ""}, {"id": 67741476, "score": 1, "vote": 0, "content": "You don't need this using. using is to make namespaces available.", "abstract": ""}, {"id": 67741436, "score": 1, "vote": 0, "content": "This is a pretty common practice in C#. Classes are often used to create \"sacks\" to hold constants, or commonly as a entity or dto object. These are usually made without a user defined constructor. If a class does not have a constructor, one is defined at compile time which amounts to an empty constructor: This answer goes into much further detail:\nC# class without constructor", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/9921676/what-does-class-mean-in-java", "keywords": [], "tags": ["java", "syntax"], "question": {"id": 9921676, "title": "What does Class&lt;?&gt; mean in Java?", "content": "My question is as above. Sorry, it's probably a duplicate but I couldn't find an example with the <?> on the end. Why would you not just use Class as the parameter?", "abstract": ""}, "answers": [{"id": 65536846, "score": 2, "vote": 0, "content": "It means, the Class reference type can hold any Class object which represents any type. If JVM loads a type, a class object representing that type will be present in JVM. we can get the metadata regarding the type from that class object which is used very much in reflection package. Suppose you have a a class named \"myPackage.MyClass\". Assuming that is in classpath, the following statements are equivalent. This works in a similar fashion if the Class<?> reference is in method argument as well. Please note that the class \"Class\" does not have a public constructor. So you cannot instantiate \"Class\" instances with \"new\" operator.", "abstract": ""}, {"id": 9921745, "score": 155, "vote": 0, "content": "Class is a parameterizable class, hence you can use the syntax Class<T> where T is a type. By writing Class<?>, you're declaring a Class object which can be of any type (? is a wildcard). The Class type is a type that contains meta-information about a class.  It's always good practice to refer to a generic type by specifying his specific type, by using Class<?> you're respecting this practice (you're aware of Class to be parameterizable) but you're not restricting your parameter to have a specific type. Reference about Generics and Wildcards: http://docs.oracle.com/javase/tutorial/java/generics/wildcards.html Reference about Class object and reflection (the feature of Java language used to introspect itself): https://www.oracle.com/technetwork/articles/java/javareflection-1536171.html", "abstract": ""}, {"id": 9921710, "score": 3, "vote": 0, "content": "That means a Class with a type of anything (unknown).  You should read java generics tutorial to get to understand it better", "abstract": ""}, {"id": 9921720, "score": 10, "vote": 0, "content": "It means your Class reference can hold a reference to any Class object. It's basically the same as \"Class\" but you're showing other people who read your code that you didn't forget about generics, you just want a reference that can hold any Class object. Bruce Eckel, Thinking in Java:  In Java SE5, Class<?> is preferred over plain Class, even though they\n  are equivalent and the plain Class, as you saw, doesn\u2019t produce a\n  compiler warning. The benefit of Class<?>                is that it\n  indicates that you aren\u2019t just using a non-specific class reference by\n  accident, or out of ignorance. You chose the non-specific version.", "abstract": ""}, {"id": 9922089, "score": 100, "vote": 0, "content": "This <?> is a beast. It often leads to confusion and errors, because, when you see it first, then you start believing, <?> is a wildcard for any java type. Which is .. not true. <?> is the unknown type, a slight and nasty difference. It's not a problem when you use it with Class. Both lines work and compile: But - if we start using it with collections, then we see strange compiletime errors: Our List<?> is not a collection, that is suitable for just any type of object. It can only store one type: the mystic \"unkown type\". Which is not a real type, for sure.", "abstract": ""}, {"id": 9921749, "score": 5, "vote": 0, "content": "In generics, an unknown type is represented by the wildcard character \"?\". Read here for official example.", "abstract": ""}, {"id": 9921704, "score": 9, "vote": 0, "content": "It's a generics literal. It means that you don't know the type of class this Class instance is representing, but you are still using the generic version.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/13775226/what-is-the-difference-between-classes-and-object-instances", "keywords": [], "tags": ["oop", "language-agnostic"], "question": {"id": 13775226, "title": "What is the difference between classes and object instances?", "content": "A class is a binding of methods and variables in a single unit.\n  An object is an instance of a class. These are definitions for classes and objects in programming books. My friend said that a class is a blueprint of an object. An object is a real \"thing\" of a blueprint. He has given an example: if Company is a class, INFOSYS, CTS, and TCS etc are objects. Whenever I think about classes and objects, these definitions confuse me. If channel is a class, what would be objects for the class? If water is a class, what would be objects of class? Can you clarify?", "abstract": ""}, "answers": [{"id": 63899511, "score": 0, "vote": 0, "content": "Now object can be anything like bus,car,mobile or man etc. For example take samsung smartphone.\nNow samsung smartphone is an object we know that.\nTo create that samsung smartphone we need a blueprint(Class).\nNow there are going to be thousands samsung smartphones now they can be of different color like blue or black and also they can have different ram or storage.\nNow samsung smartphone with blue color, 4gb ram , 256gb storage this is one instance of that object. So, Class is blueprint of object and instance can be consider as single occurrence of  object.", "abstract": ""}, {"id": 36237048, "score": 0, "vote": 0, "content": "Class Object", "abstract": ""}, {"id": 13775269, "score": 17, "vote": 0, "content": "If channel is a class, Start Sports, BBC, and ESPN are its objects.\nIf water is a Class, \"Fresh Lime Water\" and \"Soup\" are its objects. Although you might find this explanation vague, this is the answer that I could think of. Here is how you can learn about and distinguish classes: Say you have a class \"CAR\" Its objects are Hyundai, Ford, Suzuki. \nIt will have the same methods but different designs -> this is how you can relate objects and classes with the real world.", "abstract": ""}, {"id": 29071410, "score": -1, "vote": 0, "content": "The term class and object are definetly related to ine another, but each term hold its own distinct meaning. Let's start out by explaining what the term class means.  Class refers to the actuall writtten piece of code which is used to define the behaviour of any given class.so a class us a static pice of code that consists if atributes which do not change during the execution of a orogram.While Object refers to an actual instance instance of a class.Every ibhect must belong to a class", "abstract": ""}, {"id": 28196939, "score": 0, "vote": 0, "content": "An object has a limited lifespan,object are created and eventually destroyed. Also during that lifetime,the object may undergo significant change", "abstract": ""}, {"id": 21899775, "score": 0, "vote": 0, "content": "in grammar Common Noun is Class and Proper Noun is Object.", "abstract": ""}, {"id": 19513787, "score": 3, "vote": 0, "content": "I do not have much programming experience, but a friend of mine made a good example of defining a class and a object.\nI'll try my best to use human language as possible. Take an horse. What makes you know that this animal is an horse and not a... dog? Because it has four legs, it's a big animal, it's very strong and it can run. Well, you just defined a 'horse' class in your head!\nNow, you are going to see a white female horse called 'Pollyanna' and a black male horse called 'Demon'. As soon you see them you know that they are horses, so they belong to the 'horse' class.\nWhat makes them different? The sex and the color... Those are properties of the 'horse' class.\n'Pollyanna' and 'Demon' are two objects, they are the real thing, things you can actually touch and ride. Their properties, sex and color are also different. Pollyanna is white and female. Demon is black and male. Those defined properties are what distinguishes one object from the other. One horse from the other. But they still belong to the same class: they are always horses! More technical now... A class is a more abstract definition of something. A blueprint. An object is the real thing that belongs to that class. When you create a new object from a class you are instantiating an object (aka creating an instance). Hope this helps, and if it doesn't sorry... As I said before, I do not have much programming experience :) Gianluca", "abstract": ""}, {"id": 18928747, "score": -1, "vote": 0, "content": "An object is an identifiable entity with some characteristics and behavior. It represents an entity that can store data and its associated function. A class is a group of objects that share common properties and relationship. It represents a group of similar objects.", "abstract": ""}, {"id": 13780753, "score": 5, "vote": 0, "content": "A class specifies the behavior of its instances. A class is an instance of a class too (class for a class is named a \"metaclass\"). A class is an abstraction. You find a class by finding generic properties applying to a group of objects. Then a class is a template which defines the methods (behavior) and variables (state) to be included in a particular kind of object Recognition of classes (outside classroom) requires experience. Read anything from Alan Kay, he is the inventor of Object Technology, and one of the inventors of Smalltalk, the only pure objects environment as of today.", "abstract": ""}, {"id": 13776166, "score": 0, "vote": 0, "content": "In the real world, you'll often find many individual objects all of the same kind. There may be thousands of other channels in existence, all of the same make and model. Each channel was built from the same set of blueprints and therefore contains the same components. In object-oriented terms, we say that your channel is an instance of the class of objects known as channel. A class is the blueprint from which individual objects are created. The design of this class is based on the previous discussion of Channel objects. The fields typr , employeeCount represent the object's state, and the methods (setType, addEmployer, removeEmployer etc.) define its interaction with the outside world. You may have noticed that the Channel class does not contain a main method. That's because it's not a complete application; it's just the blueprint for Channels that might be used in an application. The responsibility of creating and using new Chennel objects belongs to some other class in your application. The output of this test prints for the two channels: type :NEWS    employee count: 500 type :SPORT   employee count: 300", "abstract": ""}, {"id": 13775279, "score": 3, "vote": 0, "content": "I'll give you a classic explanation, you can find different versions of this all over the place. A class is like a blueprint. Say you want to build a car, the first thing you would need is a plan, This is the class. The plan will describe 'methods' such as brake and hoot. It will also describe the various components of the car. These are variables. A car object is an instantiation of a car class. You can have lots of these for one car class. For example: Now, depending on the language you are using classes themselves can be objects (this is the case in Python). Think of it this way: All blueprints have some stuff in common. That common stuff is described in the blueprint's class (which is in itself a blueprint).  Then on the point of 'water' as a class you can approach it in a few ways depending on what you want to do: way 1: rather have a class called Liquid with variables describing stuff like viscosity, smell, density, volume, etc. Water would be an instance of this. So would orange juice way 2: say you were putting together a game with a bunch of blocks that would be made up of different terrain. You could then have classes such as Grass, Water, Rock, etc (think Minecraft). Then you can have a water class instance (a water object) occupy a specific position on the map. ", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/62013688/what-does-classes-are-not-objects-mean", "keywords": [], "tags": ["c++", "oop", "design-patterns", "prototype"], "question": {"id": 62013688, "title": "What does &quot;classes are not objects&quot; mean?", "content": "From the GoF book:  Prototype is particularly useful with static languages like C++, where\n  classes are not objects, and little or no type information is\n  available at run-time. It's less important in languages like Smalltalk\n  or Objective C that provide what amounts to a prototype (i.e., a class\n  object) for creating instances of each class. This pattern is built\n  into prototype-based languages like Self [US87], in which all object\n  creation happens by cloning a prototype. What is meant by \"classes are not objects\"? Isn't that always the case?  What does it mean for a class to be an object?", "abstract": ""}, "answers": [{"id": 62014199, "score": 2, "vote": 0, "content": "What is meant by \"classes are not objects\"? Exactly what it sounds like. In some languages, classes themselves are also objects that you can send messages to. For example, in order to create an instance of a class (i.e. a new object), you send the +alloc message to the class (and then you typically send the resulting object an -init message: Isn't that always the case? No. See above. See also Is class an object in object oriented language and Are classes objects in Objective-C?. Examples besides Objective-C include Smalltalk, Scheme, and Dylan. What does it mean for a class to be an object? It means that you can work with a class much as you would any other object. Details vary depending on the language. In Objective-C, a class is an object because it's an instance of the Class meta-class. Objective-C makes a distinction between instance methods, i.e. the messages that can be sent to an instance of the class, and class methods, i.e. the messages that can be sent to the class itself. For example, it's very common to have a shared instance of a class and a class method that gets that shared object: Notice that we're not actually allocating an object here, just asking the class for the shared instance (which the class manages) that may or may not already exist (if it doesn't, the class generally creates it).", "abstract": ""}, {"id": 62013754, "score": 8, "vote": 0, "content": "In some languages, when you declare a class, the language-runtime creates an object in memory to represent that class and its properties; you can then call methods on that class-object to find out properties of the class or create objects of that class, and so on. C++ doesn't have that feature (largely because C++ is designed to minimize runtime overhead); there is no object representing the class.  (The closest it comes to that is RTTI's type_info object, but that is really just an object containing some information about the class, and not a full representation of the class itself)", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/1215881/the-difference-between-classes-objects-and-instances", "keywords": [], "tags": ["java", "class", "object", "instance"], "question": {"id": 1215881, "title": "The difference between Classes, Objects, and Instances", "content": "What is a class, an object and an instance in Java?", "abstract": ""}, "answers": [{"id": 56577150, "score": 4, "vote": 0, "content": "Class : Structure Object : Physical Manifestation Instance : each object created from class Reference : Address of Object", "abstract": ""}, {"id": 55390732, "score": 0, "vote": 0, "content": "A class is a blueprint that is needed to make an object(= instance). The difference between an object and an instance is, an object is a thing and an instance is a relation. In other words, instance describes the relation of an object to the class that the object was made from.", "abstract": ""}, {"id": 19482299, "score": 15, "vote": 0, "content": "I like Jesper's explanation in layman terms By improvising examples from Jesper's answer, myHouse and myCar are objects  myHouse is an instance of House (relates Object-myHouse to its Class-House) \nmyCar is an instance of Car in short \"myHouse is an instance of Class House\" which is same as saying \"myHouse is an Object of type House\" ", "abstract": ""}, {"id": 48547179, "score": 3, "vote": 0, "content": "Honestly, I feel more comfortable with Alfred blog definitions: Object: real world objects shares 2 main characteristics, state and behavior. Human have state (name, age) and behavior (running, sleeping). Car have state (current speed, current gear) and behavior (applying brake, changing gear). Software objects are conceptually similar to real-world objects: they too consist of state and related behavior. An object stores its state in fields and exposes its behavior through methods. Class: is a \u201ctemplate\u201d / \u201cblueprint\u201d that is used to create objects. Basically, a class will consists of field, static field, method, static method and constructor. Field is used to hold the state of the class (eg: name of Student object). Method is used to represent the behavior of the class (eg: how a Student object going to stand-up). Constructor is used to create a new Instance of the Class. Instance: An instance is a unique copy of a Class that representing an Object. When a new instance of a class is created, the JVM will allocate a room of memory for that class instance. Given the next example: For case 1, there are two instances of the class Person, but both instances represent the same object. For case 2, there are two instances of the class Person, but each instance represent a different object. So class, object and instance are different things. Object and instance are not synonyms as is suggested in the answer selected as right answer.", "abstract": ""}, {"id": 1216676, "score": 100, "vote": 0, "content": "Java (and any other programming language) is modeled in terms of types and values.  At the theoretical level, a value is a representation for some quantum of information, and a type is a set of values.  When we say value X is an instance of type Y, we are simply saying that X is a member of the set of values that is the type Y. So that's what the term \"instance\" really means: it describes a relationship not a thing. The type system of the Java programming language supports two kinds of types, primitive types and reference types.  The reference types are further divided into the classes and array types.  A Java object is an instance of a reference type. An object is a class instance or an array. (JLS 4.3.1) That's the type theoretic view.   In practice, most Java developers treat the words \"instance\" and \"object\" as synonyms.  (And that includes me then I'm trying to explain something quickly.)  And most developers use the word \"value\" rather than \"instance\" to refer to an instance of a primitive type.", "abstract": ""}, {"id": 37347101, "score": 1, "vote": 0, "content": "It has logical existence, i.e. no memory space is allocated when it is created. It is a set of objects. A class may be regarded as a blueprint to create objects.  It is created using class keyword A class defines the methods and data members that will be possessed by Objects.  It has physical existence, i.e. memory space is allocated when it is created. It is an instance of a class. An object is a unique entity which contains data members and member functions together in OOP language. It is created using new keyword An object specifies the implementations of the methods and the values that will be possessed by the data members in the class.", "abstract": ""}, {"id": 15971155, "score": 7, "vote": 0, "content": "Class is Data Type,You use this type to create object. Instance is Logical but object is Physical means occupies some memory. We can create an instance for abstract class as well as for interface, but we cannot create an\nobject for those. Object is instance of class and instance means representative of class i.e object. Instance refers to Reference of an object. Object is actually pointing to memory address of that instance. You can\u2019t pass instance over the layers but you can pass the object over the layers You can\u2019t store an instance but you can store an object A single object can have more than one instance. Instance will have the both class definition and the object definition where as in object it will have only the object definition. Syntax of Object: But for instance creation it returns only a pointer refering to an object, syntax is :", "abstract": ""}, {"id": 39315621, "score": -3, "vote": 0, "content": "Class is a template or type. An object is an instance of the class. For example: Tweet is a class and newTweet is an object of the class.", "abstract": ""}, {"id": 35758564, "score": -2, "vote": 0, "content": "While the above answers are correct, another way of thinking about Classes and Objects would be to use real world examples: A class named Animal might contain objects like Cat, Dog or Fish. An object with a title of Bible would be of class Book, etc. Classes are general, objects are specific. This thought example helped me when I was learning Java.", "abstract": ""}, {"id": 34702794, "score": -2, "vote": 0, "content": "The definition \"Object is an instance of a class\", is conceptually wrong, but correct as per implementation. Actually the object oriented features are taken from the real life, for focusing the mind of programmer from more to less. In real life classes are designed to manage the object.For eg- we human beings have a caste, religion,nationality and much more. These casts, religion, nationality are the classes and have no existence without human beings. But in implementation there is no existence of objects without classes.\nObject- Object is an discrete entity having some well defined attribute. Here discrete mean something that makes it unique from other. Well defined attribute make sense in some context. \nClass- Classification of object having some common behaviour or objects of some common type.", "abstract": ""}, {"id": 26950432, "score": 2, "vote": 0, "content": "The concept behind classes and objects is to encapsulate logic into single programming unit. Classes are the blueprints of which objects are created. Here an example of a class representing a Car: You can create instances of the object Car like this: I have taken the example from this tutorial", "abstract": ""}, {"id": 17542117, "score": 3, "vote": 0, "content": "In java, the objects are spawned on heap memory. These require reference to be pointed and used in our application. The reference has the memory location of the object with which we can use the objects in our application. A reference in short is nothing but a name of the variable which stores the address of the object instantiated on a memory location. An instance is a general term for object. FYI, Object is a class. For Example, For the above code snippet, ref is the reference for an object of class A generated on heap.", "abstract": ""}, {"id": 1215887, "score": 31, "vote": 0, "content": "A class is basically a definition, and contains the object's code. An object is an instance of a class for example if you say  the class is the String class, which describes the object (instance) word. When a class is declared, no memory is allocated so class is just a template. When the object of the class is declared, memory is allocated.", "abstract": ""}, {"id": 1486212, "score": 118, "vote": 0, "content": "A class is a blueprint which you use to create objects. An object is an instance of a class - it's a concrete 'thing' that you made using a specific class. So, 'object' and 'instance' are the same thing, but the word 'instance' indicates the relationship of an object to its class. This is easy to understand if you look at an example. For example, suppose you have a class House. Your own house is an object and is an instance of class House. Your sister's house is another object (another instance of class House). The class House describes the concept of what a house is, and there are specific, concrete houses which are objects and instances of class House. Note: This is exactly the same in Java as in all object oriented programming languages.", "abstract": ""}, {"id": 1486195, "score": 2, "vote": 0, "content": "Any kind of data your computer stores and processes is in its most basic representation a row of bits. The way those bits are interpreted is done through data types. Data types can be primitive or complex. Primitive data types are - for instance - int or double. They have a specific length and a specific way of being interpreted. In the case of an integer, usually the first bit is used for the sign, the others are used for the value. Complex data types can be combinations of primitive and other complex data types and are called \"Class\" in Java. You can define the complex data type PeopleName consisting of two Strings called first and last name. Each String in Java is another complex data type. Strings in return are (probably) implemented using the primitive data type char for which Java knows how many bits they take to store and how to interpret them. When you create an instance of a data type, you get an object and your computers reserves some memory for it and remembers its location and the name of that instance. An instance of PeopleName in memory will take up the space of the two String variables plus a bit more for bookkeeping. An integer takes up 32 bits in Java. Complex data types can have methods assigned to them. Methods can perform actions on their arguments or on the instance of the data type you call this method from. If you have two instances of PeopleName called p1 and p2 and you call a method p1.getFirstName(), it usually returns the first name of the first person but not the second person's.", "abstract": ""}, {"id": 1216696, "score": 2, "vote": 0, "content": "If you have a program that models cars you have a class to represent cars,\nso in Code you could say: someCar is now an instance of the class Car. If the program is used at a repairshop and the someCar represents your car in their system, then your car is the object. So Car is a class that can represent any real world car\nsomeCar is an instance of the Car class and\nsomeCare represents one real life object (your car) however instance and object is very often used interchangably when it comes to discussing coding", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/3686647/whats-the-best-way-to-define-the-words-class-and-object-to-someone-who-hasn", "keywords": [], "tags": ["java", "oop", "terminology"], "question": {"id": 3686647, "title": "What&#39;s the best way to define the words &quot;class&quot; and &quot;object&quot; to someone who hasn&#39;t used them?", "content": "My neighbor is taking \"Intro to Java\", and asked me to help explain a few of the first-day concepts.  I realized that since I do this everyday, I don't have the beginner's mind, and it's hard to relate some of this stuff from scratch. The one that's actually not trivial for me to explain is \"what the heck is a class?\" \nBest I have so far: A variable holds some kind of data; one variable might be a first name, another variable might be your weight in pounds.   A method is a function, it does stuff, and can do stuff with those variables.   A method might display your name on screen, or tell you how much weight you should lose to have a good BMI ratio. An object holds both variables and methods; one object might represent you, a second object might represent me. A class is kind of the blueprint or template that describes the methods and variables that will be in each object.  An object is an instantiated (instance of a) class; an object is something, while the class is simply the plans to make that something. Continuing the example, we have a Person object, which is instantiated to hold Alice's data, and another Person object instantiated to hold Bob's data, and another for Carol, and so on.  How do I tune this example to make more sense, and/or what's a better approach?  The word \"instantiated\" feels too heavy at this point. (I think this is a useful question, but is obviously subjective; marked as community wiki.)", "abstract": ""}, "answers": [{"id": 52033978, "score": 0, "vote": 0, "content": "Class teaches Objects how to behave. \nA class is a blueprint for an object. It tells the virtual machine how to make an object of that particular type. Each object made from that class can have it\u2019s own values for the instance variables of that class.\nExample: You might use the Button class to make dozens of different buttons, and each button might have it\u2019s own color, size , shape , functionality.", "abstract": ""}, {"id": 3687577, "score": -1, "vote": 0, "content": "I would highly recommend telling him/her to buy a copy of a book called The Object-Oriented Thought Process by Matt Weisfeld. It's a really good conceptual introduction to OO. I've lent out my copy to a few people who were just getting into OO and they really liked it. ", "abstract": ""}, {"id": 3687169, "score": 3, "vote": 0, "content": "Object Oriented programming is about creating programs using as building blocks, \"things\" that exists in the real world, these real world things are called objects, hence object oriented For instance, if you're creating a Address Book program, you may define the following objects: Among many, many others. Those would be real life objects, and you describe your program in terms of these abstractions.  With that in mind you can start describing some concepts.  Class is used to define the characteristics an objects will have. A class is used only as a template, or a blueprint. For instance, for all the persons in your address book, you may say they all will have:  Etc.  An address may have:  And so on. As you can notice, a class me be defined in terms of other classes, for instance,  in this context, a person has one address.  An Object is a particular instance of a given class. When you add an entry to your address book, you create an object and fill in the attributes. So, this object is a class instantiated with data. Other entry in the address book are other objects with different data.  That shows the difference between them.  There are other relevant concepts in OOP that are worth listing, and interrelate with the concept of object and class:  Abstraction  You don't need to list all the attributes of a person, to use it. for instance, in this case, you don't care if that person is single or married, even when in real life, persons are either single or married.  Encapsulation Attributes from the person are hidden to other objects and are accessed through methods, this prevent from data corruption.   Polymorphism A different type may  respond differently to the same message or method. Inheritance classes may have subclasses and attributes and behavior which inherit the characteristics of the super classes. ", "abstract": ""}, {"id": 41313078, "score": 1, "vote": 0, "content": "A java class is the structure or blueprint of an object and object is the instance(memory creation) of a class. Example: Car is an object(real world entity).\nfirstly, make the structure or design of a Car it's class and when the design of car, to convert real world Car it's an Object. the Car(object) is working now base behalf of design of a car(class).", "abstract": ""}, {"id": 38561454, "score": 0, "vote": 0, "content": "An Object is a group of related data and functionality. What the group of data and functionality will consist of is defined in the class. Class is the design or specification of the object.", "abstract": ""}, {"id": 38259940, "score": 2, "vote": 0, "content": "A\u00a0class\u00a0is a blueprint/template which you use to create\u00a0objects. An object is an\u00a0instance\u00a0of a class. ", "abstract": ""}, {"id": 34523123, "score": 0, "vote": 0, "content": "", "abstract": ""}, {"id": 32048497, "score": 0, "vote": 0, "content": "Your question details have pretty good definitions of all the terms. Here's an analogy I found pretty useful - I've listed it in a kind of top-down approach: class Employee. This is a kind of, as you say, 'blueprint' or 'template' that contains generic details about all kinds of employees in an organization - let's consider the director, a project manager, a developer, a contractor, or a member of the housekeeping staff. They're all employees : hence, they're all instances of the class, or objects.  All the objects have certain attributes in common -\nthey're all allotted, say, an employee ID. They all draw a salary. They all have a designation. One could call these the member variables, as they exist for all objects, but their values are clearly different based on what object they're members of.  And finally, there are some functions that need to be performed for all employees - say onBoarding() or calculateSalary(). ", "abstract": ""}, {"id": 31436861, "score": 1, "vote": 0, "content": "Class can be defined as the blue print or template which defines attributes,actions,states for the entity and Object would be the one which would be implementation for the entity.", "abstract": ""}, {"id": 27679723, "score": -1, "vote": 0, "content": "I can say with an example: Animal, Human, car etc. Here Animal, Human, car considered as Class, Now consider Dog: Here Dog considered as Object, who is under Animal class. If we consider a dog, then its state are - name, breed, color, and the behavior are - barking,Eating, running, Sleeping. Now we can say, A class is a blue print of Animal class from which individual object is created. Here barking(), running(), eating(),Sleeping() etc. are method of the particular Dog object. I think it will be little easier to understand the difference between Class and object.", "abstract": ""}, {"id": 22733436, "score": 0, "vote": 0, "content": "We can also understand the concept of class and object as:\nas a class is a template so lets have following two examples:\nExample 1: a recipe of a cake is a template so its a class and cakes that are made \nfollowing recipe are the objects.\nExample 2: A brick maker is a class and bricks are objects", "abstract": ""}, {"id": 20451848, "score": 0, "vote": 0, "content": "class: custom variable type object: a variable, whose type is custom defined (if you don't count the built-in ones)", "abstract": ""}, {"id": 3688799, "score": 45, "vote": 0, "content": "A class and some class instances:  (public domain image hosted by wikipedia)", "abstract": ""}, {"id": 3686674, "score": 24, "vote": 0, "content": "Class : Object :: Blueprint : Building", "abstract": ""}, {"id": 3687537, "score": 1, "vote": 0, "content": "If your neighbor is into classical philosophy, classes are Plato's Forms and objects are the things we see everyday that are based on the Forms.", "abstract": ""}, {"id": 3687502, "score": 0, "vote": 0, "content": "Object is an instance of a class\nVariable is an instance of a type That given,a class can be something like \"type on steroids\":\n   it can have :\n        variables which can be from any type or objects from another class\n        methods,which \n            can operate on class variables in the same way as different types have their methods(for example +(bool,bool))\n            can have access to the class variables \n    and it's all defined by yourself! You can use the classes to model a problem in the optimal way.\nBut there are sometimes other ways to do it ;)(not only OOP)", "abstract": ""}, {"id": 3687381, "score": 1, "vote": 0, "content": "I always define them as blueprint and product. A blueprint describes the complete product in every detail, the product is the result that comes out of the machine.", "abstract": ""}, {"id": 3687170, "score": 3, "vote": 0, "content": "A class description is like a blueprint for a house. All the houses built from that blueprint are objects of that class. A given house is an instance. A tenant can be a changing variable in the house. An example of a method is the procedure by which the post office sends and receives messages (mail) to the house via its mailbox.", "abstract": ""}, {"id": 3686933, "score": 0, "vote": 0, "content": "You might find this talk by Guy L. Steele interesting:  http://video.google.com/videoplay?docid=-8860158196198824415#", "abstract": ""}, {"id": 3686898, "score": 0, "vote": 0, "content": "OOP is just one more way of representing Abstract Data Structures in programs. In object-oriented terminology, the type is called a class, and the variable with that type is called an object. More on type <-> class, variable <-> object correspondence.", "abstract": ""}, {"id": 3686708, "score": 3, "vote": 0, "content": "One of the examples I use during my java courses is the Human class. Everyone reading this is a Human (I least I hope so !), we all have our differences our resemblances but at the end we're all Human (After all). Each Human (known as an instance or object) has specific characteristics such as the eyes color or the voice which are the fields (you called that variables, but the right name would be fields). But the values are different from an Human instance to another. There is also a common knowledge, shared with the humanity, principles like the \"Pythagorean theorem\". This knowledge is common, it can be interpreted as a static field (I know it's an exaggeration) which means that this knowledge is not only contained in one human but in the humanity. Every Human can do things such as walking, speaking etc. this is known as method, walking is the same for everyone, but when I walk, not everyone walk. The act of walking only affects the Human instance which does this, but still it's defined by the Human class If you want to get deeper in OOP, Teaching OOP to non-programmers", "abstract": ""}, {"id": 3686783, "score": 3, "vote": 0, "content": "An object is a thing. A class is a category of things. \"Person\" is a class; you are an object, an instance of the Person class. Also, the word \"you\" can be thought of as a variable, since it refers to a Person, but not always the same Person.", "abstract": ""}, {"id": 3686765, "score": 1, "vote": 0, "content": "Class: Girl  Object : that girl, this girl, my girl...umm maybe not. Yea all girls should have the properties of a Girl (class in this case).", "abstract": ""}, {"id": 3686762, "score": 0, "vote": 0, "content": "If they are learning to program OO have them use BlueJ.  They should get the differences after walking through the first tutorial. You define the classes and when you instantiate them they actually appear at the bottom of the GUI at which point you can call methods on them. It really helps get the point through better than any analogy you want to try.  Even if you nail the analogy, it doesn't translate into code for someone who hasn't learned OO yet (even though for all of us it seems really natural and all these descriptions make great sense.)", "abstract": ""}, {"id": 3686731, "score": 2, "vote": 0, "content": "class:: Man or Woman object:: me, you ...", "abstract": ""}, {"id": 3686704, "score": 1, "vote": 0, "content": "If and only if he is familiar with Plato's Theory of Forms, you can make an analogy where classes are like Plato's forms and objects are like Plato's real world objects. See this post for a full description.", "abstract": ""}, {"id": 3686690, "score": 0, "vote": 0, "content": "Panda DNA is a class. A Panda running around, eating and performing Panda-like activities is an object.", "abstract": ""}, {"id": 3686676, "score": 13, "vote": 0, "content": "\"Car\" is a class. My car, sitting in my driveway, is an instance (object).", "abstract": ""}, {"id": 3686672, "score": 2, "vote": 0, "content": "class == cookie cutter, object == cookie.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/41371835/why-is-a-class-called-an-abstraction-of-an-object", "keywords": [], "tags": ["java", "object-oriented-analysis"], "question": {"id": 41371835, "title": "Why is a class called an abstraction of an object?", "content": "I understand that a class is essentially a blueprint of an object, but the idea that a class is an 'abstraction' of an object is a little hard for me to wrap my head around... If anyone could tell me the real meaning of the statement: \"A class is an abstraction of an object\", I'd be really grateful. My confusion is because this statement has been interpreted differently by different people... Does 'abstraction' mean: or does it mean that: Thanks in advance,\nAbhigyan", "abstract": ""}, "answers": [{"id": 41372543, "score": 1, "vote": 0, "content": "A class defines fields & behavior (methods). It is instantiated into objects, which hold concrete values for those fields. Abstraction as a term is used at many levels -- most commonly in regard of behavior. However in this regard it is being used of value. We could state more clearly: A class is an abstraction across the possible values of its instances. Example in pseudocode: As we see, class abstracts over values of its instances. ", "abstract": ""}, {"id": 41371883, "score": 3, "vote": 0, "content": "A class can be instantiated into objects.  It captures the characteristics that are common to all these objects.", "abstract": ""}, {"id": 41371880, "score": 5, "vote": 0, "content": "A class is a description of everything that will be in a certain type of object. For instance, a car will have a steering wheel, seats, dashboard, etc and functions such as accelerating, stopping etc. Each individual car is a car object, but the conceptual car is analogous to the class. Dealing with the basics of a system, and not the deep intricacies of that system? Somewhat, since a class does not usually describe exactly what goes into each field (for instance, the color of the steering wheel) Only an abstract class can be considered an abstraction of an object? No, this is more general that the abstract keyword in Java. Basically, a class is an abstraction because it describes what is created, whereas an object is created itself.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/13203532/what-exactly-is-a-class-and-an-object-in-java-please-explain-in-detail", "keywords": [], "tags": ["java", "class", "object"], "question": {"id": 13203532, "title": "What exactly is a class and an object in java, please explain in detail", "content": "I'm a beginner in java, and I've gone through various definitions of OOP concepts, but I've never really understood the concept of a class and object, so could someone please explain this to me. and please don't just say an object is an instance of a class , what exactly does that mean? examples would help", "abstract": ""}, "answers": [{"id": 13203793, "score": 0, "vote": 0, "content": "A class can be seen as a definition of an object; the idea of what makes up a type of object.  The object is an example of that class. Take a (real-world, not the OS) window, such as the one I'm looking out right now.  \"Window\" is a class - it has a defined operation (open()), and properties (height and width).  This particular window I'm looking out of (this instance of a Window; this object of the Window class) can be opened by turning a crank, and it is ~60 inches high and 30 inches wide.  In java:", "abstract": ""}, {"id": 13203636, "score": 0, "vote": 0, "content": "Okay first off I'd recommend reading The Java (tm) Tutorials, wouldn't hurt watching videos on Udacity too. So an object in this instance is the data type Integer and the primitive object is int. Each of id, major, age are instance variables of Student. Constructors are used to create objects, each time you initiate a constructor you are creating a new instance (every instance is different from the last).", "abstract": ""}, {"id": 13203727, "score": 0, "vote": 0, "content": "A Class is a definition of some thing. An Object is one of those things. One of the most common examples is a car. Say you have a class Car. That class defines everything about the car. Size, color, make, model, and other things that describe a car are called properties. A car can also do things, like move, accelerate, turn, reverse, shift. These are called methods. They are what the car can do (some languages call these \"actions\", which I think is a better term). When you combine properties and methods into a group, you would call that a class, because together they define a car (or whatever you are defining). An object is an instance of a car. That is the simplest way to put it. But what is an instance? According to wikipedia: In object-oriented programming an instance is an occurrence or a copy of an object. That probably seems cyclical, calling an instance an object and vice versa. But technically, an object is a location in memory having a value that can be referenced elsewhere. To make things simpler, we combine the two to mean the same thing. An instance is an object, an object is an instance.  Perhaps the shortest way I can put it is like this: A class is a definition, and an object is something that fits that definition.  Since you tagged your question with Java, I will continue my example in Java. Let's go back to the car. The code for what we described above could look something like this: I've labeled each group of things here. We have the properties at the top; the things describe a car. And we have the methods at the bottom; the things that a car can do. But in the middle I put something else. It is something that is required to have in almost every class: the constructor. What a constructor does is it instantiates a class into an object. Using the definitions I made above, we can rewrite that last sentence like this: A constructor puts an occurrence of a class into a location in memory. \nHopefully this helps you understand classes a little better.", "abstract": ""}, {"id": 13203724, "score": 0, "vote": 0, "content": "Object Class", "abstract": ""}, {"id": 13203584, "score": 2, "vote": 0, "content": "In most OOP languages, an \"object\" is a data-structure upon which you can perform a fixed set of actions or operations and a \"class\" is the means used to define what data an object contains (or has access to) and what operations it can perform or can be performed upon it.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/2485360/do-i-correctly-understand-what-a-class-is", "keywords": [], "tags": ["oop", "class", "object"], "question": {"id": 2485360, "title": "Do I correctly understand what a class is?", "content": "I've had trouble finding a clear, concise laymans definition of a class. Usually, they give general ideas without specifically spelling it out, and I'm wondering if I'm understanding this correctly. As I understand it, a class is the set of code that controls an object. For example, in an app that has a button for 'Yes' and a button for 'No', and a text box for output, the code that tells the computer what to do when the user uses the Yes button is one class, the code for hitting No is another class, and an object is the two buttons and what they do together to influence the output box. Am I right, or am I confusing terms here? Thanks", "abstract": ""}, "answers": [{"id": 2485425, "score": 0, "vote": 0, "content": "From the definition of Class at Wikipedia: In object-oriented programming, a\n  class  is a construct that is used as\n  a blueprint  (or template) to create\n  objects  of that class. This blueprint\n  describes the state and behavior that\n  the objects of the class all share. An\n  object of a given class is called an\n  instance  of the class. The class that\n  contains (and was used to create) that\n  instance can be considered as the type\n  of that object, e.g. an object\n  instance of the \"Fruit\" class would be\n  of the type \"Fruit\". A class usually represents a noun,\n  such as a person, place or (possibly\n  quite abstract) thing - it is a model\n  of a concept within a computer\n  program. Fundamentally, it\n  encapsulates the state and behavior of\n  the concept it represents. It\n  encapsulates state through data\n  placeholders called attributes (or\n  member variables or instance\n  variables); it encapsulates behavior\n  through reusable sections of code\n  called methods. Your understanding of a Class isn't at all incorrect but to make things clear consider the following... The Yes and No buttons plus the TextBox are usually specified within a class taking for example code written in C# (Microsoft .NET Framework). Let's name this class MyClass. The actions the buttons cause are handled by what are called handlers (methods). You could write your code in such a way that when you click the Yes button something gets written in the TextBox. To instantiate MyClass you'd do the following: Hope you get the idea. I wrote usually above because this cenario you described could be implemented in a number of ways. OOP gives you plenty of ways to accomplish the same task. Besides the definition of Class I think that reading about Object Oriented Programming (OOP) can help you a lot to understand it even more. Take a look at Fundamental Concepts.", "abstract": ""}, {"id": 2485488, "score": 1, "vote": 0, "content": "At the very basis, there's procedural code: To make such pieces of code reusable, you make a function out of them: Now you can use that piece of code as often as you want, but you only had to write it once. Usually an application depends on a certain way of how pieces of code and variables have to work together. This data needs to be processed by that function, but cannot be processed by that other function. To help group these related parts together, there are classes. The function foo now has a variable data that is \"bundled\" with it in the same class. It can operate on that variable without having to worry about that it may be the wrong kind of data. Also there's no way that data can accidentally end up in function bar, which is part of another class. The only problem is, there's only one variable data here. The function is reusable, but it can only operate on one set of data. To solve this, you create objects (also called instances) from the class: instance1 and instance2 both behave exactly like class A, they both know how to perform function foo (now called an instance method) and they both hold a variable data (now called an instance variable or attribute), but that variable data can hold different data for both instances. That's the basics of classes and objects. How your particular \"OK\", \"Cancel\" dialog box is implemented is a different story. Both buttons could be linked to different methods of different classes, or just to different methods of the same class, or even to the same method of the same class. Classes are just a way to logically group code and data, how that's going to be used is up to you.", "abstract": ""}, {"id": 2485429, "score": 16, "vote": 0, "content": "A class is a kind of thing, an object is an actual thing.  So, in the real world, \"person\" is a class, you and I are objects (or instances) of that class. \"Car\" is a class, my 1996 beater Volvo station wagon is an object. Objects all have certain similarities in form and function because of the class they belong to.  When I say my station wagon is a \"car\", you have a pretty good idea of what it looks like, what it's used for, and what it can do.  But objects of a class can also differ from each other.  Just because something's a car doesn't tell you exactly what shape it is or how many seats it has or what color it is. In the example you gave, it's likely that the yes and no buttons are both objects of the class \"button\" (or some similar name) and that the differences in their behavior are due to changes added by the programmer without his or her bothering to create a new class.  However, it is possible that the programmer made the decision to make each type of button a subclass of the original class \"button\". What's a subclass?  Well, if you think of \"car\" as a class, it is obvious that there are several intermediate \"kinds\" of things between \"car\" and \"Larry's 1996 beater Volvo station wagon\".  These could be \"station wagon\" and \"Volvo station wagon\".  So my car would be an instance of \"Volvo station wagon\" which itself would be subclass of \"station wagon\" which would be a subclass of \"car\".  From the \"car\" part, we know a good deal about my object, from the \"station wagon\" part we learn a little more, and from the \"Volvo station wagon\" a little more still. The way in which classes and subclasses are arranged is a decision made by the programmer.  In my example above, another programmer might have made the classes \"car\", \"Volvos\", \"pre-Ford\", and \"Wagons\".  It depends on the problem you're trying to solve.", "abstract": ""}, {"id": 2485398, "score": 2, "vote": 0, "content": "In object-oriented programming, a class is a type for objects. An object is a bundle of data together with functionality that can operate in the context of that data; the definition of what the object is and does when it is first created is determined by its class. Like a type for data, the class of an object specifies what is common to all instances of that class. Instances, which are the objects themselves, then get to override that common baseline (otherwise there's not much point having distinct instances). In many OO systems, instances may or may not have new members that are not part of the class definition. What that means in the context of a specific object-oriented language is going to differ from language to language. But if you think of classes as types, and build on that, you won't go far wrong.", "abstract": ""}, {"id": 2485430, "score": 0, "vote": 0, "content": "You should look at some sample code, in your language of choice. Just reading about the concept of classes will not answer many questions. For example, I could tell you that a class is a \"blueprint\" for an object. Using this class, you can instantiate multiple such objects, each one of them (potentially) having unique attributes. But you didn't understand a thing, now, did you? Your example with the buttons is very limited. Classes have nothing to do with user interfaces or actions or whatever. They define a way of programming, just like functions/methods/whatever you want to call them do. So, to give a concrete example, here's a class that defines a ball, written in Python: Running this produces the expected output: However, there is much more to classes than I described here. Once you understand what a class is, you go on to learn about constructors, destructors, inheritance and a lot of other good stuff. Break a leg :)", "abstract": ""}, {"id": 2485414, "score": 0, "vote": 0, "content": "A class is a bunch of code that defines an entity in your application. There may be many such entities, but the behaviour of each is the same, as defined by the class. The class will typically define fields, whose contents are local to the instances (or objects) of that class. It is these fields that provide the objects with state and make them distinguishable from one another. To use your example, there might be a Button class that defines what a button is in your application. This class would then be instantiated twice to provide two objects: one for the \"No\" button and another for the \"Yes\" button. The Button class could have a Text field/property that defines what text it contains \u2013 this could be set to \"No\" and \"Yes\" on the appropriate Button instances to give them their different appearances. As for the click behaviour of the buttons, this would typically be implemented via the observer pattern, in which the subject class (Button in this case) maintains a list of separate \"observer\" objects which it notifies whenever some event occurs (i.e. when the button is clicked).", "abstract": ""}, {"id": 2485409, "score": 2, "vote": 0, "content": "This is going to be a very simplified explanation. A class is a set of functions and variables and is used to create objects. I think it's good to use real examples instead of dog / bark / talk etc. When you call 'new Email()' it creates a new object with those variables and functions. Then you can populate the variables and send it.", "abstract": ""}, {"id": 2485395, "score": 0, "vote": 0, "content": "In a language agnostic fasion, I would describe a class as being an object that contains related information. A person class would have methods like Talk(), Walk(), Eat(); and attributes like Height, Color, Language, etc. A class is like a blueprint of things that you can instantiate, and also procedures that are related to each other. If you have a Database class, you might have many methods related to databases that do all sorts of voodoo with a database. ", "abstract": ""}, {"id": 2485379, "score": 1, "vote": 0, "content": "A class is basically a way to organize your code. It allows you to put all of the code related to one abstraction (think \"concept\" or \"idea\") in one place. As an example  - in your example of an app, the Window with the two buttons, a text box, and some code for handling what happens when the user types in the information may be organized into a single class: something like \"PromptWindow\".  This class would be made up of multiple classes internally (two buttons, a textbox, etc) This would probably be used by some separate class, which would create an instance of the PromptWindow class, call a method on the class to show the window, then use the results.", "abstract": ""}]}]