[{"link": "https://stackoverflow.com/questions/7961499/best-way-to-loop-over-a-python-string-backwards", "keywords": [], "tags": ["python", "string", "optimization", "iterator", "reverse"], "question": {"id": 7961499, "title": "Best way to loop over a python string backwards", "content": "What is the best way to loop over a python string backwards? The following seems a little awkward for all the need of -1 offset: The following seems more succinct, but is it actually generate a reversed string so that there is a minor performance penalty?", "abstract": ""}, "answers": [{"id": 74247839, "score": 1, "vote": 0, "content": "If you care about performance, its best to not use reversed as this will generate a new string and an unnecessary function call. Instead, just iterate backwards through the string. Eg. This will find last newline in a string:", "abstract": ""}, {"id": 15531326, "score": 10, "vote": 0, "content": "EDIT: It has been quite some time since I wrote this answer. It is not a very pythonic or even efficient way to loop over a string backwards. It does show how one could utilize range and negative step values to build a value by looping through a string and adding elements in off the end of the string to the front of the new value. But this is error prone and the builtin function reversed is a much better approach. For those readers attempting to understand how reversed is implemented, take a look at the PEP, number 322, to get an understanding of the how and why. The function checks whether the argument is iterable and then yields the last element of a list until there are no more elements to yield. From the PEP: [reversed] makes a reverse iterator over sequence objects that support getitem() and len(). So to reverse a string, consume the iterator until it is exhausted. Without using the builtin, it might look something like, Consume the iterator either by looping, eg Or calling a constructor like: The reverse_string code is almost identical to the PEP with a check removed for simplicity's sake. In practice, use the builtin. ORIGNAL ANSWER: Here is a way to reverse a string without utilizing the built in features such as reversed. Negative step values traverse backwards.", "abstract": ""}, {"id": 61063653, "score": -1, "vote": 0, "content": "string reverse output is:\n!desrever eb dluohs gnirts sihT", "abstract": ""}, {"id": 45722226, "score": 1, "vote": 0, "content": "Python 3 with enumerate and reversed methods: You can use print(c) just for retrieving each character without the index.", "abstract": ""}, {"id": 37981758, "score": 2, "vote": 0, "content": "Reverse a String in Python using For Loop", "abstract": ""}, {"id": 31982365, "score": 0, "vote": 0, "content": "", "abstract": ""}, {"id": 7961516, "score": 5, "vote": 0, "content": "Yes, the second syntax shortcut creates an intermediate string and has an associated performance penalty.  The first version is better written as: Which is easy to comprehend. Neither reversed nor enumerate` need to make a copy of the string.  Also be careful about using string as a variable name, as it is also the name of a module in the standard library.", "abstract": ""}, {"id": 7961519, "score": 3, "vote": 0, "content": "Less code is usually faster in Python. Luckily, you don't have to guess: So the shorter code is a bit faster, but it comes with a memory overhead.", "abstract": ""}, {"id": 7961515, "score": 4, "vote": 0, "content": "I would use that. It is probably quite fast although there may be a slightly better way (but I doubt it). EDIT:\nActually, with a second test using a program I hacked together, reversed is probably the way to go.", "abstract": ""}, {"id": 7961542, "score": 2, "vote": 0, "content": "Will do what I think you want. It uses an iterator. This should work with anything that has __reveresed__() or __len__() and __getitem__() implemented. __getitem__() would have to take int arguments starting at 0.", "abstract": ""}, {"id": 7961520, "score": 5, "vote": 0, "content": "reversed takes an iterable and and returns an iterator that moves backwards. string[::-1] is fine, but it creates a new, reversed string instead. If you just want to iterate, then this will probably better: If you want to use the reversed string afterwards, creating it once will be better.", "abstract": ""}, {"id": 7961513, "score": 114, "vote": 0, "content": "Try the reversed builtin: The reversed() call will make an iterator rather than copying the entire string.  PEP 322 details the motivation for reversed() and its advantages over other approaches.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/869885/loop-backwards-using-indices", "keywords": [], "tags": ["python", "loops"], "question": {"id": 869885, "title": "Loop backwards using indices", "content": "I am trying to loop from 100 to 0. How do I do this in Python? for i in range (100,0) doesn't work. For discussion of why range works the way it does, see Why are slice and range upper-bound exclusive?.", "abstract": ""}, "answers": [{"id": 68912376, "score": -1, "vote": 0, "content": "It works well with me output : 4 3 2 1 0", "abstract": ""}, {"id": 64681146, "score": 4, "vote": 0, "content": "You might want to use the reversed function in python.\nBefore we jump in to the code we must remember that the range\nfunction always returns a list (or a tuple I don't know) so range(5) will return [0, 1, 2, 3, 4]. The reversed function reverses a list or a tuple so reversed(range(5)) will be [4, 3, 2, 1, 0] so your solution might be:", "abstract": ""}, {"id": 61491921, "score": 1, "vote": 0, "content": "You can also create a custom reverse mechanism in python. Which can be use anywhere for looping an iterable backwards", "abstract": ""}, {"id": 869902, "score": 530, "vote": 0, "content": "Try range(100,-1,-1), the 3rd argument being the increment to use (documented here).   (\"range\" options, start, stop, step are documented here)", "abstract": ""}, {"id": 56332314, "score": 0, "vote": 0, "content": "Oh okay read the question wrong, I guess it's about going backward in an array? if so, I have this:", "abstract": ""}, {"id": 47529813, "score": 4, "vote": 0, "content": "The simple answer to solve your problem could be like this:", "abstract": ""}, {"id": 54504127, "score": 1, "vote": 0, "content": "I wanted to loop through a two lists backwards at the same time so I needed the negative index. This is my solution: Result:", "abstract": ""}, {"id": 44233383, "score": 1, "vote": 0, "content": "You can always do increasing range and subtract from a variable in your case 100 - i where i in range( 0, 101 ).    ", "abstract": ""}, {"id": 42189764, "score": 17, "vote": 0, "content": "Why your code didn't work You code for i in range (100, 0) is fine, except the third parameter (step) is by default +1. So you have to specify 3rd parameter to range() as -1 to step backwards. NOTE: This includes 100 & 0 in the output. There are multiple ways. Better Way For pythonic way, check PEP 0322. This is Python3 pythonic example to print from 100 to 0 (including 100 & 0).", "abstract": ""}, {"id": 32716115, "score": -2, "vote": 0, "content": "", "abstract": ""}, {"id": 30311352, "score": 1, "vote": 0, "content": "Short and sweet. This was my solution when doing codeAcademy course. Prints a string in rev order. ", "abstract": ""}, {"id": 24617809, "score": 0, "vote": 0, "content": "I tried this in one of the codeacademy exercises (reversing chars in a string without using reversed nor :: -1)", "abstract": ""}, {"id": 24374584, "score": 1, "vote": 0, "content": "for var in range(10,-1,-1) works", "abstract": ""}, {"id": 6807504, "score": 6, "vote": 0, "content": "Another solution: Result: Tip:\nIf you are using this method to count back indices in a list, you will want to -1 from the 'y' value, as your list indices will begin at 0.", "abstract": ""}, {"id": 1750432, "score": 19, "vote": 0, "content": "Generally in Python, you can use negative indices to start from the back: Result:", "abstract": ""}, {"id": 869914, "score": 240, "vote": 0, "content": "In my opinion, this is the most readable:", "abstract": ""}, {"id": 869905, "score": 49, "vote": 0, "content": "and some slightly longer (and slower) solution:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/7286365/print-a-list-in-reverse-order-with-range", "keywords": [], "tags": ["python", "list", "range", "reverse"], "question": {"id": 7286365, "title": "Print a list in reverse order with range()?", "content": "How can you produce the following list with range() in Python?", "abstract": ""}, "answers": [{"id": 74922592, "score": -3, "vote": 0, "content": "Get the reverse output of reversing the given input integer.\nexample\ninput is:5 The answer should be: Answer is:", "abstract": ""}, {"id": 7286366, "score": 364, "vote": 0, "content": "Use the 'range' built-in function. The signature is range(start, stop, step).  This produces a sequence that yields numbers, starting with start, and ending if stop has been reached, excluding stop. The list constructor converts range (which is a python generator), into a list.", "abstract": ""}, {"id": 44519681, "score": 45, "vote": 0, "content": "For those who are interested in the \"efficiency\" of the options collected so far... Jaime RGP's answer led me to restart my computer after timing the somewhat \"challenging\" solution of Jason literally following my own suggestion (via comment). To spare the curious of you the downtime, I present here my results (worst-first):[1] Jason's answer (maybe just an excursion into the power of list comprehension): martineau's answer (readable if you are familiar with the extended slices syntax): Micha\u0142 \u0160rajer's answer (the accepted one, very readable): bene's answer (the very first, but very sketchy at that time): The last option is easy to remember using the range(n-1,-1,-1) notation by Val Neekman. [1] As commented by Karl Knechtel, the results presented here are version-dependent and refer to the Python 3.x version that was stable at the time of answering this question.", "abstract": ""}, {"id": 35977481, "score": 24, "vote": 0, "content": "When you have iteration over n items and want to replace order of list returned by range(start, stop, step) you have to use third parameter of range which identifies step and set it to -1, other parameters shall be adjusted accordingly: So equivalent of range(n) in reverse order would be:", "abstract": ""}, {"id": 61685845, "score": 2, "vote": 0, "content": "I thought that many (as myself) could be more interested in a common case of traversing an existing list in reversed order instead, as it's stated in the title, rather than just generating indices for such traversal. Even though, all the right answers are still perfectly fine for this case, I want to point out that the performance comparison done in Wolf's answer is for generating indices only. So I've made similar benchmark for traversing an existing list in reversed order. TL;DR a[::-1] is the fastest. NB: If you want more detailed analysis of different reversal alternatives and their performance, check out this great answer. Prerequisites: Jason's answer: martineau's answer: Micha\u0142 \u0160rajer's answer: bene's answer: As you see, in this case there's no need to explicitly generate indices, so the fastest method is the one that makes less extra actions. NB: I tested in JupyterLab which has handy \"magic command\" %timeit. It uses standard timeit.timeit under the hood. Tested for Python 3.7.3", "abstract": ""}, {"id": 63711416, "score": 2, "vote": 0, "content": "because range(n) produces an iterable there are all sorts of nice things you can do which will produce the result you desire, such as: if loops are ok, we can make sort of a queue: or maybe use the reverse() method on it:", "abstract": ""}, {"id": 21714738, "score": 58, "vote": 0, "content": "You could use range(10)[::-1] which is the same thing as range(9, -1, -1) and arguably more readable (if you're familiar with the common sequence[::-1] Python idiom).", "abstract": ""}, {"id": 14931024, "score": 4, "vote": 0, "content": "", "abstract": ""}, {"id": 54120287, "score": 10, "vote": 0, "content": "Very often asked question is whether range(9, -1, -1) better than reversed(range(10)) in Python 3? People who have worked in other languages with iterators immediately tend to think that reversed() must cache all values and then return in reverse order. Thing is that Python's reversed() operator doesn't work if the object is just an iterator. The object must have one of below two for reversed() to work: If you try to use reversed() on object that has none of above then you will get: So in short, Python's reversed() is only meant on array like objects and so it should have same performance as forward iteration. But what about range()? Isn't that a generator? In Python 3 it is generator but wrapped in a class that implements both of above. So range(100000) doesn't take up lot of memory but it still supports efficient indexing and reversing. So in summary, you can use reversed(range(10)) without any hit on performance.", "abstract": ""}, {"id": 45080080, "score": 1, "vote": 0, "content": "Suppose you have a list call it \na={1,2,3,4,5}\nNow if you want to print the list in reverse then simply use the following code. I know you asked using range but its already answered.", "abstract": ""}, {"id": 44089793, "score": 6, "vote": 0, "content": "You can do printing of reverse numbers with range() BIF Like ,  Output will be \n[10,9,8,7,6,5,4,3,2,1]  range() - range ( start , end , increment/decrement ) \nwhere start is inclusive , end is exclusive and increment can be any numbers and behaves like step ", "abstract": ""}, {"id": 7286465, "score": 769, "vote": 0, "content": "use reversed() function: It's much more meaningful.  Update: If you want it to be a list (as btk pointed out): Update: If you want to use only range to achieve the same result, you can use all its parameters. range(start, stop, step) For example, to generate a list [5,4,3,2,1,0], you can use the following: It may be less intuitive but as the comments mention, this is more efficient and the right usage of range for reversed list.", "abstract": ""}, {"id": 41658702, "score": 1, "vote": 0, "content": "You don't necessarily need to use the range function, you can simply do list[::-1] which should return the list in reversed order swiftly, without using any additions.", "abstract": ""}, {"id": 35936230, "score": 15, "vote": 0, "content": "will solve this problem. It will output 8 to 1, and -1 means a reversed list", "abstract": ""}, {"id": 33174726, "score": 9, "vote": 0, "content": "Readibility aside, reversed(range(n)) seems to be faster than range(n)[::-1]. Just if anyone was wondering :)", "abstract": ""}, {"id": 32152345, "score": 5, "vote": 0, "content": "i believe this can help, below is Usage:", "abstract": ""}, {"id": 31956052, "score": 1, "vote": 0, "content": "", "abstract": ""}, {"id": 31562082, "score": 3, "vote": 0, "content": "Using without [::-1] or reversed -", "abstract": ""}, {"id": 25961781, "score": 7, "vote": 0, "content": "The requirement in this question calls for a list of integers of size 10 in descending\norder. So, let's produce a list in python.", "abstract": ""}, {"id": 24584782, "score": 0, "vote": 0, "content": "Is the correct form. If you use you wont get a 0 case. For instance, say your 10 isn't a magic number and a variable you're using to lookup start from reverse. If your n case is 0, reversed(range(0)) will not execute which is wrong if you by chance have a single object in the zero index.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/529424/traverse-a-list-in-reverse-order-in-python", "keywords": [], "tags": ["python", "loops", "reverse"], "question": {"id": 529424, "title": "Traverse a list in reverse order in Python", "content": "How do I traverse a list in reverse order in Python? So I can start from collection[len(collection)-1] and end in collection[0]. I also want to be able to access the loop index.", "abstract": ""}, "answers": [{"id": 40999178, "score": 38, "vote": 0, "content": "An approach with no imports: Time complexity O(n) and space complexity O(1). An approach that creates a new list in memory, be careful with large lists: Time complexity O(n) and space complexity O(n).", "abstract": ""}, {"id": 72380349, "score": 1, "vote": 0, "content": "As a beginner in python, I found this way more easy to understand and reverses a list. say numlst = [1, 2, 3, 4] for i in range(len(numlst)-1,-1,-1): print( numlst[ i ] ) o/p = 4, 3, 2, 1", "abstract": ""}, {"id": 52266579, "score": 5, "vote": 0, "content": "Assuming task is to find last element that satisfies some condition in a list (i.e. first when looking backwards), I'm getting following numbers. Python 2: So, the ugliest option xrange(len(xs)-1,-1,-1) is the fastest. Python 3 (different machine): Here, enumerate(reversed(xs), 1) is the fastest.", "abstract": ""}, {"id": 69930468, "score": 1, "vote": 0, "content": "I'm confused why the obvious choice did not pop up so far: If reversed() is not working because you have a generator (as the case with enumerate()), just use sorted():", "abstract": ""}, {"id": 51340606, "score": 13, "vote": 0, "content": "In python 3, list creates a copy, so reversed(list(enumerate(collection)) could be inefficient, generating yet an other list is not optimized away. If collection is a list for sure, then it may be best to hide the complexity behind an iterator so, the cleanest is:", "abstract": ""}, {"id": 7722144, "score": 41, "vote": 0, "content": "The reversed builtin function is handy: The documentation for reversed explains its limitations. For the cases where I have to walk a sequence in reverse along with the index (e.g. for in-place modifications changing the sequence length), I have this function defined an my codeutil module: This one avoids creating a copy of the sequence. Obviously, the reversed limitations still apply.", "abstract": ""}, {"id": 530507, "score": 118, "vote": 0, "content": "It can be done like this: So your guess was pretty close :) A little awkward but it's basically saying: start with 1 less than len(collection), keep going until you get to just before -1, by steps of -1. Fyi, the help function is very useful as it lets you view the docs for something from the Python console, eg: help(range)", "abstract": ""}, {"id": 58849875, "score": 0, "vote": 0, "content": "you can use a generator: finally: hope this help you.", "abstract": ""}, {"id": 56424919, "score": 4, "vote": 0, "content": "I think the most elegant way is to transform enumerate and reversed using the following generator which generates a the reverse of the enumerate iterator Example: Result:", "abstract": ""}, {"id": 52195368, "score": 5, "vote": 0, "content": "If you need the index and your list is small, the most readable way is to do reversed(list(enumerate(your_list))) like the accepted answer says. But this creates a copy of your list, so if your list is taking up a large portion of your memory you'll have to subtract the index returned by enumerate(reversed()) from len()-1. If you just need to do it once: or if you need to do this multiple times you should use a generator:", "abstract": ""}, {"id": 529427, "score": 1663, "vote": 0, "content": "Use the built-in reversed() function: To also access the original index, use enumerate() on your list before passing it to reversed(): Since enumerate() returns a generator and generators can't be reversed, you need to convert it to a list first.", "abstract": ""}, {"id": 54817016, "score": 4, "vote": 0, "content": "If you don't mind the index being negative, you can do:", "abstract": ""}, {"id": 49693921, "score": 16, "vote": 0, "content": "Also, you could use either \"range\" or \"count\" functions. \nAs follows: You could also use \"count\" from itertools as following:", "abstract": ""}, {"id": 51462833, "score": 1, "vote": 0, "content": "i think this one is also simple way to do  it... read from end and keep decrementing till the length of list, since we never execute the \"end\" index hence added -1 also", "abstract": ""}, {"id": 47975414, "score": 0, "vote": 0, "content": "A simple way : ", "abstract": ""}, {"id": 47492673, "score": 2, "vote": 0, "content": "You can use a negative index in an ordinary for loop: To access the index as though you were iterating forward over a reversed copy of the collection, use i - 1: To access the original, un-reversed index, use len(collection) - i:", "abstract": ""}, {"id": 42491881, "score": 7, "vote": 0, "content": "for what ever it's worth you can do it like this too. very simple.", "abstract": ""}, {"id": 38613651, "score": 2, "vote": 0, "content": "You can also use a while loop:", "abstract": ""}, {"id": 37574802, "score": 2, "vote": 0, "content": "To use negative indices: start at -1 and step back by -1 at each iteration.", "abstract": ""}, {"id": 32517283, "score": 13, "vote": 0, "content": "OR", "abstract": ""}, {"id": 25352522, "score": 11, "vote": 0, "content": "I like the one-liner generator approach:", "abstract": ""}, {"id": 23282463, "score": 6, "vote": 0, "content": "", "abstract": ""}, {"id": 21793637, "score": 13, "vote": 0, "content": "How about without recreating a new list, you can do by indexing: OR", "abstract": ""}, {"id": 17899322, "score": 1, "vote": 0, "content": "The other answers are good, but if you want to do as \nList comprehension style", "abstract": ""}, {"id": 529439, "score": 7, "vote": 0, "content": "Use list.reverse() and then iterate as you normally would. http://docs.python.org/tutorial/datastructures.html", "abstract": ""}, {"id": 529466, "score": 78, "vote": 0, "content": "If you need the loop index, and don't want to traverse the entire list twice, or use extra memory, I'd write a generator.  ", "abstract": ""}, {"id": 529443, "score": 246, "vote": 0, "content": "You can do: (Or whatever you want to do in the for loop.) The [::-1] slice reverses the list in the for loop (but won't actually modify your list \"permanently\").", "abstract": ""}, {"id": 529441, "score": 2, "vote": 0, "content": "the reverse function comes in handy here:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/51738699/iterating-an-interable-sequence-in-reverse-order", "keywords": [], "tags": ["python", "python-3.x"], "question": {"id": 51738699, "title": "iterating an interable sequence in reverse order", "content": "I have a iterable sequence nums = [1,2,3,4]. I want to create a generator function which, when next(nums) is used, will return the values one by one in reverse order. My goal is to do this using len(). I know the length of the list minus one would be the index of the last item in the list. How would I write the code for the output using len(): EDIT: Forgot to mention no other built-in functions are allowed.", "abstract": ""}, "answers": [{"id": 51738869, "score": 0, "vote": 0, "content": "", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/69102162/looping-backwards-in-python-and-getting-the-index", "keywords": [], "tags": ["python"], "question": {"id": 69102162, "title": "Looping backwards in python and getting the index", "content": "There are multiple ways to loop back in python\nFor example we have which gives I can solve what I need with that, but I am curious. There is another way to loop back which is Looks nice, right?\nThis gives My question is, using this second method is there a way to get not only the element but also the index? (the 2,1,0)", "abstract": ""}, "answers": [{"id": 69102724, "score": 2, "vote": 0, "content": "Here's a way using reversed() and zip() that should be memory efficient: Output:", "abstract": ""}, {"id": 69102477, "score": 0, "vote": 0, "content": "", "abstract": ""}, {"id": 69102389, "score": 2, "vote": 0, "content": "use the builtin method reversed", "abstract": ""}, {"id": 69102371, "score": 2, "vote": 0, "content": "There's a builtin for that: reversed. This might be more readable and intuitive than using a range or slice with negative step. For just the index, you can pass the range to reversed directly: For index and element, you have to collect the enumerate iterator into a list before reversing:", "abstract": ""}, {"id": 69102249, "score": 0, "vote": 0, "content": "This uses enumerate to keep elements with their specific index. Then we convert it to list and reverse (enumerate result is not reversible without converting). No need to keep track of any order (like subtracting) manually You can also just reverse the forward range: Python actually reverses range in a smart way, without converting it to a list, so it works even for big stuff: This means that range(len(arr))[::-1] will work in exactly the same way, with exactly the same speed, as your range(len(arr)-1, -1, -1) while looking nice!", "abstract": ""}, {"id": 69102237, "score": -1, "vote": 0, "content": "The normal way to iterate with an index is with enumerate. One can use this to index the other way by subtracting the index from the length of the sequence: Note that reversed doesn't create a new list in memory and is preferable to [::-1] if just iterating.", "abstract": ""}, {"id": 69102213, "score": -1, "vote": 0, "content": "You can use enumerate and subtract from the initial length: output:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/67957942/how-to-enumerate-over-a-list-in-python-backwards-with-indexfrom-the-end-to-the", "keywords": [], "tags": ["python", "loops", "reverse"], "question": {"id": 67957942, "title": "How to enumerate over a list in python backwards with index(From the end to the beginning)", "content": "I'm like to iterate over a list of received data from Digikey api any didn't have much luck googling since the function enumerate(reversed(part.standard_pricing)) just doesn't work and you can't reverse the part.standard_pricing for some reason\nSomething like that is desired: But range doesn't work on list either... I'd like to do that: just instead start from the end of part.standard_pricing and have the index decrease instead of increase Any idea on how to do that pythonically?", "abstract": ""}, "answers": [{"id": 67958475, "score": 3, "vote": 0, "content": "You don't need to reverse or copy the list. Just use it in place and index it from the end: This is a mirror of the Python antipattern but since it is a mirror you can consider it an anti-antipattern.", "abstract": ""}, {"id": 67958072, "score": 5, "vote": 0, "content": "Instead of reverseing the enumerated list, we can also enumerate the reversed list and use a bit of math for the index: to get You can also go for i = -j and get -1, -2, -3, which, when indexes, gives the same values as the 2, 1, 0 respectively.", "abstract": ""}, {"id": 67957975, "score": 7, "vote": 0, "content": "You can call enumerate on the list, then convert the enumerate object to list, it will give list of tuples where each tuple will have index and value, finally iterate on reversed list. In case, you don't want another copy of the sequence in the memory, you can create your custom generator.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/50486492/iterate-a-list-in-reverse-order-and-create-dynamic-dictionaries", "keywords": [], "tags": ["python", "list", "dictionary"], "question": {"id": 50486492, "title": "Iterate a list in reverse order and create dynamic dictionaries", "content": "I am trying to create a big dict that encapsulate dicts from a list of keys: \ni have this following list :  i can iterate in reverse order this list but i'm not able to create this big object here the output that  i want : any leads ? ", "abstract": ""}, "answers": [{"id": 50487009, "score": 0, "vote": 0, "content": "Ex. O/P:", "abstract": ""}, {"id": 50486839, "score": 2, "vote": 0, "content": "This is a functional solution using collections.defaultdict to create a nested defaultdict of defaultdicts:", "abstract": ""}, {"id": 50486615, "score": 2, "vote": 0, "content": "here is my solution: prints:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/3476732/how-to-loop-backwards-in-python", "keywords": [], "tags": ["python", "iteration", "range"], "question": {"id": 3476732, "title": "How to loop backwards in python?", "content": "I'm talking about doing something like: I can think of some ways to do so in python (creating a list of range(1,n+1) and reverse it, using while and --i, ...) but I wondered if there's a more elegant way to do it. Is there? EDIT:\nSome suggested I use xrange() instead of range() since range returns a list while xrange returns an iterator. But in Python 3 (which I happen to use) range() returns an iterator and xrange doesn't exist.", "abstract": ""}, "answers": [{"id": 3476768, "score": 436, "vote": 0, "content": "range() and xrange() take a third parameter that specifies a step. So you can do the following. Which gives But for iteration, you should really be using xrange instead. So, Note for Python 3 users: There are no separate range and xrange functions in Python 3, there is just range, which follows the design of Python 2's xrange.", "abstract": ""}, {"id": 38402844, "score": 22, "vote": 0, "content": "All of these three solutions give the same results if the input is a string: 1. 2. 3.", "abstract": ""}, {"id": 38032364, "score": 12, "vote": 0, "content": "", "abstract": ""}, {"id": 26164073, "score": 2, "vote": 0, "content": "To reverse a string without using reversed or [::-1], try something like:", "abstract": ""}, {"id": 3476753, "score": 245, "vote": 0, "content": "This works on basically everything that has a defined order, including xrange objects and lists.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/51718893/accept-iterable-sequence-and-return-them-in-reverse-order", "keywords": [], "tags": ["python-3.x"], "question": {"id": 51718893, "title": "Accept iterable sequence and return them in reverse order", "content": "Write a generator function reverse_iter that accepts an iterable sequence and yields the items in reverse order without using built-in functions or methods. After using the function however, the original list should be unchanged. An example output is below: Note that the above should work even if the list is changed to a tuple. I have no idea how to do this without using something like reverse() or reversed(). Maybe utilize a -1 slice? Any Ideas?", "abstract": ""}, "answers": [{"id": 51738958, "score": -2, "vote": 0, "content": "", "abstract": ""}]}]