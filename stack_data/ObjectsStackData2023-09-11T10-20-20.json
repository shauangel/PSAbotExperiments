[{"link": "https://stackoverflow.com/questions/68799118/how-to-make-all-methods-from-static-class-available-in-another-static-class-in-c", "keywords": [], "tags": ["c#", ".net", "inheritance", "static"], "question": {"id": 68799118, "title": "How to make all methods from static class available in another static class in c#", "content": "I would like add additional c# methods to a external static class that can't be modified. i.e create a wrapper class for convenience containing the methods of the external static class + my own static methods. I first wanted to inherit my own class from the external static class but I discover that static classes are sealed and can't be inherited form. What would be the best way to do this? Thanks a lot for you help", "abstract": ""}, "answers": [{"id": 68799189, "score": 4, "vote": 0, "content": "Proxy the calls, per Llama's indication", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/65508769/php-static-function-class-save-previous-function-call-data", "keywords": [], "tags": ["php", "class", "oop", "instance", "static-functions"], "question": {"id": 65508769, "title": "php static function class save previous function call data", "content": "This is my code. when I run this code then output given this code is, But why? My expected output is, Because when we call a static function in class then it's full newly call this class and all time it creates a new object because all time the user is empty when calling this function. but why this code saves previous class data?", "abstract": ""}, "answers": [{"id": 65509391, "score": 1, "vote": 0, "content": "If your expected output is: Then what you want is: As people pointed out in the comments, the static flag indicates that there is only one instance of a variable across the entire class definition. If you want to create a new instance of the User::$User property, then there's no point in having it attached as a static variable to the class definition.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/59998871/where-static-class-is-preferred", "keywords": [], "tags": ["c#", "asp.net", "asp.net-mvc", "class", "static-classes"], "question": {"id": 59998871, "title": "Where Static class is preferred?", "content": "Why we use static class? As newbie I understand  (Correct me if i am wrong please.) While in normal class Then why static class is preferred?\nOR\nWhere Static class is preferred?", "abstract": ""}, "answers": [{"id": 59998957, "score": 7, "vote": 0, "content": "From MSDN:  why static class is preferred? OR Where Static class is preferred? A static class can be used as a convenient container for sets of\n  methods that just operate on input parameters and do not have to get\n  or set any internal instance fields. For example, in the .NET\n  Framework Class Library, the static System.Math class contains methods\n  that perform mathematical operations, without any requirement to store\n  or retrieve data that is unique to a particular instance of the Math\n  class.", "abstract": ""}, {"id": 59998953, "score": 0, "vote": 0, "content": "A static class cannot be instantiated. All members of a static class are static and are accessed via the class name directly, without creating an instance of the class. Static classes have the following characteristics: ", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/59474395/how-to-pass-in-class-to-a-method-and-call-static-methods-on-that-class", "keywords": [], "tags": ["java", "java-8"], "question": {"id": 59474395, "title": "How to pass in class to a method and call static methods on that class", "content": "I'm trying to write a factory class that takes in a class inherited from a specific abstract base class and calls a static method on that class to perform some logic and data manipulation before creating one or more instances of that class based on that manipulated data. So far, this is what I have:", "abstract": ""}, "answers": [{"id": 59474431, "score": 3, "vote": 0, "content": "You can do it with reflection and a capture-of wildcard; like And then to invoke it, the syntax is very similar to what you had (you're missing new, but otherwise the first form is good). Like, Outputs", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/57850367/c-how-assign-static-class-to-instance-variable", "keywords": [], "tags": ["c#", "static", "instance"], "question": {"id": 57850367, "title": "c# how assign static class to instance variable?", "content": "Static members can't be called with instance, like instance.myStaticProperty. Is there any way, that I can have an instance variable that will be an alias of static self class? like: and i could call:", "abstract": ""}, "answers": [{"id": 57850416, "score": 2, "vote": 0, "content": "No, there is not. The closest you get is using a using. Your static class definition: And to use it: Not too much to gain though, but it might ease your naming a little. Another (somewhat cooler) option is a static using:", "abstract": ""}, {"id": 57850487, "score": 0, "vote": 0, "content": "Static members are shared across all instances of the class or all instances of Class Of T of same T. So you can access static properties outside of class by using the ClassName.VarName or directly by the VarName from within the class. You can access static fields and properties and methods from all non static methods. You can also add an instance member mapping a static member. Instances of a static thing can't exist in addition to the static existence itself. So you can write this: And use it like that:", "abstract": ""}, {"id": 57850951, "score": 1, "vote": 0, "content": "You're attempting to do an anti-pattern there. Static properties are properties not defined in an instance (object) of that class, but by the class itself. And as such, you can access and modify them whenever you choose to, provided you have the required scopes to do so. I don't see the problem in calling MyClass.StaticProperty = <some expression>, if indeed the functions the static property do, are static. If it's something part of the object, something you don't connect with the class itself, i.e it might be different for each instanced object of that class, then just turn it into a regular property instead. Example of some static properties and methods: If you truly wish something to be static, then don't try to make it non-static. Simply declare it as such.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/56953683/c-class-with-all-members-and-methods-static", "keywords": [], "tags": ["c++", "static", "static-classes"], "question": {"id": 56953683, "title": "C++ class with all members and methods static", "content": "I got a program with multiple classes and have one class that has all members and methods static with the following content: two members and two methods to initializate them at start. Also all the members in my static class are public. My question is, if this is a bad practice or if there is any better way to do it? I use the members of this class only in one of the another classes.", "abstract": ""}, "answers": [{"id": 56954431, "score": 0, "vote": 0, "content": "Always avoid creating useless symbols.\n\nIf there is no need for a class, create a set of functions in a namespace. If your set of functions needs to manipulate some data, a static class/singleton is the way to go.\n\nMy rule when I design an application is to avoid having stuff that is callable from anywhere.\n\nThe more you restrict yourself (Or the user in the case of a library), the safer your code is (Less bugs due to bad usage).\n\nIf you really need to make a static class, I can suggest you to use a constructor like this one: It avoid confusion between an instanciable class and a completely static class. If you like flourishes you can setup something like that:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/44232233/how-to-set-a-static-class-to-data-context", "keywords": [], "tags": ["c#", "wpf", "data-binding", "static", "datacontext"], "question": {"id": 44232233, "title": "How to set a static class to Data Context?", "content": "I have a solution with 4 projects. In the UI project, I have this XAML: As you can see, in the XAML I use the class common:Config as DataContext, and it is a \"normal\" class, but I want to use the following one instead: It's a static class, and it seems that I can't bind it to the UI. What can I do? What do I have to put in the Binding of the Labels?", "abstract": ""}, "answers": [{"id": 56756458, "score": 0, "vote": 0, "content": "I'm knowing it's two years old stuff, but there is a third solution as follows: a) create a singleton class, e.g. b) in xaml declare the namespace the DataManager is in, e.g. c) in xaml declare the data context", "abstract": ""}, {"id": 44242590, "score": 1, "vote": 0, "content": "Since you cannot create an instance of a static class, it makes no sense to set the DataContext to your Sesion class or type. But you can bind each of the elements to the static properties of this type like this: ...where local is mapped against the CLR namespace of the Sesion class.", "abstract": ""}, {"id": 44232503, "score": 0, "vote": 0, "content": "You have 2 solutions: 1) Keep Sesion static and implement StaticPropertyChanged like @elgonzo suggested; 2) Make Sesion a singleton. This is a better solution because you have more control on the Sesion lifetime. Also, you can use Dependency Injection and other useful patterns that work only with class instances (for example the DataContext property), not static classes. Singleton code snippet: And you can then bind the DataContext in the MetroWindow.xaml.cs: Note also that a Binding work only with source PROPERTIES, not public fields or methods or whatever. And, if you need to listen to the changes in the Sesion class, you'll need to make Sesion to implement INotifyPropertyChanged interface.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/46384376/how-to-pass-data-in-static-class-method-from-non-static", "keywords": [], "tags": ["java", "android", "static"], "question": {"id": 46384376, "title": "How to pass data in static class/method from non static?", "content": "I got static class that is loading data from server and packs it into objects that later goes into array and are passed to normal class. I want to add parameter \"distance to user\" and it requires user location to calculate. All of items are in different java classes.\nMethod from static class that sorts things from server response to object.  Object is created as simple data holder (one item just for example) In MainActivity there is LoaderManager which starts loader class to work. Also there is LocationManager which gets user longitude/latitude. So far i got few ideas how to do that, but none of them worked. As far as I know last one is impossible. While in my object I couldn't change any value, there is no .setValue() method in it, so most that I could've done is to set new value for kmag (those variables that used for return). Finally, I couldn't transfer my LocationManager into static class because it needs to ask users permission and in example that I've found all methods were not static. So my question is: is there anything that I'm missing? Maybe there is other, simpler way to do that or I just failed in one of those 3?", "abstract": ""}, "answers": [{"id": 46390364, "score": 0, "vote": 0, "content": "You can always call a static method from anywhere outside the class (depend on the access modifier). So, you can call the extractEarthquakes() method with: You can't call non-static method from static method if the methods is in the same class like this: But you can call static method from non-static method in the same class. For the ask users permission, you can call it before calling the static method.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/17883433/what-is-diference-between-static-class-vs-class-with-only-static-methods", "keywords": [], "tags": ["c#", ".net", "class", "oop"], "question": {"id": 17883433, "title": "What is diference between static class vs class with only static methods?", "content": "What is difference between static class vs class with only static methods (and for example private constructor)? Say we have: So from points of methods/properties access performance, code readabilety, code extendability?", "abstract": ""}, "answers": [{"id": 17883907, "score": 1, "vote": 0, "content": "Static class - Such a class cannot be instantiated. Also all the members of this class needs to be static. You will declare a class as static when you do not want a class to be instantiated again and again and want to use the object across the project. For example if you want to create a LOGGING functionality. For this you can create a static logging class and put all the (static)functionality into it for instance write method. Non static class with static members - This class can be instantiated. Also this class can contain both static and non static members which can accessed by classname.xyz() or classname.property .You create this class when you need to create an object(class) that has some functionality(methods) that needs to be used across the application for this you might not always want to create an object of the class and access it(method). For example Redirect to home method in Navigation class. I guess this explains most of it. ", "abstract": ""}, {"id": 17883607, "score": 0, "vote": 0, "content": "Technically you can create a instance of nonstaric class with static methods only: even if the constructor is private, you can do it by means of reflection (or within static methods of the class). You can also create a derived class from that kind of class unless it declared as sealed.  Static class is always abstract (so you by no means can't create an isntance of it) and sealed (you can't create a derived class as well). So static class is a shortcut for abstract sealed class.", "abstract": ""}, {"id": 17883678, "score": 0, "vote": 0, "content": "Access performance: Almost no difference. Code readability: It's more readable to use the static modifier when the class shouldn't be instantiated, since that shows how the class is intended to be uses. Also, it adds compile-time checks to prevent using it in wrong ways by mistake. Code extendability: No difference (regarding static members at least - of course you can extend the class with none-static members if you don't use the static modifier, but with the static modifier the class is implicitly sealed) Additional note: Extension methods can only be declared in a static class.", "abstract": ""}, {"id": 17883485, "score": 0, "vote": 0, "content": "static class is used when creating an instance of the class would be meaningless. For example static class HelperMethods vs class HelperMethods", "abstract": ""}, {"id": 17883482, "score": 5, "vote": 0, "content": "A static class enforces all members to be static and prevents any instance from being created.\nFrom MSDN: A class can be declared static, indicating that it contains only\n  static members. It is not possible to create instances of a static\n  class using the new keyword. Static classes are loaded automatically\n  by the .NET Framework common language runtime (CLR) when the program\n  or namespace containing the class is loaded. You can read more about static classes and members here - http://msdn.microsoft.com/en-us/library/79b3xss3(v=vs.80).aspx", "abstract": ""}, {"id": 17883543, "score": 0, "vote": 0, "content": "Short answer, a static class can only contain static methods. A non-static class does not have that explicit restriction and can contain both static and non-static methods. Long answer: http://msdn.microsoft.com/en-us/library/79b3xss3(v=vs.80).aspx", "abstract": ""}, {"id": 17883528, "score": 0, "vote": 0, "content": "It's possible to create an instance of a class which only has static methods (unless you hide the constructor). It's not possible to create an instance of a static class, and the compiler will enforce this.", "abstract": ""}, {"id": 17883526, "score": 0, "vote": 0, "content": "You can't create static class instance.", "abstract": ""}, {"id": 17883522, "score": 1, "vote": 0, "content": "A static class will require that all methods in that class be static, while a regular class with static methods could also have instance methods. From a performance standpoint, static methods are slightly faster, because they do not introduce the overhead of checking for the actual instance of an object. From a redability standpoint, static methods are generally easier to read, but may not be appropriate either, take the following for instance:", "abstract": ""}, {"id": 17883498, "score": 0, "vote": 0, "content": "For static class you CANNOT create an instance; other case, you can always create one even if all the members and fields are static.", "abstract": ""}, {"id": 17883497, "score": 0, "vote": 0, "content": "Well, if you declare the class as static, then the compiler can enforce for you that you didn't add any instance members and will also ensure that instances are never created (a non-static class with only static members and a private constructor can still have instances created inside one of the static methods!)  Thus, this is legal for a non-static class: But would not be legal for a static class.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/11464239/if-i-create-a-static-class-in-c-will-any-methods-inside-be-considered-static-a", "keywords": [], "tags": ["c#", "static", "static-methods"], "question": {"id": 11464239, "title": "If I create a static class in C#, will any methods inside be considered static as well, regardless of whether they&#39;re explicitly declared as static?", "content": "Possible Duplicate:\nC#.NET - Why do members of a static class need to be declared as static? Why isn't it just implicit?  I am getting an interesting error, in that when I call a method (which I don't explicitly declare as static) from within a statically declared class, I get a message saying  An object reference is required for the non-static field, method, or property 'MangoTree.Twitter.OAuthClient.PerformRequest(System.Collections.Generic.Dictionary, string, string, string, MangoTree.Twitter.OAuthClient.RequestType)' When I explicitly declare the method as static, the error goes away, and I can remove the static modifier from the class declaration and the error stays away. What's confusing me is that I was under the impression that when I declared the class as static, everything within the class should automatically be static as well, without me having to explicitly declare it so.", "abstract": ""}, "answers": [{"id": 11464329, "score": 0, "vote": 0, "content": "C# compiler marks static classes as 'sealed abstract' because of which you're never able instantiate static classes or inherit from the static classes. And because of this It serves no real value to define non-static members in a static class because you will never be able to instantiate the class hence never be able to call the non-static members. So you have to define only static members in a static class. Weather a class should be static or not is design design decision.", "abstract": ""}, {"id": 11464302, "score": 5, "vote": 0, "content": "What's confusing me is that I was under the impression that when I declared the class as static, everything within the class should automatically be static as well All members of a static class must indeed be static, but it is not happening automatically: you must explicitly declare all the members static. The purpose of declaring a class static is to let the compiler perform a check that all members are static, and to prevent any attempt at creating an instance of your static class.", "abstract": ""}, {"id": 11464288, "score": 0, "vote": 0, "content": "You cant call a non static member function without creating an instance of the class. So in your first case since static class cant be instantiated you are getting the error when trying to call a non static function from a static function.  However if your class is non static and there are two methods of which one is static, you can very well call the non-static member function inside static function like this Since static members and classes are instantiated well before instantiating the normal classes , the static function will not know the existence of a normal function. In the second case since both the functions are declared static there is no problem.", "abstract": ""}, {"id": 11464280, "score": 1, "vote": 0, "content": "All members of static class must be static. Please read this article for why? http://www.codeproject.com/Articles/15269/Static-Keyword-Demystified", "abstract": ""}, {"id": 11464275, "score": 0, "vote": 0, "content": "If you create a static class in C#, methods inside need to be declared static: http://msdn.microsoft.com/en-us/library/79b3xss3(v=vs.80).aspx Example:", "abstract": ""}]}]