[{"link": "https://stackoverflow.com/questions/44642495/c-has-scanf-does-python-have-something-similar", "keywords": [], "tags": ["python", "c"], "question": {"id": 44642495, "title": "c has scanf, does python have something similar?", "content": "I am trying to solve problems from SPOJ. I need to be able to read input from stdin for that, I did a lot of problems in C using scanf but wanted to try Python as well. How do i read the stdin inputs in Python? (wanna use Python 2.6/2.7)", "abstract": ""}, "answers": [{"id": 44643064, "score": 5, "vote": 0, "content": "In Python 2.7 To get integers or floats as inputs you can use the key word 'input'\nExample: temp=input(\"Give your value\")\nHere temp only takes a float or int There is another command raw_input() any value that raw input is given it converts it to string and assigns the value\nExample:temp=raw_input(\"Give your value\")\nHere temp is of string type", "abstract": ""}, {"id": 44642613, "score": 0, "vote": 0, "content": "For what I researched, in python 2.7(in all versions of python 2) the command of input is: raw_input( ) in this link have a tutorial about this:\nhttps://linuxconfig.org/how-to-obtain-an-user-input-with-python-raw-input-function-example", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/5402468/what-is-the-equivalent-of-matlab-fscanf-in-python", "keywords": [], "tags": ["python", "matlab", "scanf"], "question": {"id": 5402468, "title": "What is the equivalent of Matlab &#39;fscanf&#39; in Python?", "content": "The Matlab function fscanf() seems to be very powerful. Is there any equivalent of the same in python (or numpy)? Specifically I want to read a matrix from file but I don't want to iterate through each line to read the matrix.\nSomething of this sort (from matlab for reading a 2D 1000x1000 matrix): ", "abstract": ""}, "answers": [{"id": 5402526, "score": 5, "vote": 0, "content": "Python has no built-in fscanf function. The closest way to do it is to read the file line by line and use regular expressions. Numpy (the Matlab-like Python library), however, has a function that allows to read a file and construct an array from is content : numpy.fromfile (or, as suggested in the other answers, numpy.loadtxt may be more suitable in this case).", "abstract": ""}, {"id": 5406191, "score": 0, "vote": 0, "content": "I think the pythonic way to do it would be to open the file and read in the data into a list of lists using list comprehensions. (I'm using data from a string for clarity, and reading it in as if from a file using StringIO.) As an earlier answer mentions, numpy has a more direct method.", "abstract": ""}, {"id": 5405826, "score": 1, "vote": 0, "content": "I think Wookai answer is incorrect. I think numpy.loadtxt is what you look for.", "abstract": ""}, {"id": 5402559, "score": 0, "vote": 0, "content": "Have you taken a look at numpy? - http://www.scipy.org/Download By the way, fscanf internally stores the data in column order - So I don't think there will be any efficiency gain.\nhttp://www.mathworks.com/help/techdoc/ref/fscanf.html", "abstract": ""}, {"id": 5402532, "score": 3, "vote": 0, "content": "I'm pretty sure there is not, but iterating isn't too hard.  This would do it: If you need something more complex (i.e. not just ints separated by single characters), regular expressions may be the way to go.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/41725535/python-function-for-taking-formatted-input-from-user-similar-to-scanf-in-c", "keywords": [], "tags": ["python"], "question": {"id": 41725535, "title": "Python function for taking formatted input from user similar to scanf() in &#39;C&#39;", "content": "I was wondering if there is a function in Python to take formatted input from user similar to taking the input from user in 'C' using scanf() and format strings such as %d, %lf, etc. Hypothetical example in which scanf() returns a list:", "abstract": ""}, "answers": [{"id": 74591131, "score": 2, "vote": 0, "content": "There is no direct scanf(3) equivalent in the standard library. The documentation for the re module suggests itself as a replacement, providing this explanation: Python does not currently have an equivalent to scanf(). Regular expressions are generally more powerful, though also more verbose, than scanf() format strings. The table below offers some more-or-less equivalent mappings between scanf() format tokens and regular expressions. Modifying your hypothetical example, to work with regular expressions, we get... ...and when executed: The scanf module on Pypi provides an interface much more akin to scanf(3). This provides a direct implementation of your hypothetical examples: ...and when executed:", "abstract": ""}, {"id": 74591241, "score": 1, "vote": 0, "content": "There is no (built-in) direct and easy way to specify the input's format in Python. The input function in Python 3 (raw_input in Python 2) will simply return the string that was typed to STDIN. Any parsing will be done manually on the string. The input function in Python 2 (eval(input()) in Python 3, which is not recommended) did a very basic built-in parsing and would work for only a single element (i.e. equivalent to scanf(\"%d\") for instance). With some basic parsing you can get to not-so-complicated code that emulates scanf: For anything more complicated, more lines of code are needed. For example:", "abstract": ""}, {"id": 41725764, "score": 1, "vote": 0, "content": "input(). For example this could be used as: For use in Python 2, this would be raw_input(). For example this could be used as:", "abstract": ""}, {"id": 41727055, "score": -2, "vote": 0, "content": "in Python 2, you can use input() or raw_input()", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/2175080/sscanf-in-python", "keywords": [], "tags": ["python", "parsing", "split", "scanf", "procfs"], "question": {"id": 2175080, "title": "sscanf in Python", "content": "I'm looking for an equivalent to sscanf() in Python. I want to parse /proc/net/* files, in C I could do something like this: I thought at first to use str.split, however it doesn't split on the given characters, but the sep string as a whole: Which should be returning 17, as explained above. Is there a Python equivalent to sscanf (not RE), or a string splitting function in the standard library that splits on any of a range of characters that I'm not aware of?", "abstract": ""}, "answers": [{"id": 60397881, "score": 1, "vote": 0, "content": "There is an example in the official python docs about how to use sscanf from libc:", "abstract": ""}, {"id": 59757055, "score": 1, "vote": 0, "content": "You could install pandas and use pandas.read_fwf for fixed width format files.  Example using /proc/net/arp: By default it tries to figure out the format automagically, but there are options you can give for more explicit instructions (see documentation).  There are also other IO routines in pandas that are powerful for other file formats.", "abstract": ""}, {"id": 11085456, "score": 71, "vote": 0, "content": "When I'm in a C mood, I usually use zip and list comprehensions for scanf-like behavior.  Like this: Note that for more complex format strings, you do need to use regular expressions: Note also that you need conversion functions for all types you want to convert. For example, above I used something like:", "abstract": ""}, {"id": 12852181, "score": 99, "vote": 0, "content": "There is also the parse module. parse() is designed to be the opposite of format() (the newer string formatting function in Python 2.6 and higher).", "abstract": ""}, {"id": 2180718, "score": 16, "vote": 0, "content": "You can parse with module re using named groups. It won't parse the substrings to their actual datatypes (e.g. int) but it's very convenient when parsing strings. Given this sample line from /proc/net/tcp: An example mimicking your sscanf example with the variable could be:", "abstract": ""}, {"id": 2176352, "score": -2, "vote": 0, "content": "If the separators are ':', you can split on ':', and then use x.strip() on the strings to get rid of any leading or trailing whitespace. int() will ignore the spaces.", "abstract": ""}, {"id": 2175135, "score": 37, "vote": 0, "content": "Python doesn't have an sscanf equivalent built-in, and most of the time it actually makes a whole lot more sense to parse the input by working with the string directly, using regexps, or using a parsing tool.  Probably mostly useful for translating C, people have implemented sscanf, such as in this module: http://hkn.eecs.berkeley.edu/~dyoo/python/scanf/ In this particular case if you just want to split the data based on multiple split characters, re.split is really the right tool.", "abstract": ""}, {"id": 2175126, "score": 1, "vote": 0, "content": "you can turn the \":\" to space, and do the split.eg no regex needed (for this case)", "abstract": ""}, {"id": 2175096, "score": 24, "vote": 0, "content": "You can split on a range of characters using the re module.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/58778829/fast-alternative-to-sscanf", "keywords": [], "tags": ["c", "parsing", "embedded"], "question": {"id": 58778829, "title": "Fast alternative to sscanf", "content": "I'm writing a parser for a text file on an embedded system in C. I need to use the sscanf function hundreds of times each second which creates performance trouble. Therefore, I'm trying to find a fast alternative to sscanf. The text file I need to parse contains parameters of the form \"parameter=%d,%d,%d,%d\". The parameter names vary in length, but the parameters always consist of 4 integer values. The parser reads one line of the text file after the other and stores the string in the variable \"token\". The variable \"format\" contains the strings of the form \"parameter=%d,%d,%d,%d\". Does anyone have an idea how to implement a fast alternative?", "abstract": ""}, "answers": [{"id": 58779583, "score": 3, "vote": 0, "content": "sscanf() has to both interpret the format string match it to your token and convert the string content.  You can avoid the unnecessary format string parse by using a direct conversion function such as atoi(): Since the aim is to improve performance, you need to measure the improvement.  I measured it at 9 times faster in a 64bit debug build in VC++, and 12 times faster for 32 bit code. YMMV for your target and compiler.  Optimisation has little impact as it is bound in the library code. Note that the above implementation has as much error checking as the original code - i.e. none.  You need to be certain the input token is going to be valid as a pre-condition.  In my test adding error checking had little impact on performance: It may not have the impact you expect however - the file I/O will be far slower than the memory and string manipulation imposed by sscanf() - the issue with sscanf() in embedded systems is more normally the code space and stack usage required. @SteveSummit has suggested using strtol().  Since this keeps track of the \"last position\" scanned, to avoid reiteration of the string.  You can exploit this to omit the explicit search for the comma delimiters: In my tests this is about 12 time faster in debug and 17 in optimisation - it is somewhat variable testing on Windows however.  I'll leave error checking for you to consider.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/40837978/python3-is-there-something-similar-to-scanf-in-python", "keywords": [], "tags": ["python", "input"], "question": {"id": 40837978, "title": "(Python3) Is there something similar to scanf in Python?", "content": "I know there's input() which stores the entire input into a variable and I can just use regex from it, but what I want is a quick function that look for a specific pattern in the input, match it and store it into a variable. For example, in C to store just the day,month and year from an input: Is there something equivalent in Python? ", "abstract": ""}, "answers": []}, {"link": "https://stackoverflow.com/questions/30378453/string-splitting-like-sscanf-in-python", "keywords": [], "tags": ["python", "split"], "question": {"id": 30378453, "title": "String splitting like sscanf in Python", "content": "I have a file containing lines like I need to split each line storing the two first elements in two variables and the text after the second column in one variable. In C, using sscanf() this can be accomplished as I know about scanf python module but apparently it is not standard and it is not included in Debian. How can you do this using the standard Python tools?", "abstract": ""}, "answers": [{"id": 30378797, "score": 0, "vote": 0, "content": "With the assumption that your first elements of the string are numbers I would suggest some thing like", "abstract": ""}, {"id": 30379241, "score": 1, "vote": 0, "content": "split is all you need. Docs for split with emphasis added: string.split(s[, sep[, maxsplit]]) Return a list of the words of the string s. If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed). If the second argument sep is present and not None, it specifies a string to be used as the word separator. The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string. If maxsplit is given, at most maxsplit number of splits occur, and the remainder of the string is returned as the final element of the list (thus, the list will have at most maxsplit+1 elements). If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made). The behavior of split on an empty string depends on the value of sep. If sep is not specified, or specified as None, the result will be an empty list. If sep is specified as any string, the result will be a list containing one element which is an empty string.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/27882108/reading-formatted-multi-lines-in-python", "keywords": [], "tags": ["python", "string-formatting", "scanf"], "question": {"id": 27882108, "title": "Reading formatted multi-lines in Python", "content": "I would like to read some formatted data in python. The format of the data is something similar to this: I could successfully simulate the reading in C/C++ using the forward code: The problem is that i cannot find some Python's method that read a formatted multi-line string as simple as the scanf can. Some examples from np.genfromtxt got near to what a needed, as some from struct.unpack, but my skills wasn't enough to make it works right with the multi-lines.\nI could probably use split() with some readline to get exactly the formatted data, but it driving me nuts that a program in C/C++ would be simpler than on in Python. Is there any way to do something similar to the C/C++ code in Python? Here is the answer after the Joril's help: And as output i got something like: ", "abstract": ""}, "answers": [{"id": 27882290, "score": 2, "vote": 0, "content": "You can definitely use regular expressions. Here is more or less matching code in python without loop:\n    import re I would split the data into lines first and then parse though.", "abstract": ""}, {"id": 27882163, "score": 1, "vote": 0, "content": "Well the Python FAQ says: Is there a scanf() or sscanf() equivalent? Not as such. For simple input parsing, the easiest approach is usually to split the\n  line into whitespace-delimited words using the split() method of\n  string objects and then convert decimal strings to numeric values\n  using int() or float(). split() supports an optional \u201csep\u201d parameter\n  which is useful if the line uses something other than whitespace as a\n  separator. For more complicated input parsing, regular expressions are more\n  powerful than C\u2019s sscanf() and better suited for the task. But it looks like someone made a module that does exactly what you want:\nhttps://hkn.eecs.berkeley.edu/~dyoo/python/scanf", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/27705095/python-scanf-like-input", "keywords": [], "tags": ["python", "scanf"], "question": {"id": 27705095, "title": "Python scanf-like input", "content": "EDIT:\nI ended up looking up the solutions to the question I am the 'duplicate' of, and crafting the following snippet of code: ORIGINAL QUESTION: I want to write some programs reading input from stdin in Python. But the input processing is killing me - I don't see a nice way to scan data that is not well-aligned in lines.\nFor example, if I have to scan an integer N, and then N words to process, in C++ I would do it like this: This program would scan all of the following input in exactly the same way: I like the flexibility C-like scanf gives to me, and I'd like to see something like that in Python too. I cannot use input(), because it would try to parse strings as Python syntax (possibly ending up with dictionary or something like that), and raw_input() operates on newline-ended lines. Function sys.stdin.read() is not good too, because it waits until the whole input is given (and I may want to display partial results in real time). The only way I see to implement such functionability would be to use sys.stdin.readline() in a loop, trying to parse each line independently until all words needed are parsed. But this is not very elegant solution, and it has some flaws as well - for example, if the example program mentioned above should input one more thing in its further action, and this word or number were given in the same line as last word, the Python program would not parse it properly. Problematic input would be: The word \"next_input\" would be \"swallowed\" by the readline() function, even though it might be needed by a program later. Again, this can be worked-around by supplying a temporary buffer of input_yet_to_be_parsed_but_already_inputted, but it would soon become very buggy code. Is there a truly 'pythonic' way to do this? Or am I missing something obvious?", "abstract": ""}, "answers": [{"id": 27705199, "score": 1, "vote": 0, "content": "Why not use the re module for regular expressions? Your example would be mapped to a regex like this: If you need the rest of the data for later use, how about catching it as the second gorup?", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/21224810/python-alternative-to-fscanf-c-code", "keywords": [], "tags": ["python", "c", "python-2.7"], "question": {"id": 21224810, "title": "Python alternative to fscanf C code", "content": "I have some C code that works well: data inside EMPLOYEE.DAT: I'm having trouble translating this code to Python: Is there any way to implement that in Python? Furthermore, what are Pythonic alternatives of exit() & EOF?", "abstract": ""}, "answers": [{"id": 21224874, "score": 6, "vote": 0, "content": "Something like: If you want to store the data in a structure, you can use the builtin dict type (hash map) Or you could define your own class: EDIT Here's a version that handles the error if the file does not exist. And returns an exit code.", "abstract": ""}]}]