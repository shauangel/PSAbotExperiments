[{"link": "https://stackoverflow.com/questions/39913847/is-there-a-way-to-compile-a-python-application-into-static-binary", "keywords": [], "tags": ["python", "build"], "question": {"id": 39913847, "title": "Is there a way to compile a python application into static binary?", "content": "What I'm trying to do is ship my code to a remote server, that may have different python version installed and/or may not have packages my app requires. Right now to achieve such portability I have to build relocatable virtualenv with interpreter and code. That approach has some issues (for example, you have to manually copy a bunch of libraries into your virtualenv, since --always-copy doesn't work as expected) and generally slow. There's (in theory) a way to build python itself statically. I wonder if I could pack interpreter with my code into one binary and run my application as module. Something like that: ./mypython -m myapp run or ./mypython -m gunicorn -c ./gunicorn.conf myapp.wsgi:application.", "abstract": ""}, "answers": [{"id": 72416919, "score": 0, "vote": 0, "content": "I have created a docker image that relies on Nuitka and a custom statically linked python3.10 to create a static binary. Did not test it extensively, if you have the chance please let me know if it works for your use case. You can check it at:\nhttps://github.com/joaompinto/docker-build-python-static-bin", "abstract": ""}, {"id": 40057634, "score": 182, "vote": 0, "content": "There are two ways you could go about to solve your problem This answer explains how you can go about doing it using the second approach, since the first method is not cross platform and version, and has been explained in other answers. Also, using programs like pyinstaller typically results in huge file sizes, while using cython will result in a file that's much smaller First, install cython. Then, you can use cython to generate a C file out of the Python .py file\n(in reference to https://stackoverflow.com/a/22040484/5714445) Use GCC to compile it after getting your current python version (Note: The below assumes you are trying to compile it to Python3) You will now have a binary file output_bin_file, which is what you are looking for Other things to note:", "abstract": ""}, {"id": 40099944, "score": 15, "vote": 0, "content": "You might wish to investigate Nuitka. It takes python source code and converts it in to C++ API calls. Then it compiles into an executable binary (ELF on Linux). It has been around for a few years now and supports a wide range of Python versions. You will probably also get a performance improvement if you use it. Recommended.", "abstract": ""}, {"id": 40135113, "score": 2, "vote": 0, "content": "If you are on a Mac you can use py2app to create a .app bundle, which starts your Django app when you double-click on it. I described how to bundle Django and CherryPy into such a bundle at https://moosystems.com/articles/14-distribute-django-app-as-native-desktop-app-01.html In the article I use pywebview to display your Django site in a local application window.", "abstract": ""}, {"id": 40057486, "score": 3, "vote": 0, "content": "You're probably looking for something like Freeze, which is able to compile your Python application with all its libraries into a static binary: PyPi page of Freeze Python Wiki page of Freeze Sourceforge page of Freeze", "abstract": ""}, {"id": 39994355, "score": 1, "vote": 0, "content": "Freeze options: However, your target server should have the environment you want -> you should be able to 'create' it. If it doesn't, you should build your software to match the environment.  I found this handy guide on how to install custom version of python to a virtualenv, assuming you have ssh access: https://stackoverflow.com/a/5507373/5616110 In virtualenv, you should be able to pip install anything and you shouldn't need to worry about sudo privileges. Of course, having those and access to package manager like apt makes everything a lot easier.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/70769450/how-to-run-a-binary-file-with-python-script", "keywords": [], "tags": ["python", "binary", "operating-system", "subprocess", "popen"], "question": {"id": 70769450, "title": "How to run a binary file with python script", "content": "Code: terminal Code: python Created files: terminal Created file: python I'm trying to get result by running the foldx binary file with python script, not terminal. When I tried to execute foldx on terminal, it works well enough. However, with python script, I couldn't get the results like the results from terminal. Could you let me know what can I do in this situation?", "abstract": ""}, "answers": []}, {"link": "https://stackoverflow.com/questions/70593386/python-script-compiled-to-c-binary-and-execute-in-docker-container", "keywords": [], "tags": ["python", "docker", "binary", "executable"], "question": {"id": 70593386, "title": "Python script compiled to C binary and execute in Docker container", "content": "I would like to complie my python script with a few variables to binary file and execute it in Docker container.\nTo achive that I am using Cython and gcc compiler. I have a problem with run binary file. I get error in container log:\n/bin/sh: 1: /app/script: Exec format error Below dockerfile: In folder /app/env I have Conda enviroment. Is there anyone who has similar problem to my?\nThank you for the answers and sugestions", "abstract": ""}, "answers": [{"id": 70652143, "score": 0, "vote": 0, "content": "I would like to share my solution. Dockerfile Shell script \"invoke\" Thanks to @David Maze for suggestions.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/69510190/python-script-starting-a-binary-script", "keywords": [], "tags": ["python", "binary"], "question": {"id": 69510190, "title": "Python script starting a binary script", "content": "I have a python script making a menu from where to start other python scripts on a xterm window I would like to add 1 more script, but it is binary and it works on specific directory files outputting a txt file Is it possible to make it executable by the phyton menu-script? I tried But it doesn't work xterm: bad command line option \"/path/script-bynary\"", "abstract": ""}, "answers": [{"id": 69545720, "score": 0, "vote": 0, "content": "I have a workaround.\nI made a bash script to start the binary one. and then I have this bash.script into the phyton one Not the most efficient way, I guess, but works.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/68851790/how-to-compile-python-program-and-its-dependencies-into-a-single-c-like-binary", "keywords": [], "tags": ["python", "compilation", "dependencies", "cython", "cythonize"], "question": {"id": 68851790, "title": "How to compile Python program and its dependencies into a single C like binary?", "content": "I'm trying to put my Python program and all of it's dependencies into a single binary that could be executed from the command line. I followed Broken Man's suggestion in this post here using Cython3 and it works if you have a simple Python script. However it doesn't work if you're using import statements in your code to include your dependencies. I'm looking for a solution that will allow me to execute my program similar to how you would in C, e.g think ./a.out Please don't recommend using chmod +x to convert it into an executable. That's not what I'm looking for. This isn't a desktop app either - it needs to be executed from the command line. Can Cython/Cythonize be used to compile dependencies or is there another tool that should be used for this? The dependencies I'm relying on are a mix of libraries installed with pip and custom written files in the same directory.", "abstract": ""}, "answers": [{"id": 68851815, "score": 1, "vote": 0, "content": "The tool you are looking for is Nuikta. Syntax is: python -m nuitka --standalone --follow-imports programname.py\nwhere:- --follow-import: Causes imported modules (including local imports) to be included in binary as well.\n--standalone: making standalone binary", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/12339671/how-to-compile-python-script-to-binary-executable", "keywords": [], "tags": ["python", "compilation", "executable"], "question": {"id": 12339671, "title": "How to compile python script to binary executable", "content": "I need to convert a Python script to a Windows executable. I have Python 2.6 installed to python26. I have created one script and kept it in C:\\pythonscript. Inside this folder there are two files Setup.py and oldlogs.py (this file need coversion) setup.py code is How can I convert oldlogs.py to an exe file?", "abstract": ""}, "answers": [{"id": 12339729, "score": 77, "vote": 0, "content": "Or use PyInstaller as an alternative to py2exe. Here is a good starting point. PyInstaller also lets you create executables for linux and mac... Here is how one could fairly easily use PyInstaller to solve the issue at hand: From the tool's documentation: PyInstaller analyzes myscript.py and: In the dist folder you find the bundled app you distribute to your users.", "abstract": ""}, {"id": 65401152, "score": 7, "vote": 0, "content": "Since other SO answers link to this question it's worth noting that there is another option now in PyOxidizer. It's a rust utility which works in some of the same ways as pyinstaller, however has some additional features detailed here, to summarize the key ones: (One other advantage of pyoxidizer is that it does not seem to suffer from the GLIBC_X.XX not found problem that can crop up with pyinstaller if you've created your binary on a system that has a glibc version newer than the target system). Overall pyinstaller is much simpler to use than PyOxidizer, which often requires some complexity in the configuration file, and it's less Pythony since it's written in Rust and uses a configuration file format not very familiar in the Python world, but PyOxidizer does some more advanced stuff, especially if you are looking to produce single binaries (which is not pyinstaller's default).", "abstract": ""}, {"id": 54332185, "score": -2, "vote": 0, "content": "", "abstract": ""}, {"id": 12340495, "score": 16, "vote": 0, "content": "I recommend PyInstaller, a simple python script can be converted to an exe with the following commands: which creates a yourprogram.spec file which is a configuration for building the final exe. Next command builds the exe from the configuration file: More can be found here", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/67660167/binary-to-decimal-script-in-python", "keywords": [], "tags": ["python"], "question": {"id": 67660167, "title": "Binary to Decimal Script in Python", "content": "I encountered an issue with my Python script that converts binary to decimals. The caveat with this script is that I can only use basic computational functions (+, -, *, /, **, %, //), if/else, and for/while loops. Shown below is my script: While my script works for binaries with short length (e.g., 1101 = 13), it does not work for long binaries (especially those that have a length of 20). For example, inputting a binary of 11111010010011000111, my script returns an output of 1025217 instead of 1025223. Can anyone point me to my mistake? Thank you in advance!", "abstract": ""}, "answers": [{"id": 67660517, "score": 0, "vote": 0, "content": "You should not use int to convert any number if you have to write a number converter.\nJust use string operations: output", "abstract": ""}, {"id": 67660360, "score": 0, "vote": 0, "content": "You can use the following method to multiple each of the binary digits with its corresponding value of 2 raised to the power to its index (position from right \u2013 1) and sum them up. input : 11111010010011000111 output : 1025223 More examples", "abstract": ""}, {"id": 67660378, "score": 2, "vote": 0, "content": "Floating arithmetic isn't perfect and has a precision limit. 11111010010011000111 / 10 gives 1.1111010010011e+18, which when converted to an integer will give you a wrong result and it snowballs from there. The more binary digits you have, the more \"off\" your calcuations will be. In order to avoid the problem you encountered, use floor division, ie, x // 10. Or you can skip turning x into a number and do the necessary power calculations based off each binary digit and its position.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/63949015/how-to-convert-python-scripts-to-binary-executable-using-pyinstaller", "keywords": [], "tags": ["python", "pyinstaller", "executable"], "question": {"id": 63949015, "title": "How to convert python scripts to binary executable using PyInstaller", "content": "I am working on a project which has below directory structure app.py is the main executable file which is also depended on python files inside src. I want to convert app.py to app.exe which I can easily do using pyinstaller app.py. This creates a dist folder which has python and all the packages. I can simply copy paste the src, configs and logs into dist and can easily share it with everyone. But the problem is I do not want to share python files inside src as it is because it can easily accessed by anyone. I want to convert it into binary executable so that no one can convert or de-compile back into .py files. For this, I can use auto generated .pyc files but I believe this can also be de-compiled back to py. Is there any way I can convert into some kind of binary which can never be de-compiled. Does pyinstaller do this. Is there any command available in pyinstaller which while converting app.py also converts rest of the python files into executable. Please help. Thanks", "abstract": ""}, "answers": [{"id": 63951239, "score": 1, "vote": 0, "content": "If you are importing the additional scripts, pyinstaller will gather those imports and automatically include them. You can use --onefile to ensure only the exe is created for distribution. pyinstaller --onefile app.py", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/62493271/how-to-create-binary-of-python-script", "keywords": [], "tags": ["python", "c++", "angr"], "question": {"id": 62493271, "title": "How to create binary of Python script", "content": "I am trying to use angr, a binary analysis toolkit for Python. I realized that I need a binary file to be able to load the project and start working on it. How can I convert a python script or c++ program to a binary file? Is there a way achieve this? Note: I believe the binary file is different than .exe file as I already tried pycompile which created .exe file.", "abstract": ""}, "answers": []}, {"link": "https://stackoverflow.com/questions/55645822/how-do-i-convert-python-script-into-linux-standalone-executable-binary-using-cyt", "keywords": [], "tags": ["python", "cython", "executable", "binaryfiles"], "question": {"id": 55645822, "title": "How do I convert python script into Linux standalone executable/binary using Cython?", "content": " Above I shared my code directory and \"main.py\" is the file that runs the whole code. Here is the process I followed: I get binary with name \"app_package.so\" which runs perfectly in same directory of code. But when I copy the binary to any other directory it throws an error  unable to import \"verification.py\" file Which means it only compiled main.py and doesn't know about the other packages (e.g. verification.py) Please help me to understand how can I generate a standalone binary executable of python code with all the dependencies.", "abstract": ""}, "answers": []}]