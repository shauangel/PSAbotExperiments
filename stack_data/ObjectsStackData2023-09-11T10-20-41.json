[{"link": "https://stackoverflow.com/questions/72436380/getting-list-of-all-instances-of-given-class", "keywords": [], "tags": ["python", "class", "oop"], "question": {"id": 72436380, "title": "Getting list of all instances of given class", "content": "Is it possible in python to get a list of all instances of given class (just like it's done by .get_lines() method in the code below) and by reffering to specific elements of that list (like it's done in twelfth line of below code by reffering to element with index 0 from the list called \"lines\") is it possible to modify these element? Considering that every element of that list will be an instance of some class is it possible to - for example - change value of one of the instance unique variables or create new one and give it some value? For sake of clarity I'll add that I don't mean classes from framework's or libraries like matplotlib but classes that are written by me - from scratch. I'm attaching figures that were generated by below code as a proof that it works fine. \n", "abstract": ""}, "answers": []}, {"link": "https://stackoverflow.com/questions/328851/printing-all-instances-of-a-class", "keywords": [], "tags": ["python", "class"], "question": {"id": 328851, "title": "Printing all instances of a class", "content": "With a class in Python, how do I define a function to print every single instance of the class in a format defined in the function?", "abstract": ""}, "answers": [{"id": 56849063, "score": 31, "vote": 0, "content": "You don't need to import ANYTHING! Just use \"self\". Here's how you do this It's this simple. No modules or libraries imported", "abstract": ""}, {"id": 63778194, "score": 1, "vote": 0, "content": "In my project, I faced a similar problem and found a simple solution that may also work for you in listing and printing your class instances. The solution worked smoothly in Python version 3.7; gave partial errors in Python version 3.5. I will copy-paste the relevant code blocks from my recent project. In Python the __str__ method in the end, determines how the object will be interpreted in its string form. I added the : in between the curly brackets, they are completely my preference for a \"Pandas DataFrame\" kind of reading.  If you apply this small __str__  function, you will not be seeing some machine-readable object type descriptions- which makes no sense for human eyes. After adding this __str__  function you can append your objects to your list and print them as you wish. For printing, your format in __str__ will work as default. But it is also possible to call all attributes separately: For detailed reading, you may look at the source: https://dbader.org/blog/python-repr-vs-str", "abstract": ""}, {"id": 50063951, "score": 9, "vote": 0, "content": "Very nice and useful code, but it has a big problem: list is always bigger and it is never cleaned-up, to test it just add print(len(cls.__refs__[cls])) at the end of the get_instances method. Here a fix for the get_instances method: or alternatively it could be done using WeakSet:", "abstract": ""}, {"id": 9460070, "score": 33, "vote": 0, "content": "You'll want to create a static list on your class, and add a weakref to each instance so the garbage collector can clean up your instances when they're no longer needed.", "abstract": ""}, {"id": 328883, "score": 4, "vote": 0, "content": "Python doesn't have an equivalent to Smallktalk's #allInstances as the architecture doesn't have this type of central object table (although modern smalltalks don't really work like that either). As the other poster says, you have to explicitly manage a collection.  His suggestion of a factory method that maintains a registry is a perfectly reasonable way to do it.  You may wish to do something with weak references so you don't have to explicitly keep track of object disposal.", "abstract": ""}, {"id": 328856, "score": 7, "vote": 0, "content": "Same as almost all other OO languages, keep all instances of the class in a collection of some kind. You can try this kind of thing. Now you can do this.", "abstract": ""}, {"id": 328882, "score": 126, "vote": 0, "content": "I see two options in this case: This has the disadvantage of being very slow when you have a lot of objects, but works with types over which you have no control. In this case, all the references get stored as a weak reference in a list. If you create and delete a lot of instances frequently, you should clean up the list of weakrefs after iteration, otherwise there's going to be a lot of cruft.  Another problem in this case is that you have to make sure to call the base class constructor. You could also override __new__, but only the __new__ method of the first base class is used on instantiation. This also works only on types that are under your control. Edit: The method for printing all instances according to a specific format is left as an exercise, but it's basically just a variation on the for-loops.", "abstract": ""}, {"id": 329351, "score": 2, "vote": 0, "content": "It's not clear if you need to print all class instances at once or when they're initialized, nor if you're talking about a class you have control over vs a class in a 3rd party library. In any case, I would solve this by writing a class factory using Python metaclass support.  If you don't have control over the class, manually update the __metaclass__ for the class or module you're tracking. See http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html for more information.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/19526456/get-all-instances-of-class-in-javascript", "keywords": [], "tags": ["javascript", "class", "object"], "question": {"id": 19526456, "title": "Get all instances of class in Javascript", "content": "I thought there would already be an answer for this but I can't seem to find one..\nHow can I run a particular class method on all instances of this class in Javascript? This has to be done in a situation where I do not know the names of the instances.\nI think I could use some sort of static variable inside my class to store all instances, but this doesn't seem to exist in JS So how to call my method on all existing instances of my class?\nNote : just for clarification : I'm not speaking about CSS classes, I'm speaking about objects. Edit : By Class in Javascript, I mean the creation of a new object on a function:", "abstract": ""}, "answers": [{"id": 50568777, "score": 14, "vote": 0, "content": "In Chrome 62+ you can use queryObjects from the console API - which will not work in native JavaScript code but in the console so it's great for debugging.", "abstract": ""}, {"id": 65543956, "score": 4, "vote": 0, "content": "Keyword 'static' could be used in classes now (but check support), ... https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static \n\nclass Point{\n    constructor(x, y){\n        this.x = x;\n        this.y = y;\n        Point.all.push(this);\n    }\n    destroy(){\n        let i = Point.all.indexOf(this);\n        Point.all.splice(i, 1);\n    }\n    static all = [];\n}\n\nvar p1 = new Point(1, 2);\nvar p2 = new Point(54, 33);\nvar p3 = new Point(297, 994);\n\nconsole.log(JSON.stringify(Point.all)); //[{\"x\":1,\"y\":2},{\"x\":54,\"y\":33},{\"x\":297,\"y\":994}]\n\np2.destroy();\nconsole.log(JSON.stringify(Point.all)); //[{\"x\":1,\"y\":2},{\"x\":297,\"y\":994}]\n\n\n", "abstract": ""}, {"id": 28613711, "score": 8, "vote": 0, "content": "Sorry for such a late reply, but I found myself trying to achieve this and I think this may be a simpler answer. Say you want all instances of class MyClass, only get instances created at top window level (not including instances created inside a closure):", "abstract": ""}, {"id": 19527357, "score": 9, "vote": 0, "content": "You'll have to provide a custom implementation.  I would do something like this : Or like this : Then you could loop through all instances like so :", "abstract": ""}, {"id": 19527292, "score": 2, "vote": 0, "content": "You'll need to store a list of instances yourself: If memory leaks are a concern then you can create a method for deleting instances when you are done with them:", "abstract": ""}, {"id": 19526541, "score": 19, "vote": 0, "content": "You can create a static array and store it on your constructor function: However, you need some way to figure out when to remove instances from this array, or you'll leak memory.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/62121338/how-to-create-a-list-of-instances-of-a-given-class", "keywords": [], "tags": ["python", "list"], "question": {"id": 62121338, "title": "How to create a list of instances of a given class", "content": "I'm facing problem with my code. In fact, I need to create a list of instances of my class( Patent). The name of the list is patent_ints. But when I'm trying to verify if any element in that list is a Patent one, I'm always getting a False response. And when iterating the first element is like \"<__main__.Patent at 0x7f107820b710>\".\nHere is my code, I need help ! Thank you in advance!", "abstract": ""}, "answers": [{"id": 62121423, "score": 1, "vote": 0, "content": "<__main__.Patent at 0x7f107820b710> is the default representation of the class when you try to print it. Add an __str__ or __repr__ method to the class and define some custom logic to return your desired details as a string:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/61188218/how-to-get-all-instances-of-a-given-class-in-another-module", "keywords": [], "tags": ["python", "oop"], "question": {"id": 61188218, "title": "How to get all instances of a given class in another module", "content": "So I'm not sure if this question was answered elsewhere but I couldn't find any viable solution specifically relevant to this case as they were either how to access the instances in the same file (which works fine) or using reload() (which didn't work). I've got two python files, module1.py and module2.py. In module1.py there's a class with a bunch of instances that I need to access from module2.\nI append each instance to a list (as a class variable) on instantiation but when importing module1, the instances haven't been instantiated so this list is empty. This means I can access this list of instances in module1 but in module2 it is empty. module1.py module2.py So how can I access these instances which are created in module1 from module2?", "abstract": ""}, "answers": [{"id": 61188330, "score": 0, "vote": 0, "content": "What you should do instead, is call the Class you're importing, so either import using [* (Import all)][1] or import specific classes as so: and In module1: Now instances has 2 elements, and you can access them in module2 ", "abstract": ""}, {"id": 61188432, "score": 1, "vote": 0, "content": "See the module1.py below: Only if you create an object then would that be added to the instances[] list. since you didn't create an object, the list was empty. And in the module2.py: The instances list belongs to the class so you need to give like module1.Class1.instances The output is like below:\nAfter running both the files :", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/21149708/how-to-get-all-instances-of-a-certain-class-in-python", "keywords": [], "tags": ["python", "class"], "question": {"id": 21149708, "title": "How to get all instances of a certain class in python?", "content": "Someone asked a similar one [question]:Printing all instances of a class. \nWhile I am less concerned about printing them, I'd rather to know how many instances are currently \"live\". \nThe reason for this instance capture is more like a setting up a scheduled job, every hour check these \"live\" unprocessed instances and enrich the data. After that, either a flag in this instance is set or just delete this instance. \nTorsten Marek 's answer in [question]:Printing all instances of a class using weakrefs need a call to the base class constructor for every class of this type, is it possible to automate this? Or we can get all instances with some other methods?", "abstract": ""}, "answers": [{"id": 21149936, "score": 6, "vote": 0, "content": "You can either track it on your own (see the other answers) or ask the garbage collector: This can be kinda slow if you have a lot of objects, but it's generally not too bad, and it has the advantage of being something you can easily use with someone else's code. Note: Used o.__class__ rather than type(o) so it works with old-style classes.", "abstract": ""}, {"id": 47030886, "score": 0, "vote": 0, "content": "I cannot comment to the answer of kindall, thus I write my comment as answer: The solution with gc.get_referrers(<ClassName>) does not work with inherited classes in python 3. The method gc.get_referrers(<ClassName>) does not return any instances of a class that was inherited from <ClassName>.  Instead you need to use gc.get_objects() which is much slower, since it returns a full list of objects. But in case of unit-tests, where you simply want to ensure your objects get deleted after the test (no circular references) it should be sufficient and fast enough.  Also do not forget to call gc.collect() before checking the number of your instances, to ensure all unreferenced instances are really deleted. I also saw an issue with weak references which are also counted in this way. The problem with weak references is, that the object which is referenced might not exist any more, thus isinstance(Instance, Class) might fail with an error about non existing weak references. Here is a simple code example:", "abstract": ""}, {"id": 21149800, "score": 1, "vote": 0, "content": "Sure, store the count in a class attribute: You could make this slightly more magical with a decorator or a metaclass than with a base class, or simpler if it can be a bit less general (I've attempted to make this fit in anywhere in any reasonable multiple-inheritance hierarchy, which you usually don't need to worry about\u2026), but basically, this is all there is to it. If you want to have the instances themselves (or, better, weakrefs to them), rather than just a count of them, just replace count=0 with instances=set(), then do instances.add(self) instead of count += 1, etc. (Again, though, you probably want a weakref to self, rather than self.)", "abstract": ""}, {"id": 21149937, "score": 3, "vote": 0, "content": "If you only want this to work for CPython, and your definition of \"live\" can be a little lax, there's another way to do this that may be useful for debugging/introspection purposes: Note that deleting spam didn't actually make it non-live, because we've still got a reference to the same object in foos. And reassigning foos didn't not help, because apparently the call to get_objects happened before the old version is released. But eventually it went away once we stopped referring to it. And the only way around this problem is to use weakrefs. Of course this will be horribly slow in a large system, with or without weakrefs.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/55544878/how-to-easily-find-a-class-instance-in-a-list-with-a-given-class-attribute", "keywords": [], "tags": ["python", "reference", "class-attributes"], "question": {"id": 55544878, "title": "how to easily find a class instance in a list with a given class attribute?", "content": "I'm a newbie. I am wondering if there is a way to easily find an instance of a class in a list with a given attribute. (Python) basically the set up is as follows: So a is a list with two instances of the class idk. How do I easily find the elements of a with name \"x\"? I am looking for something like:  or ", "abstract": ""}, "answers": [{"id": 55544899, "score": 1, "vote": 0, "content": "You could use filter: but your list comprehension could work just fine as well.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/54129354/find-all-instances-of-a-certain-class", "keywords": [], "tags": ["purescript"], "question": {"id": 54129354, "title": "Find all instances of a certain class", "content": "Is there a way to pragmatically enumerate all instances of a class? In Pursuit I can see that Extend has 2 instances, but what if I have other instances declared in my code base? Can it be done at least in pulp repl?", "abstract": ""}, "answers": [{"id": 54444104, "score": 0, "vote": 0, "content": "As far as I'm aware no. But here's a cheap little hack using jq that might tell you what you need to know:  Run from the the root of your project this should print out all known instance names. And seeing as we conventionally name instances classType (e.g. showBoolean) you should be able to grep for the class(es) you're interested in.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/49997070/how-to-grab-all-members-of-a-class-instance-with-a-given-type", "keywords": [], "tags": ["c#", ".net", "reflection", "c#-5.0"], "question": {"id": 49997070, "title": "How to grab all members of a class instance with a given type?", "content": "I have a class like  How to grab all its contents of one type (say float in the given sample) and return them on property access?", "abstract": ""}, "answers": [{"id": 49997369, "score": 7, "vote": 0, "content": "Reflection is your friend. Output:", "abstract": ""}, {"id": 49997349, "score": 1, "vote": 0, "content": "You can use reflection for this.\nSome pseudo-code:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/11112381/finding-all-instances-of-a-given-class-in-an-array", "keywords": [], "tags": ["java"], "question": {"id": 11112381, "title": "Finding all instances of a given class in an array", "content": "I have a program where I need to find all instances of a class within an array. I would like to create a method that does this for me. For instance, if I have the array and I called this method with argument of String (I'm not sure what the type of my argument should be, actually), it would return an array of {\"mystring\"}. I've tried things like But that doesn't even compile. Does anyone know how to do this? Or is it not possible to do?", "abstract": ""}, "answers": [{"id": 11118917, "score": 1, "vote": 0, "content": "It doesn't look like idiomatic Java. You would normally only build arrays for specific classes and not mix different classes like String, Boolean, Integer, Character.  This is normally a code smell.  If you have a hierarchy like  AFoo, BFoo, CFoo -> extending Foo, and have them in an Array, you would make them react significantly to a message:  AFoos could then react in another way than BFoos. Else use instanceof: ", "abstract": ""}, {"id": 11112408, "score": 2, "vote": 0, "content": "That doesn't work since it's testing if obj is an instanceof the literal c class. I don't have a Java environment handy, but I believe something like should do the trick. This probably doesn't work with subclasses though, but that shouldn't be an issue here. Edit: as others have pointed out is the better choice The larger question is...why are you doing this? Trying to simulate loose typing in Java is an admirable goal but usually a very bad idea. Use proper polymorphism and/or generics instead (with custom classes).", "abstract": ""}, {"id": 11112437, "score": 0, "vote": 0, "content": "Have you tried:", "abstract": ""}, {"id": 11112414, "score": 6, "vote": 0, "content": "Looks like you want Class.isInstance(Object o): Determines if the specified Object is assignment-compatible with the object represented by this Class. This method is the dynamic equivalent of the Java language instanceof operator. The method returns true if the specified Object argument is non-null and can be cast to the reference type represented by this Class object without raising a ClassCastException. It returns false otherwise. ", "abstract": ""}]}]