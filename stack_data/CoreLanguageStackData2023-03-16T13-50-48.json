[
  {
    "link": "https://stackoverflow.com/questions/423379/using-global-variables-in-a-function",
    "keywords": [],
    "tags": [
      "python",
      "global-variables",
      "scope"
    ],
    "question": {
      "id": 423379,
      "title": "Using global variables in a function",
      "content": "How do I create or use a global variable inside a function? How do I use a global variable that was defined in one function inside other functions? Failing to use the global keyword where appropriate often causes UnboundLocalError. The precise rules for this are explained at UnboundLocalError on local variable when reassigned after first use. Generally, please close other questions as a duplicate of that question when an explanation is sought, and this question when someone simply needs to know the global keyword.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 423596,
        "score": 5064,
        "vote": 0,
        "content": "You can use a global variable within other functions by declaring it as global within each function that assigns a value to it: Since it's unclear whether globvar = 1 is creating a local variable or changing a global variable, Python defaults to creating a local variable, and makes you explicitly choose the other behavior with the global keyword. See other answers if you want to share a global variable across modules.",
        "abstract": ""
      },
      {
        "id": 74636428,
        "score": -2,
        "vote": 0,
        "content": "if you want to access global var you just add global keyword inside your function\nex:\nglobal_var = 'yeah'",
        "abstract": ""
      },
      {
        "id": 423668,
        "score": 885,
        "vote": 0,
        "content": "If I'm understanding your situation correctly, what you're seeing is the result of how Python handles local (function) and global (module) namespaces. Say you've got a module like this: You might expecting this to print 42, but instead it prints 5.  As has already been mentioned, if you add a 'global' declaration to func1(), then func2() will print 42. What's going on here is that Python assumes that any name that is assigned to, anywhere within a function, is local to that function unless explicitly told otherwise.  If it is only reading from a name, and the name doesn't exist locally, it will try to look up the name in any containing scopes (e.g. the module's global scope). When you assign 42 to the name _my_global, therefore, Python creates a local variable that shadows the global variable of the same name.  That local goes out of scope and is garbage-collected when func1() returns; meanwhile, func2() can never see anything other than the (unmodified) global name.  Note that this namespace decision happens at compile time, not at runtime -- if you were to read the value of _my_global inside func1() before you assign to it, you'd get an UnboundLocalError, because Python has already decided that it must be a local variable but it has not had any value associated with it yet.  But by using the 'global' statement, you tell Python that it should look elsewhere for the name instead of assigning to it locally. (I believe that this behavior originated largely through an optimization of local namespaces -- without this behavior,  Python's VM would need to perform at least three name lookups each time a new name is assigned to inside a function (to ensure that the name didn't already exist at module/builtin level), which would significantly slow down a very common operation.)",
        "abstract": ""
      },
      {
        "id": 71883300,
        "score": 0,
        "vote": 0,
        "content": "Here we are comparing global variable Initialized that 0, so while loop condition got true Function will get called.Loop will be infinite",
        "abstract": ""
      },
      {
        "id": 71663780,
        "score": 9,
        "vote": 0,
        "content": "Explanation: global_var is a global variable and all functions and classes can access that variable. The func_1() accessed that global variable using the keyword global which points to the variable which is written in the global scope. If I didn't write the global keyword the variable global_var inside func_1 is considered a local variable that is only usable inside the function. Then inside func_1, I have incremented that global variable by 1. The same happened in func_2(). After calling func_1 and func_2, you'll see the global_var is changed",
        "abstract": ""
      },
      {
        "id": 71074895,
        "score": 1,
        "vote": 0,
        "content": "Like this code: Key: If you declare a variable outside the strings, it become global. If you declare a variable inside the strings, it become local. If you want to declare a global variable inside the strings, use the keyword global before the variable you want to declare: and then you have 100 in the document.",
        "abstract": ""
      },
      {
        "id": 67339244,
        "score": 5,
        "vote": 0,
        "content": "Though this has been answered, I am giving solution again as I prefer single line\nThis is if you wish to create global variable within function",
        "abstract": ""
      },
      {
        "id": 423401,
        "score": 270,
        "vote": 0,
        "content": "You may want to explore the notion of namespaces. In Python, the module is the natural place for global data: Each module has its own private symbol table, which is used as the global symbol table by all functions defined in the module. Thus, the author of a module can use global variables in the module without worrying about accidental clashes with a user’s global variables. On the other hand, if you know what you are doing you can touch a module’s global variables with the same notation used to refer to its functions, modname.itemname. A specific use of global-in-a-module is described here - How do I share global variables across modules?, and for completeness the contents are shared here: The canonical way to share information across modules within a single program is to create a special configuration module (often called config or cfg). Just import the configuration module in all modules of your application; the module then becomes available as a global name. Because there is only one instance of each module, any changes made to the module object get reflected everywhere. For example: File: config.py File: mod.py File: main.py",
        "abstract": ""
      },
      {
        "id": 27287648,
        "score": 33,
        "vote": 0,
        "content": "What you are saying is to use the method like this: But the better way is to use the global variable like this: Both give the same output.",
        "abstract": ""
      },
      {
        "id": 28329600,
        "score": 30,
        "vote": 0,
        "content": "Try this:",
        "abstract": ""
      },
      {
        "id": 63629668,
        "score": 7,
        "vote": 0,
        "content": "There are 2 ways to declare a variable as global: 1. assign variable inside functions and use global line 2. assign variable outside functions: Now we can use these declared global variables in the other functions: Note 1: If you want to change a global variable inside another function like update_variables() you should use global line in that function before assigning the variable: Note 2: There is a exception for note 1 for list and dictionary variables while not using global line inside a function:",
        "abstract": ""
      },
      {
        "id": 61992762,
        "score": 8,
        "vote": 0,
        "content": "Globals in connection with multiprocessing on different platforms/envrionments \nas Windows/Mac OS on the one side and Linux on the other are troublesome. I will show you this with a simple example pointing out a problem which I run into some time ago.  If you want to understand, why things are different on Windows/MacOs and Linux you \nneed to know that, the default mechanism to start a new process on ... They are different in Memory allocation an initialisation ... (but I don't go into this\nhere).  Let's have a look at the problem/example ... If you run this on Windows (And I suppose on MacOS too), you get the following output ... If you run this on Linux, you get the following instead. ",
        "abstract": ""
      },
      {
        "id": 34559513,
        "score": 68,
        "vote": 0,
        "content": "We can create a global with the following function: Writing a function does not actually run its code. So we call the create_global_variable function: You can just use it, so long as you don't expect to change which object it points to:  For example,  and now we can use the global variable: To point the global variable at a different object, you are required to use the global keyword again: Note that after writing this function, the code actually changing it has still not run: So after calling the function: we can see that the global variable has been changed. The global_variable name now points to 'Bar': Note that \"global\" in Python is not truly global - it's only global to the module level. So it is only available to functions written in the modules in which it is global. Functions remember the module in which they are written, so when they are exported into other modules, they still look in the module in which they were created to find global variables. If you create a local variable with the same name, it will overshadow a global variable: But using that misnamed local variable does not change the global variable: Note that you should avoid using the local variables with the same names as globals unless you know precisely what you are doing and have a very good reason to do so. I have not yet encountered such a reason. A follow on comment asks: what to do if I want to create a global variable inside a function inside a class and want to use that variable inside another function inside another class? Here I demonstrate we get the same behavior in methods as we do in regular functions: And now: But I would suggest instead of using global variables you use class attributes, to avoid cluttering the module namespace. Also note we don't use self arguments here - these could be class methods (handy if mutating the class attribute from the usual cls argument) or static methods (no self or cls).",
        "abstract": ""
      },
      {
        "id": 46058078,
        "score": 9,
        "vote": 0,
        "content": "I'm adding this as I haven't seen it in any of the other answers and it might be useful for someone struggling with something similar. The globals() function returns a mutable global symbol dictionary where you can \"magically\" make data available for the rest of your code. \nFor example: and  Will just let you dump/load variables out of and into the global namespace. Super convenient, no muss, no fuss. Pretty sure it's Python 3 only.",
        "abstract": ""
      },
      {
        "id": 33320055,
        "score": 20,
        "vote": 0,
        "content": "Following on and as an add on, use a file to contain all global variables all declared locally and then import as: File initval.py: File getstocks.py:",
        "abstract": ""
      },
      {
        "id": 19347254,
        "score": 35,
        "vote": 0,
        "content": "As it turns out the answer is always simple. Here is a small sample module with a simple way to show it in a main definition: Here is how to show it in a main definition: This simple code works just like that, and it will execute. I hope it helps.",
        "abstract": ""
      },
      {
        "id": 45769568,
        "score": 8,
        "vote": 0,
        "content": "Reference the class namespace where you want the change to show up.   In this example, runner is using max from the file config. I want my test to change the value of max when runner is using it. main/config.py main/runner.py tests/runner_test.py",
        "abstract": ""
      },
      {
        "id": 43285234,
        "score": 23,
        "vote": 0,
        "content": "In case you have a local variable with the same name, you might want to use the globals() function.",
        "abstract": ""
      },
      {
        "id": 423641,
        "score": 74,
        "vote": 0,
        "content": "If you want to refer to a global variable in a function, you can use the global keyword to declare which variables are global. You don't have to use it in all cases (as someone here incorrectly claims) - if the name referenced in an expression cannot be found in local scope or scopes in the functions in which this function is defined, it is looked up among global variables. However, if you assign to a new variable not declared as global in the function, it is implicitly declared as local, and it can overshadow any existing global variable with the same name. Also, global variables are useful, contrary to some OOP zealots who claim otherwise - especially for smaller scripts, where OOP is overkill.",
        "abstract": ""
      },
      {
        "id": 19151605,
        "score": 41,
        "vote": 0,
        "content": "With parallel execution, global variables can cause unexpected results if you don't understand what is happening. Here is an example of using a global variable within multiprocessing. We can clearly see that each process works with its own copy of the variable: Output:",
        "abstract": ""
      },
      {
        "id": 34664752,
        "score": 17,
        "vote": 0,
        "content": "Writing to explicit elements of a global array does not apparently need the global declaration, though writing to it \"wholesale\" does have that requirement:",
        "abstract": ""
      },
      {
        "id": 27580376,
        "score": 30,
        "vote": 0,
        "content": "You need to reference the global variable in every function you want to use. As follows:",
        "abstract": ""
      },
      {
        "id": 24572187,
        "score": 58,
        "vote": 0,
        "content": "In addition to already existing answers and to make this more confusing: In Python, variables that are only referenced inside a function are\n  implicitly global. If a variable is assigned a new value anywhere\n  within the function’s body, it’s assumed to be a local. If a variable\n  is ever assigned a new value inside the function, the variable is\n  implicitly local, and you need to explicitly declare it as ‘global’. Though a bit surprising at first, a moment’s consideration explains\n  this. On one hand, requiring global for assigned variables provides a\n  bar against unintended side-effects. On the other hand, if global was\n  required for all global references, you’d be using global all the\n  time. You’d have to declare as global every reference to a built-in\n  function or to a component of an imported module. This clutter would\n  defeat the usefulness of the global declaration for identifying\n  side-effects. Source: What are the rules for local and global variables in Python?.",
        "abstract": ""
      },
      {
        "id": 6664227,
        "score": 115,
        "vote": 0,
        "content": "Python uses a simple heuristic to decide which scope it should load a variable from, between local and global.  If a variable name appears on the left hand side of an assignment, but is not declared global, it is assumed to be local.  If it does not appear on the left hand side of an assignment, it is assumed to be global.   See how baz, which appears on the left side of an assignment in foo(), is the only LOAD_FAST variable.",
        "abstract": ""
      },
      {
        "id": 427818,
        "score": 27,
        "vote": 0,
        "content": "You're not actually storing the global in a local variable, just creating a local reference to the same object that your original global reference refers to. Remember that pretty much everything in Python is a name referring to an object, and nothing gets copied in usual operation. If you didn't have to explicitly specify when an identifier was to refer to a predefined global, then you'd presumably have to explicitly specify when an identifier is a new local variable instead (for example, with something like the 'var' command seen in JavaScript). Since local variables are more common than global variables in any serious and non-trivial system, Python's system makes more sense in most cases. You could have a language which attempted to guess, using a global variable if it existed or creating a local variable if it didn't. However, that would be very error-prone. For example, importing another module could inadvertently introduce a global variable by that name, changing the behaviour of your program.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/75200246/global-variable-not-recognized-says-its-local-variable",
    "keywords": [],
    "tags": [
      "python",
      "variables",
      "pysimplegui"
    ],
    "question": {
      "id": 75200246,
      "title": "global variable not recognized; says its local variable",
      "content": "Its not recognizing the global variable. I experienced this issue before and thought the global variable would prevent the error but no matter what i try it always returns this: local variable 'P1o' referenced before assignment",
      "abstract": ""
    },
    "answers": [
      {
        "id": 75200331,
        "score": 0,
        "vote": 0,
        "content": "I would suggest you to use P1o and P2o as your local variables, as they are only needed in your battleship function. You can use them as your global or as your local variables. I'll leave the choice to you. CASE 1: Using it as local variable: Here, it just creates two local variables for the function and would prevent the referenced before assignment error. CASE 2: Using it as global variable: global keyword is used to reference the globals() dictionary where all the global variables are mentioned. So, it would tell the function that P1o and P2o is a global variable.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/75048481/how-to-use-local-non-local-and-global-variables-in-the-same-inner-function-with",
    "keywords": [],
    "tags": [
      "python",
      "global-variables",
      "local-variables",
      "python-nonlocal",
      "inner-function"
    ],
    "question": {
      "id": 75048481,
      "title": "How to use local, non-local and global variables in the same inner function without errors in Python?",
      "content": "When trying to use the local and non-local variables x in inner() as shown below: Or, when trying to use the global and non-local variables x in inner() as shown below: I got the error below: SyntaxError: name 'x' is used prior to nonlocal declaration And, when trying to use the local and global variables x in inner() as shown below: Or, when trying to use the non-local and global variables x in inner() as shown below: I got the error below: SyntaxError: name 'x' is used prior to global declaration In addition, when trying to define the non-local and global variables x in inner() as shown below: Or, when trying to define the global and non-local variables x in inner() as shown below: I got the error below: SyntaxError: name 'x' is nonlocal and global And, when trying to define the local and non-local variables x in inner() as shown below: I got the error below: SyntaxError: name 'x' is assigned to before nonlocal declaration And, when trying to define the local and global variables x in inner() as shown below: I got the error below: SyntaxError: name 'x' is assigned to before global declaration So, how can I use local, non-local and global variables in the same inner function without the errors above?",
      "abstract": ""
    },
    "answers": [
      {
        "id": 75048571,
        "score": 1,
        "vote": 0,
        "content": "You can't do this. What you can do is avoid creating local names that shadow non-local names when you know you want to use the non-local ones.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/75020080/global-variable-becomes-local",
    "keywords": [],
    "tags": [
      "python",
      "function",
      "global",
      "local"
    ],
    "question": {
      "id": 75020080,
      "title": "Global Variable becomes local",
      "content": "If the title is a bit cryptic (I have no idea how to put my issue in one title) here the explanation. I have a global variable Then, I have two functions: When I enter the \"end-function\" the id of \"ex\" in the function is not the same as the original id. So, they are basically two different variables. I do not understand why this happens. I mean, I know that it happens because I do set \"ex = True\" (because if I skip this line, the id is the same). But I do not understand why. I thought the idea of global keyword is exactly to make it possible to set global variables inside a function.\nUsing global variables in a function",
      "abstract": ""
    },
    "answers": [
      {
        "id": 75020199,
        "score": 1,
        "vote": 0,
        "content": "The problem is that bools are immutual. So when you change the global variable ex, you change to where it points to (i.e., a different object). You can easily simulate that: If your variable would be of a mutual type and you change a value in it, it would not change the id. In the following example I place a wrapper around the bool And the id of the variable stays uncahnged. In general, in python variables point to object in the global or local storage. When you change the \"value\" of a variable you need to distinguish between mutable and immutable types.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/74352096/global-and-local-variables-comparison",
    "keywords": [],
    "tags": [
      "python",
      "global-variables",
      "local-variables"
    ],
    "question": {
      "id": 74352096,
      "title": "global and local variables comparison",
      "content": "",
      "abstract": ""
    },
    "answers": []
  },
  {
    "link": "https://stackoverflow.com/questions/62212489/for-some-reason-my-code-thinks-a-global-variable-is-a-local-variable",
    "keywords": [],
    "tags": [
      "python",
      "kivy"
    ],
    "question": {
      "id": 62212489,
      "title": "For some reason my code thinks a global variable is a local variable",
      "content": "So I am working on a basic application, press a button and it adds the number to the total, the total is a global variable, but the program things it is a local variable. Here is the code, any help would be appreciated.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 62212545,
        "score": 1,
        "vote": 0,
        "content": "totalCarbs(local) = totalCarbs(global) + apple\nyou can do this..",
        "abstract": ""
      },
      {
        "id": 62212528,
        "score": 1,
        "vote": 0,
        "content": "You need to specify the global scope of a variable inside a function:",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/72922119/is-it-possible-to-take-the-local-variable-of-a-function-and-convert-it-to-a-glob",
    "keywords": [],
    "tags": [
      "python",
      "function",
      "variables",
      "global",
      "local"
    ],
    "question": {
      "id": 72922119,
      "title": "Is it possible to take the Local Variable of a Function and convert it to a Global Variable or use it in an other Function",
      "content": "I'd like to know, If I can use the Local Variable of a Function (I'll call it for now Fct.1) in an other Function (Fct.2) (so that a variable in Fct.2 is assgined the same value of a Variable in Fct.1) or if it's possible to convert automatically a Local Variable into a Global Variable. For example: What I want to do is use the example Variable in Fct1 in Fct2. Is that possible? I hope you can help me.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 72922552,
        "score": 0,
        "vote": 0,
        "content": "There are a few ways in Python through which you can manipulate global and local variables of different objects from other objects. Most of those are advanced coding and some include fiddleing with Python interpreter mechanisms. However, what you want is quite simple: Note that global variables are accessible for read from a function, but unless you declare it as global at the top of your function, assigning a value to it will just make a local variable with the same name, and the global one will be left alone. There are good reasons for that, some of which are already pointed out in the other answer. To do the same thing, but much more acceptable would be to use objects: Perhaps you may want to learn objective oriented programming for your project. It is usually the solution when functions need to share resources in a way you asked for. Some programmers are positively afraid of global variables and are trying to avoid them at all costs. That's because they are very bad at debugging and, in short, are bad programmers. Using them is a bit tricky because you must always keep track of your global variables and what is happening to them, and where, in order not to make any mistakes. This can be especially nasty for big projects in low-level programming languages like C. But sometimes they are simply unavoidable and you would make a bigger mess by avoiding them. To help you remember what you are dealing with Python has the keyword global. Your case though is not exactly one where you would use a global variable. But you must decide. When you use them, make sure that they are used for exactly one purpose and avoid using the same name for local variables anywhere else and you will be fine. Also, minimize the number of functions that are allowed to actually change them.",
        "abstract": ""
      },
      {
        "id": 72922161,
        "score": 0,
        "vote": 0,
        "content": "fct2 shouldn't care what name fct1 might use to store the value. fct1 should return the value, and let the caller assign that value to any variable they want. You can then use that as a global variable: but better yet, pass values as arguments:",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/14051916/how-to-make-a-local-variable-inside-a-function-global",
    "keywords": [],
    "tags": [
      "python",
      "function",
      "global-variables",
      "local"
    ],
    "question": {
      "id": 14051916,
      "title": "How to make a local variable (inside a function) global",
      "content": "I'm using functions so that my program won't be a mess but I don't know how to make a local variable into global.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 14052167,
        "score": 39,
        "vote": 0,
        "content": "Here are two methods to achieve the same thing: Using parameters and return (recommended) When you run main_function, you'll get the following output Using globals (never do this) Now you will get:",
        "abstract": ""
      },
      {
        "id": 14053178,
        "score": 5,
        "vote": 0,
        "content": "You could use module scope. Say you have a module called utils: f_value is a module attribute that can be modified by any other module that imports it. As modules are singletons, any change to utils from one module will be accessible to all other modules that have it imported: Note that you can import the function by name: But not the attribute: This is because you're labeling the object referenced by the module attribute as f_value in the local scope, but then rebinding it to the string bar, while the function f is still referring to the module attribute.",
        "abstract": ""
      },
      {
        "id": 14053041,
        "score": 14,
        "vote": 0,
        "content": "If you need access to the internal states of a function, you're possibly better off using a class. You can make a class instance behave like a function by making it a callable, which is done by defining __call__:",
        "abstract": ""
      },
      {
        "id": 14051943,
        "score": 7,
        "vote": 0,
        "content": "Using globals will also make your program a mess - I suggest you try very hard to avoid them. That said, \"global\" is a keyword in python, so you can designate a particular variable as a global, like so: I should mention that it is extremely rare for the 'global' keyword to be used, so I seriously suggest rethinking your design.",
        "abstract": ""
      },
      {
        "id": 14051937,
        "score": 15,
        "vote": 0,
        "content": "Simply declare your variable outside any function: If you need to assign to the global from within the function, use the global statement:",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/72688521/python-local-variable-to-global-variable",
    "keywords": [],
    "tags": [
      "python",
      "function",
      "variables",
      "global",
      "local"
    ],
    "question": {
      "id": 72688521,
      "title": "Python local variable to global variable",
      "content": "I'm trying to write a modular script, with functions -Function 1\nage = input(\"tell me your age : \") -Function 2\nweight = input(\"tell me your weight : \") -Function 3\nbirthday = input(\"tell me your birthday : \") at the end, i want to send a mail outside functions like : mail_body = age + weight + birthday Thanks you for your time !",
      "abstract": ""
    },
    "answers": [
      {
        "id": 72690281,
        "score": 0,
        "vote": 0,
        "content": "you could either use the return command at the end of function to deliver the information to where it is called for example if your function is mailinfo() then you can process the info like Or you can declare mail_body as a global function at the start of program",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/62099060/what-is-the-scope-of-global-variables-between-two-functions",
    "keywords": [],
    "tags": [
      "python",
      "variables"
    ],
    "question": {
      "id": 62099060,
      "title": "What is the scope of global variables between two functions",
      "content": "I am but confused over here. Should I declare a variable a global variable if it is already set in a function?\nI mean If it is not required, then can I do like this ? Is there a way to get list of all variables used in script and sort out which of them are global ?",
      "abstract": ""
    },
    "answers": [
      {
        "id": 62099139,
        "score": 0,
        "vote": 0,
        "content": "You can use globals() to give you a dictionary of global variables.\nYou only need to use the keyword global if you plan to update a global variable, not if you are trying to access its value You do need to assign them outside of the function so in your case ",
        "abstract": ""
      },
      {
        "id": 62099136,
        "score": 0,
        "vote": 0,
        "content": "You need to use global in any function that will assign a value to that variable. global tells the function that the name isn't in its local namespace. When you just use the variable, python will try the local namespace, not find the variable, and then fall back to the global namespace. When you try to set a variable, python can't know whether you meant a local variable that happens to have the same name or a global one. Hence the global decoration. In your first example, you need global in function1 because you assign the variables. You don't need it in function2 because you only use them, you don't assign anything to them.",
        "abstract": ""
      }
    ]
  }
]