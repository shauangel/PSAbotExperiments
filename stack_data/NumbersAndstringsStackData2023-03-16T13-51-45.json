[{"link": "https://stackoverflow.com/questions/75653771/octal-to-decimal-conversion-of-number", "keywords": [], "tags": ["python", "math"], "question": {"id": 75653771, "title": "Octal to Decimal conversion of number", "content": "I want to convert an octal number into a decimal one. Why am I getting 6 as an output instead of 83?", "abstract": ""}, "answers": [{"id": 75653832, "score": 2, "vote": 0, "content": "write i+=1 instead of ++i,theres no such operator as ++ in python", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/209513/convert-hex-string-to-integer-in-python", "keywords": [], "tags": ["python", "string", "hex"], "question": {"id": 209513, "title": "Convert hex string to integer in Python", "content": "How do I convert a hex string to an integer?", "abstract": ""}, "answers": [{"id": 21187085, "score": 12, "vote": 0, "content": "Why is using 'eval' a bad practice? 15000+ examples of this in the wild.", "abstract": ""}, {"id": 209550, "score": 1393, "vote": 0, "content": "Without the 0x prefix, you need to specify the base explicitly, otherwise there's no way to tell: With the 0x prefix, Python can distinguish hex and decimal automatically: (You must specify 0 as the base in order to invoke this prefix-guessing behavior; if you omit the second parameter, int() will assume base-10.)", "abstract": ""}, {"id": 209529, "score": 218, "vote": 0, "content": "int(hexstring, 16) does the trick, and works with and without the 0x prefix:", "abstract": ""}, {"id": 58997192, "score": 1, "vote": 0, "content": "Handles hex, octal, binary, int, and float Using the standard prefixes (i.e. 0x, 0b, 0, and 0o)  this function will convert any suitable string to a number.  I answered this here: https://stackoverflow.com/a/58997070/2464381 but here is the needed function.", "abstract": ""}, {"id": 56859334, "score": 4, "vote": 0, "content": "If you are using the python interpreter, you can just type 0x(your hex value) and the interpreter will convert it automatically for you.", "abstract": ""}, {"id": 52884568, "score": 6, "vote": 0, "content": "Or ast.literal_eval (this is safe, unlike eval): Demo:", "abstract": ""}, {"id": 37221971, "score": 55, "vote": 0, "content": "I may have it as \"0xffff\" or just \"ffff\". To convert a string to an int, pass the string to int along with the base you are converting from. Both strings will suffice for conversion in this way: If you pass 0 as the base, int will infer the base from the prefix in the string. Without the hexadecimal prefix, 0x, int does not have enough information with which to guess: If you're typing into source code or an interpreter, Python will make the conversion for you: This won't work with ffff because Python will think you're trying to write a legitimate Python name instead: Python numbers start with a numeric character, while Python names cannot start with a numeric character.", "abstract": ""}, {"id": 17250080, "score": 1, "vote": 0, "content": "The formatter option '%x' % seems to work in assignment statements as well for me. (Assuming Python 3.0 and later) Example ", "abstract": ""}, {"id": 11275700, "score": 16, "vote": 0, "content": "Adding to Dan's answer above: if you supply the int() function with a hex string, you will have to specify the base as 16 or it will not think you gave it a valid value. Specifying base 16 is unnecessary for hex numbers not contained in strings.", "abstract": ""}, {"id": 209530, "score": 51, "vote": 0, "content": "For any given string s:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/34878286/python-format-to-print-the-decimal-oct-hex-and-binary-values", "keywords": [], "tags": ["python", "binary", "format", "hex"], "question": {"id": 34878286, "title": "Python format() to print the decimal, oct, hex, and binary values", "content": "I am trying to use .format() in python \nI wish to print 1 to N with space padding so that all fields take the same width as the binary value. Below is what i have tried till now I don't know how to use the .format() function properly here. Kindly help", "abstract": ""}, "answers": [{"id": 56037678, "score": 5, "vote": 0, "content": "", "abstract": ""}, {"id": 70782660, "score": 0, "vote": 0, "content": "Python string method rjust() returns the string right justified in a string of length width. Padding is done using the specified fillchar (default is a space). The original string is returned if width is less than len(s).", "abstract": ""}, {"id": 70546812, "score": 0, "vote": 0, "content": "A much simpler code..", "abstract": ""}, {"id": 66130073, "score": 0, "vote": 0, "content": ".format() can be used to define the width only but instead of a loop you may use a comprehension:", "abstract": ""}, {"id": 63760448, "score": 2, "vote": 0, "content": "", "abstract": ""}, {"id": 62244166, "score": 0, "vote": 0, "content": "", "abstract": ""}, {"id": 54193731, "score": 1, "vote": 0, "content": "Below code print the decimal,oct,hex and binary values using format function in specifying width only", "abstract": ""}, {"id": 50083369, "score": 12, "vote": 0, "content": "Below code finds all hexadecimal,binary,octal and decimal values", "abstract": ""}, {"id": 34878612, "score": 1, "vote": 0, "content": "Please have a look at https://docs.python.org/2/library/stdtypes.html#string-formatting\nwhere the conversion flags and conversion types are described. As an example, the part to format your number in octal with the length width looks like this: This will first create a formatted string that looks like this {0:4o} (with width = 4) and afterwards create the final string.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/63607655/how-can-i-prevent-implicit-conversion-of-octal-hex-binary-to-int-in-pyyaml", "keywords": [], "tags": ["python", "python-3.x", "yaml", "pyyaml"], "question": {"id": 63607655, "title": "How can I prevent implicit conversion of Octal/Hex/binary to Int in PyYAML?", "content": "In the YAML file, I am expecting users to enter only Decimal integer values. There are other objects in the YAML file as well. But, integer values will be specified without quotes. So, I am concerned only about the integer inputs. Sample YAML file: I am reading this YAML file in my python script using yamlordereddictloader This will break my application logic as it does not match the value entered in YAML file. I want to throw an error if anything other than decimal is entered in this list. How can I achieve this ? Is there a way to stop this implicit conversion for integers by PyYAML ?", "abstract": ""}, "answers": [{"id": 63609422, "score": 1, "vote": 0, "content": "There may be a better way to do this, but one way is to preprocess your yaml file and remove any leading zeroes with regex:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/49993743/python-string-formatting-for-number-system-conversion", "keywords": [], "tags": ["python", "binary", "hex", "decimal", "octal"], "question": {"id": 49993743, "title": "Python string formatting for number system conversion.", "content": "Given an integer,n, print the following values for each integer  from  to : CODE:  Your Output (stdout) 1  1  1  1 2  2  2  10 Expected Output The '0' in the second line should come under the last '1'. Basically, the binary should be printed from right to left with the rightmost position being that of the last digit of the longest binary.", "abstract": ""}, "answers": [{"id": 60562658, "score": 0, "vote": 0, "content": "You need to be carefull with the text alignments in your output. Also you can use the inbuilt python functions Use Oct Hex and Bin functions. Covert them to strings. Trim the base notations. User rjust for text alignment", "abstract": ""}, {"id": 49994010, "score": 0, "vote": 0, "content": "Hexadecimal, octal and binary values can be converted from decimal using the python functions hex(), oct() and bin() respectively. The format function can output the numbers hex, oct and bin depending on the arguments you pass to it. So you could do something like when used as  outputs You can checkout https://docs.python.org/3.5/library/string.html#formatspec for more details.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/59334185/how-to-create-a-python-decimal-binary-octal-and-hexadecimal-converter-with-men", "keywords": [], "tags": ["python", "python-3.x", "python-2.7"], "question": {"id": 59334185, "title": "How to create a Python Decimal, Binary, Octal and HexaDecimal Converter with MENU?", "content": "I'm very new to this, please bear with me.\nI'm trying to design a converter with a menu which allows the user to choose which data type is being used (from and to) for converting (for example) Binary to Decimal (and vice versa) and I'm struggling.\nAny help will be much appreciated. So far, when I run the programme the code executes and displays the menu asking what I want to convert from but that's about as far as I am able to grasp it at the moment. Here is the code I've done so far.... Here is a screenshot of the programme running.  As you can see, it's not doing what I really want it to do. Screenshot of programme running", "abstract": ""}, "answers": [{"id": 59437606, "score": 0, "vote": 0, "content": "You need to include your menu() method inside the while loop, otherwise the choice value will always be the same and never change from 2 (as in the screenshoot you shared).  Furthermore, if you want your tranform program to work properly you need to add another method to select the way you want to transform the input value: So your final script would be:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/51557000/what-is-the-point-of-writing-integer-in-hexadecimal-octal-and-binary", "keywords": [], "tags": ["swift", "floating-point", "int", "decimal", "var"], "question": {"id": 51557000, "title": "What is the point of writing integer in hexadecimal, octal and binary?", "content": "I am well aware that one is able to assign a value to an array or constant in Swift and have those value represented in different formats. For Integer: One can declare in the formats of decimal, binary, octal or hexadecimal. For Float or Double: One can declare in the formats of either decimal or hexadecimal and able to make use of the exponent too. For instance: All of the above variables gives the same result which is 17. But what's the catch? Why bother using those other than decimal?", "abstract": ""}, "answers": [{"id": 59245209, "score": 0, "vote": 0, "content": "Code is best written in the most meaningful way.   Using the number format that best matches the domain of your program, is just one example.  You don't want to obscure domain specific details and want to minimize the mental effort for the reader of your code. Two other examples: Meaning matters!", "abstract": ""}, {"id": 51557132, "score": 2, "vote": 0, "content": "There are some notations that can be way easier to understand for people even if the result in the end is the same. You can for example think in cases like colour notation (hexadecimal) or file permission notation (octal).", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/58038860/a-single-function-to-convert-decimal-values-to-binary-hexadecimal-and-octal-doe", "keywords": [], "tags": ["python", "base-conversion"], "question": {"id": 58038860, "title": "A single function to convert decimal values to binary, hexadecimal and octal does not convert to binary", "content": "I am trying to build a standard function to convert any decimal value to its octal, hexadecimal and binary equivalent but it doesn't work for binary for some reason.  I tried putting extra precautions into the conditional statement to check for base 2 but it still did not work. This is the function (I know that this doesn't work well with hexadecimal values. I am going to take care of that afterwards): In the line elif(remainder != 0 and base == 2):, I am checking if the remainder isn't 0 and the base is 2 to add a 1 into the temporary conv list.  I am then converting the list to a string, reversing it and returning it as an int.   For example.  If the input is 17, the output needs to be this: These are the functions that take care of the input and the printing: Update Instead of going through the entire equation, I decided to go with the built-in functions and trim the first two characters (i.e 0b) so it fits the format well.  I am trying to space them away from each other based on the width of the binary output but I couldn't figure out a way of doing that.  This is what I have so far:", "abstract": ""}, "answers": [{"id": 58039479, "score": 1, "vote": 0, "content": "The issue is you take only the mod of your number (num % base), that is to say the rightmost (\"least significant\") bit. What we want is not the least significant bit, but the entire decomposition. NB: the problem here applies to all other bases too (decimal, hexadecimal...). Indeed, if you run  with your functions, you get that the decomposition of 1000 in different bases is: (all of them are wrong). Here, I propose a recursive implementation: I ran a few quick tests: NB1: I print numbers but you can store them in the data structure of your choice. NB2: The most significant coefficient comes last in the printing (you can compare with your expected result) NB3: all of these calculations are a bit expensive, so if speed matters to you, the best is actually to store all decompositions in arrays and access them (constant time).", "abstract": ""}, {"id": 58038993, "score": 3, "vote": 0, "content": "Your elif is superflous - if you do %2 the result can be only 0 or 1 - no need to do handle it differently. Your code does not convert the whole number - you check the modulo of the number, not how often your base (and higher powers of your base) fits into it. You need to get the highest possible power for your base that fits into your number. Then you need to get how often that one fits into your number, subtract it from the number and continue with the remainder of that operation. You shrink your power by one, and continue until your num is 0. Then you accumulate all numbers into a string. Your code fixed: to get an output of: Or you use built-ins: Results in:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/17078299/figuring-out-if-a-number-is-decimal-hexadecimal-or-octal-in-python", "keywords": [], "tags": ["python", "hex", "decimal", "octal"], "question": {"id": 17078299, "title": "figuring out if a number is decimal, hexadecimal, or octal in python", "content": "I'm trying to make a small program that reads in a file with only a single number in it, and then the program prints out whether it is a decimal, hexadecimal, or octal number and then displays the number itself. Here's the rules I made for what numbers are allowed: An integer can be unambiguously specified in decimal, binary, octal or hexadecimal form. All of these forms can begin with an optional sign, which can be a \"+\" or a \"-\" with no separating characters between it and the rest of the integer. A decimal integer can be a single zero or a sequence of one or more decimal digits that starts with a non-zero decimal digit. The decimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, and 9. An octal number starts with a zero and is followed by a single zero or a non-empty sequence of octal digits that starts with a non-zero octal digit. An octal digit is one of 0, 1, 2, 3, 4, 5, 6 or 7. A hexadecimal number starts with a zero and is followed by an upper or lower case \"x\", and either a single zero or a non-zero hexadecimal digit and a sequence of zero or more hexadecimal digits. Hexadecimal digits include the decimal digits and the letters a, b, c, d, e and f and their uppercase versions. Notice how long and confusing this description has to be to ensure that it is unambiguous. \"Leading zeros\" aren't allowed in any of the representations, e.g., 0x007 is a bad hex number, and 007 is both a bad octal number and a bad decimal number. I guess I'm just having trouble on how to get the program to figure out what kind of number is it. ", "abstract": ""}, "answers": [{"id": 17078307, "score": 4, "vote": 0, "content": "As a starting point, you can try to use the int() function with a 0 argument to let it figure out the conversion: That said, a regular expression is your best bet for distinguishing your exact specifications.  For example, here is a hex recognizer:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/3042135/converting-hexadecimal-octal-numbers-into-decimal-form-using-python-script", "keywords": [], "tags": ["python", "hex", "octal"], "question": {"id": 3042135, "title": "converting hexadecimal , octal numbers into decimal form using python script", "content": "There are many inbulit functions like int(octal) which can be used to convert octal numbers into decimal numbers on command line but these doesn't work out in script .\nint(0671) returns 0671 in script, where as it represent decimal form of octal number on python command line.\nHelp??? Thank You", "abstract": ""}, "answers": [{"id": 3042289, "score": 12, "vote": 0, "content": "There's some confusion here -- pedantically (and with computers it's always best to be pedantic;-), there are no \"octal numbers\", there are strings which are octal representations of numbers (and other strings, more commonly encountered, which are their decimal representations, hexadecimal representations).  The underlying numbers (integers) are a totally distinct type from any of the representations (by default their decimal representation is shown) -- e.g.: the quotes indicate strings (i.e., representations) -- and note that, per se, they have nothing to do with the numbers they may be representing. So, one way to interpret your question is that you want to convert an octal representation into a decimal one (etc) -- that would be: note the quoted (indicating strings, i.e., representations).  int(s, 8) converts the string s into an integer as an octal representation (or raises an exception if the conversion can't work).  str(n) produces the string form of number n (which, as I mentioned, is by default a decimal representation).", "abstract": ""}, {"id": 3042234, "score": 2, "vote": 0, "content": "First, the int() is useless. You can just type 0671. Then, the number is stored in binary on the computer itself, you are only converting its string representation. The number itself doesn't change. Therefore, both of these will resolve to True, for example, which might've been the source of confusion: To ensure you will get the program to output the number in the base you want, the simplest way is to use string formatting, like so (if you want it to be in base 10):", "abstract": ""}]}]