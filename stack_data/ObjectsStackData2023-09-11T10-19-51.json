[{"link": "https://stackoverflow.com/questions/155609/whats-the-difference-between-a-method-and-a-function", "keywords": [], "tags": ["oop", "language-agnostic", "terminology"], "question": {"id": 155609, "title": "What&#39;s the difference between a method and a function?", "content": "Can someone provide a simple explanation of methods vs. functions in OOP context?", "abstract": ""}, "answers": [{"id": 76479424, "score": 1, "vote": 0, "content": "Functions are independent blocks of code that can be called\nindependently, methods are functions associated with an object or\nclass and used within that object or class. Methods can access and modify object data with other methods in the\nclass, while functions usually operate on their inputs and return\nresults. Methods are often used to determine the behavior of an object, while\nfunctions are used to modularize code and facilitate reusability Methods are named using dot notation (object.method ()), and\nfunctions are appended with their names (functionName ()).", "abstract": ""}, {"id": 74326977, "score": 1, "vote": 0, "content": "A function is a set of instructions or procedures to perform a specific task. it can be used to split code into easily understandable parts, which can be invoked or reused as well. Methods are actions that can be performed on objects. it is also known as functions stored as object properties. Major Difference:\nA function doesn\u2019t need any object and is independent, while the method is a function, which is linked with any object.", "abstract": ""}, {"id": 73386253, "score": 1, "vote": 0, "content": "OOP is a design philosophy.\nIn this context a \"Method\" is an \"action\", a \"behaviour\" of the object, an \"operation\", something an object does. A right click on a mouse object is an action. This action or behavior in several languages that implement OOP design is called \"method\". \"Function\" is related only to procedural languages as C and Pascal and is not related with OOP philosophy, even technically the implementation is similar to method. A \"function\" is a block of code in a procedural language like C, that has a defined purpose, a isolated and defined functionality, that can also return a result. \"Procedure\" is also a function that does not return a result, but its just a technical difference.", "abstract": ""}, {"id": 155722, "score": 129, "vote": 0, "content": "In general: methods are functions that belong to a class, functions can be on any other scope of the code so you could state that all methods are functions, but not all functions are methods: Take the following python example: The example given shows you a class called \"Door\" which has a method or action called \"open\", it is called a method because it was declared inside a class. There is another portion of code with \"def\" just below which defines a function, it is a function because it is not declared inside a class, this function calls the method we defined inside our class as you can see and finally the function is being called by itself. As you can see you can call a function anywhere but if you want to call a method either you have to pass a new object of the same type as the class the method is declared (Class.method(object)) or you have to invoke the method inside the object (object.Method()), at least in python. Think of methods as things only one entity can do, so if you have a Dog class it would make sense to have a bark function only inside that class and that would be a method, if you have also a Person class it could make sense to write a function \"feed\" for that doesn't belong to any class since both humans and dogs can be fed and you could call that a function since it does not belong to any class in particular.", "abstract": ""}, {"id": 155700, "score": 38, "vote": 0, "content": "The idea behind Object Oriented paradigm is to \"treat\" the software is composed of .. well \"objects\". Objects in real world have properties, for instance if you have an Employee, the employee has a name, an employee id, a position, he belongs to a department etc. etc. The object also know how to deal with its attributes and perform some operations on them. Let say if we want to know what an employee is doing right now we would ask him. That \"whatAreYouDoing\" is a \"message\" sent to the object. The object knows how to answer to that questions, it is said it has a \"method\" to resolve the question. So, the way objects have to expose its behavior are called  methods. Methods thus are the artifact object have to \"do\" something. Other possible methods are etc. Functions in the other hand are ways a programming language has to compute some data, for instance you might have the function addValues( 8 , 8 ) that returns 16 Since first popular programming languages ( such as fortran, c, pascal ) didn't cover the OO paradigm, they only call to these artifacts \"functions\". for instance the previous function in C would be: It is not \"natural\" to say an object has a \"function\" to perform some action, because functions are more related to mathematical stuff while an Employee has little mathematic on it, but you can have methods that do exactly the same as functions, for instance in Java this would be the equivalent addValues function. Looks familiar? That\u00b4s because Java  have its roots on C++ and C++ on C. At the end is just a concept, in implementation they might look the same, but in the OO documentation these are called method. Here\u00b4s an example of the previously Employee object in Java. The difference then, is on the \"domain\" where it is applied. AppleScript have the idea of \"natural language\" matphor , that at some point OO had. For instance Smalltalk. I hope it may be reasonable easier for you to understand methods in objects after reading  this. NOTE: The code is not to be compiled, just to serve as an example. Feel free to modify the post and add Python example.", "abstract": ""}, {"id": 60544808, "score": 2, "vote": 0, "content": "In just 2 words: non-static (\"instance\") methods take a hidden pointer to \"this\" (as their 1st param) which is the object you call the method on. That's the only difference with a regular standalone function, dynamic dispatching notwithstanding. If you are interested, read the details below. I'll try to be short and will use C++ as an example although what I say can be applied to virtually every language. Ok, I said there's no actual difference. Let's dig a bit deeper: Dynamic dispatching aside, it means it's as simple as that: is equivalent to So, essentially, user->printName() is just syntactic sugar for getName(user). If you don't use dynamic dispatch, that's all. If it is used, then it's a bit more involved, but the compiler will still emit what looks like a function taking this as a first parameter.", "abstract": ""}, {"id": 70417274, "score": 1, "vote": 0, "content": "What's the difference between a method and a function? Python's official documentation defines it like this (thank you to @Kelly Bundy here!): function A series of statements which returns some value to a caller. It can also be passed zero or more arguments which may be used in the execution of the body. See also parameter, method, and the Function definitions section method A function which is defined inside a class body. If called as an attribute of an instance of that class, the method will get the instance object as its first argument (which is usually called self). See function and nested scope. A square is a rectangle, but not all rectangles are squares. The way I interpret the world, a method is a function, but not all functions are methods. What makes a method unique is that it is a special type of function which also is associated with a class and has access to class member variables.", "abstract": ""}, {"id": 69172423, "score": 1, "vote": 0, "content": "With the C# terminology, there\u2019s a distinction between functions and methods. The term function member includes not only methods, but also other nondata members such as indexers, operators, constructors, destructors, and properties \u2014 all members that contain executable code. reference => Professional C# and .NET 2021 Edition - written by Christina Nagel", "abstract": ""}, {"id": 155633, "score": 1104, "vote": 0, "content": "A method is on an object or is static in class.\nA function is independent of any object (and outside of any class). For Java and C#, there are only methods.\nFor C, there are only functions. For C++ and Python it would depend on whether or not you're in a class.\nBut in basic English:", "abstract": ""}, {"id": 68731476, "score": 1, "vote": 0, "content": "A method is a member of any object or class.\nA function is independent. But in the case of Javascript, function and method are interchangeable.", "abstract": ""}, {"id": 46626299, "score": 113, "vote": 0, "content": "Simple way to remember:", "abstract": ""}, {"id": 65513101, "score": 3, "vote": 0, "content": "General answer is: method has object context (this, or class instance reference), function has none context (null, or global, or static). But answer to question is dependent on terminology of language you use. In JavaScript (ES 6) you are free to customising function context (this) for any you desire, which is normally must be link to the (this) object instance context. In Java world you always hear that \"only OOP classes/objects, no functions\", but if you watch in detailes to static methods in Java, they are really in global/null context (or context of classes, whithout instancing), so just functions whithout object. Java teachers could told you, that functions were rudiment of C in C++ and dropped in Java, but they told you it for simplification of history and avoiding unnecessary questions of newbies. If you see at Java after 7 version, you can find many elements of pure function programming (even not from C, but from older 1988 Lisp) for simplifying parallel computing, and it is not OOP classes style. In C++ and D world things are stronger, and you have separated functions and objects with methods and fields. But in practice, you again see functions without this and methods whith this (with object context). In FreePascal/Lazarus and Borland Pascal/Delphi things about separation terms of functions and objects (variables and fields) are usually similar to C++. Objective-C comes from C world, so you must separate C functions and Objective-C objects with methods addon. C# is very similar to Java, but has many C++ advantages.", "abstract": ""}, {"id": 65301481, "score": 2, "vote": 0, "content": "There's a clear difference between method and funtion as: Function is an independant piece of code which you can invoke anywhere by just mentioning it's name with given arguments, like in most of the procedural languages e.g C++ and python. While Method is specifically associated with an object, means you can only invoke a method by mentioning it's object before it with dot(.) notation, like in specifically pure Object Oriented languages like C# and java.", "abstract": ""}, {"id": 61635057, "score": 1, "vote": 0, "content": "A function and a method look very similar. They also have inputs and return outputs. The difference is that a method is inside of a class whereas a function is outside of a class.", "abstract": ""}, {"id": 58048948, "score": 1, "vote": 0, "content": "They're often interchangeable, but a method usually refers to a subroutine inside a class, and a function usually refers to a subroutine outside the class.\nfor instance, in Ruby: In Java, where everything (except package and import statements) must be inside the class, people almost always refer to them as \"methods\".", "abstract": ""}, {"id": 59421186, "score": 4, "vote": 0, "content": "TL;DR A Function is a piece of code to run. \nA Method is a Function inside an Object. Example of a function: Example of a Method: So thats why we say that a \"this\" keyword inside a Function is not very useful unless we use it with call, apply or bind .. because call, apply, bind will call that function as a method inside object ==> basically it converts function to method", "abstract": ""}, {"id": 54231868, "score": 3, "vote": 0, "content": "Function - A function in an independent piece of code which includes some logic and must be called independently and are defined outside of class. Method - A method is an independent piece of code which is called in reference to some object and are be defined inside the class.", "abstract": ""}, {"id": 47965588, "score": 3, "vote": 0, "content": "A class is the collection of some data and function optionally with a constructor. While you creating an instance (copy,replication) of that particular class the constructor initialize the class and return an object.  Now the class become object (without constructor)\n&\nFunctions are known as method in the object context. So basically  Class <==new==>Object Function <==new==>Method In java the it is generally told as that the constructor name same as class name but in real that constructor is like instance block and static block but with having a user define return type(i.e. Class type) While the class can have an static block,instance block,constructor, function \nThe object generally have only data & method.", "abstract": ""}, {"id": 47838166, "score": 2, "vote": 0, "content": "From reading this doc on Microsoft  Members that contain executable code are collectively known as the function members of a class. The preceding section describes methods, which are the primary kind of function members. This section describes the other kinds of function members supported by C#: constructors, properties, indexers, events, operators, and finalizers. So methods are the subset of the functions. Every method is a function but not every function is a method, for example, a constructor can't be said as a method but it is a function.", "abstract": ""}, {"id": 47815220, "score": 7, "vote": 0, "content": "Let's not over complicate what should be a very simple answer. Methods and functions are the same thing. You call a function a function when it is outside of a class, and you call a function a method when it is written inside a class. ", "abstract": ""}, {"id": 46471318, "score": 2, "vote": 0, "content": "Here is some explanation for method vs. function using JavaScript examples: test(20, 50); is function define and use to run some steps or return something back that can be stored/used somewhere. You can reuse code: Define the code once and use it many times. You can use the same code many times with different arguments, to produce different results. var test = something.test(); here test() can be a method of some object or custom defined a prototype for inbuilt objects, here is more explanation: JavaScript methods are the actions that can be performed on objects. A JavaScript method is a property containing a function definition. Built-in property/method for strings in javascript: Custom example: You can define properties for String, Array, etc as well for example \n\nString.prototype.distance = function (char) {\n    var index = this.indexOf(char);\n\n    if (index === -1) {\n        console.log(char + \" does not appear in \" + this);\n    } else {\n        console.log(char + \" is \" + (this.length - index) + \" characters from the end of the string!\");\n    }\n};\n\nvar something = \"ThisIsSomeString\"\n\n// now use distance like this, run and check console log\n\nsomething.distance(\"m\");\n\n\n Some references: Javascript Object Method, Functions, More info on prototype", "abstract": ""}, {"id": 46066608, "score": 2, "vote": 0, "content": "In C++, sometimes, method is used to reflect the notion of member function of a class. However, recently I found a statement in the book \u00abThe C++ Programming Language 4th Edition\u00bb, on page 586 \"Derived Classes\" A virtual function is sometimes called a method. This is a little bit confusing, but he said sometimes, so it roughly makes sense, C++ creator tends to see methods as functions can be invoked on objects and can behave polymorphic.", "abstract": ""}, {"id": 43577512, "score": 3, "vote": 0, "content": "I know many others have already answered, but I found following is a simple, yet effective single line answer. Though it doesn't look a lot better than others answers here, but if you read it carefully, it has everything you need to know about the method vs function.  A method is a function that has a defined receiver, in OOP terms, a method is a function on an instance of an object.", "abstract": ""}, {"id": 155655, "score": 2215, "vote": 0, "content": "A function is a piece of code that is called by name. It can be passed data to operate on (i.e. the parameters) and can optionally return data (the return value). All data that is passed to a function is explicitly passed. A method is a piece of code that is called by a name that is associated with an object. In most respects it is identical to a function except for two key differences: (this is a simplified explanation, ignoring issues of scope etc.)", "abstract": ""}, {"id": 26620095, "score": 55, "vote": 0, "content": "A very general definition of the main difference between a Function and a Method: Functions are defined outside of classes, while Methods are defined inside of and part of classes.", "abstract": ""}, {"id": 155623, "score": 323, "vote": 0, "content": "'method' is the object-oriented word for 'function'.  That's pretty much all there is to it (ie., no real difference). Unfortunately, I think a lot of the answers here are perpetuating or advancing the idea that there's some complex, meaningful difference. Really - there isn't all that much to it, just different words for the same thing. [late addition] In fact, as Brian Neal pointed out in a comment to this question, the C++ standard never uses the term 'method' when refering to member functions. Some people may take that as an indication that C++ isn't really an object-oriented language; however, I prefer to take it as an indication that a pretty smart group of people didn't think there was a particularly strong reason to use a different term.", "abstract": ""}, {"id": 34734498, "score": 16, "vote": 0, "content": "Historically, there may have been a subtle difference with a \"method\" being something which does not return a value, and a \"function\" one which does.Each language has its own lexicon of terms with special meaning.  In \"C\", the word \"function\" means a program routine. In Java, the term \"function\" does not have any special meaning. Whereas \"method\" means one of the routines that forms the implementation of a class. In C# that would translate as: But really, I re-iterate that there is really no difference in the 2 concepts.\nIf you use the term \"function\" in informal discussions about Java, people will assume you meant \"method\" and carry on. Don't use it in proper documents or presentations about Java, or you will look silly.", "abstract": ""}, {"id": 33632203, "score": 5, "vote": 0, "content": "Function is the concept mainly belonging to Procedure oriented programming where a function is an an entity which can process data and returns you value Method is the concept of Object Oriented programming where a method is a member of a class which mostly does processing on the class members.", "abstract": ""}, {"id": 29379748, "score": 6, "vote": 0, "content": "IMHO people just wanted to invent new word for easier communication between programmers when they wanted to refer to functions inside objects.  If you are saying methods you mean functions inside the class.\nIf you are saying functions you mean simply functions outside the class. The truth is that both words are used to describe functions. Even if you used it wrongly nothing wrong happens. Both words describe well what you want to achieve in your code. Function is a code that has to play a role (a function) of doing something.\nMethod is a method to resolve the problem. It does the same thing. It is the same thing. If you want to be super precise and go along with the convention you can call methods as the functions inside objects.", "abstract": ""}, {"id": 17938093, "score": 4, "vote": 0, "content": "I am not an expert, but this is what I know: Function is C language term, it refers to a piece of code and the function name will be the identifier to use this function. Method is the OO term, typically it has a this pointer in the function parameter. You can not invoke this piece of code like C, you need to use object to invoke it. The invoke methods are also different. Here invoke meaning to find the address of this piece of code. C/C++, the linking time will use the function symbol to locate. Objecive-C is different. Invoke meaning a C function to use data structure to find the address. It means everything is known at run time.", "abstract": ""}, {"id": 21594420, "score": 14, "vote": 0, "content": "Function or a method is a named callable piece of code which performs some operations and optionally returns a value.  In C language the term function is used. Java & C# people would say it a method (and a function in this case is defined within a class/object). A C++ programmer might call it a function or sometimes method (depending on if they are writing procedural style c++ code or are doing object oriented way of C++, also a C/C++ only programmer would likely call it a function because term 'method' is less often used in C/C++ literature). You use a function by just calling it's name like, \nYou would call a method by referencing its object first like,", "abstract": ""}, {"id": 10138680, "score": 9, "vote": 0, "content": "for me:\nthe function of a method and a function is the same if I agree that: Just like any piece of code you may have objects you put in and you may have an object that comes as a result. During doing that they might change the state of an object but that would not change their basic functioning for me. There might be a definition differencing in calling functions of objects or other codes. But isn't that something for a verbal differenciations and that's why people interchange them? The mentions example of computation I would be careful with. because I hire employes to do my calculations: By doing it that way I can rely on an employer being responsible for calculations. If he wants more money I free him and let the carbage collector's function of disposing unused employees do the rest and get a new employee. Even arguing that a method is an objects function and a function is unconnected computation will not help me. The function descriptor itself and ideally the function's documentation will tell me what it needs and what it may return. The rest, like manipulating some object's state is not really transparent to me. I do expect both functions and methods to deliver and manipulate what they claim to without needing to know in detail how they do it.\nEven a pure computational function might change the console's state or append to a logfile.", "abstract": ""}, {"id": 336663, "score": 13, "vote": 0, "content": "Function is a set of logic that can be used to manipulate data. While, Method is function that is used to manipulate the data of the object where it belongs.\nSo technically, if you have a function that is not completely related to your class but was declared in the class, its not a method; It's called a bad design.", "abstract": ""}, {"id": 155827, "score": 10, "vote": 0, "content": "Since you mentioned Python, the following might be a useful illustration of the relationship between methods and objects in most modern object-oriented languages.  In a nutshell what they call a \"method\" is just a function that gets passed an extra argument (as other answers have pointed out), but Python makes that more explicit than most languages. Now compare the function greet_with_greeter and the method greet: the only difference is the name of the first parameter (in the function I called it \"greeter\", in the method I called it \"self\").  So I can use the greet method in exactly the same way as I use the greet_with_greeter function (using the \"dot\" syntax to get at it, since I defined it inside a class): So I've effectively turned a method into a function.  Can I turn a function into a method?  Well, as Python lets you mess with classes after they're defined, let's try: Yes, the function greet_with_greeter is now also known as the method greet2.  This shows the only real difference between a method and a function: when you call a method \"on\" an object by calling object.method(args), the language magically turns it into method(object, args). (OO purists might argue a method is something different from a function, and if you get into advanced Python or Ruby - or Smalltalk! - you will start to see their point.  Also some languages give methods special access to bits of an object.  But the main conceptual difference is still the hidden extra parameter.)", "abstract": ""}, {"id": 155767, "score": 16, "vote": 0, "content": "A function is a mathematical concept.  For example: says that function f() will return the sin of the first parameter added to the cosine of the second parameter.  It's just math.  As it happens sin() and cos() are also functions.  A function has another property: all calls to a function with the same parameters, should return the same result. A method, on the other hand, is a function that is related to an object in an object-oriented language.  It has one implicit parameter: the object being acted upon (and it's state). So, if you have an object Z with a method g(x), you might see the following: In this case, the parameter x is passed in, the same as in the function example earlier.  However, the parameter to cos() is a value that lives inside the object Z.  Z and the data that lives inside it (Z.y) are implicit parameters to Z's g() method.", "abstract": ""}, {"id": 155642, "score": 20, "vote": 0, "content": "Let's say a function is a block of code (usually with its own scope, and sometimes with its own closure) that may receive some arguments and may also return a result. A method is a function that is owned by an object (in some object oriented systems, it is more correct to say it is owned by a class).  Being \"owned\" by a object/class means that you refer to the method through the object/class; for example, in Java if you want to invoke a method \"open()\" owned by an object \"door\" you need to write \"door.open()\".   Usually methods also gain some extra attributes describing their behaviour within the object/class, for example: visibility (related to the object oriented concept of encapsulation) which defines from which objects (or classes) the method can be invoked. In many object oriented languages, all \"functions\" belong to some object (or class) and so in these languages there are no functions that are not methods.", "abstract": ""}, {"id": 155654, "score": 6, "vote": 0, "content": "To a first order approximation, a method (in C++ style OO) is another word for a member function, that is a function that is part of a class. In languages like C/C++ you can have functions which are not members of a class; you don't call a function not associated with a class a method.", "abstract": ""}, {"id": 155650, "score": 11, "vote": 0, "content": "In OO languages such as Object Pascal or C++, a \"method\" is a function associated with an object.  So, for example, a \"Dog\" object might have a \"bark\" function and this would be considered a \"Method\".  In contrast, the \"StrLen\" function stands alone (it provides the length of a string provided as an argument).  It is thus just a \"function.\"  Javascript is technically Object Oriented as well but faces many limitations compared to a full-blown language like C++, C# or Pascal.  Nonetheless, the distinction should still hold. A couple of additional facts: C# is fully object oriented so you cannot create standalone \"functions.\"  In C# every function is bound to an object and is thus, technically, a \"method.\"  The kicker is that few people in C# refer to them as \"methods\" - they just use the term \"functions\" because there isn't any real distinction to be made. Finally - just so any Pascal gurus don't jump on me here - Pascal also differentiates between \"functions\" (which return a value) and \"procedures\" which do not.  C# does not make this distinction explicitly although you can, of course, choose to return a value or not.  ", "abstract": ""}, {"id": 155648, "score": 10, "vote": 0, "content": "Methods on a class act on the instance of the class, called the object. ", "abstract": ""}, {"id": 155646, "score": 22, "vote": 0, "content": "In OO world, the two are commonly used to mean the same thing.  From a pure Math and CS perspective, a function will always return the same result when called with the same arguments ( f(x,y) = (x + y) ).  A method on the other hand, is typically associated with an instance of a class.  Again though, most modern OO languages no longer use the term \"function\" for the most part.  Many static methods can be quite like functions, as they typically have no state (not always true).", "abstract": ""}, {"id": 155640, "score": 6, "vote": 0, "content": "From my understanding a method is any operation which can be performed on a class. It is a general term used in programming.  In many languages methods are represented by functions and subroutines. The main distinction that most languages use for these is that functions may return a value back to the caller and a subroutine may not. However many modern languages only have functions, but these can optionally not return any value. For example, lets say you want to describe a cat and you would like that to be able to yawn. You would create a Cat class, with a Yawn method, which would most likely be a function without any return value.", "abstract": ""}, {"id": 155637, "score": 18, "vote": 0, "content": "Methods are functions of classes. In normal jargon, people interchange method and function all over. Basically you can think of them as the same thing (not sure if global functions are called methods). http://en.wikipedia.org/wiki/Method_(computer_science)", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/76026183/what-is-the-difference-between-a-method-and-a-function", "keywords": [], "tags": ["python", "oop"], "question": {"id": 76026183, "title": "What is the difference between a method and a function?", "content": "What's the difference between a method and a function  in oop ?", "abstract": ""}, "answers": [{"id": 76026200, "score": 0, "vote": 0, "content": "A method is a function of a class.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/29551444/definition-of-method-function-operation-procedure-subroutine-whats-the-exact", "keywords": [], "tags": ["oop", "theory"], "question": {"id": 29551444, "title": "Definition of Method, Function, Operation, Procedure, Subroutine whats the exact difference?", "content": "Are there official definitions for these terms in OOP? \nOr have they just evolved over time and depending on your former computer science education (or even your age) you use one or the other? So far i found good definitions of method vs. function: Difference between a method and a function A function is a piece of code that is called by name. \n  ... All data that is passed to a function is explicitly passed. A method is a piece of code that is called by name that is associated\n  with an object.  And function vs. procedure: What is the difference between a \"function\" and a \"procedure\"? A function returns a value and a procedure just executes commands. A procedure is a set of command which can be executed in order. In most programming languages, even functions can have a set of\n  commands. Hence the difference is only in the returning a value part. Even if there are subtle differences in the definition by the authors the main aspect seems to be: A method is always something which operates on an object in contrast to a function which gets all data passed to it by its parameters. If a function does not return a value it is called a procedure. But how are subroutine and especially operation linked to these terms? EDIT: Since this seems to be too broad here is an attempt to narrow it down: method, procedure and function are pretty clear from my former research. Also subroutine is not that vague anymore.  So the question is: What is an operation in the field of computer science?", "abstract": ""}, "answers": [{"id": 29551575, "score": 4, "vote": 0, "content": "The following is my understanding. Note that these are all \"soft\" definitions - there is no official definition of any of these, and so the exact meaning may vary between languages. (For example, \"static methods\" in Java and C# don't fit my definition of \"method\", unless you consider classes to be objects) A subroutine is \"some code that you can call whenever\". It's literally a routine that is called by other routines (hence a sub-routine). \"Subroutine\" and \"routine\" seem to be quite archaic terms. Think of BASIC's GOSUB instruction: (never mind that BASIC is a terrible language) This prints: In Visual Basic, a subroutine or Sub is a function which doesn't return anything. A procedure is the same thing as a subroutine, but less archaic. A procedure can also mean a function which doesn't return anything. A function is like a procedure, but instead of just being a list of commands, it can take parameters and return a value. You should be familiar with functions from many languages, but here's an example in C++: This prints: Notice that the function calculate doesn't do the printing itself - instead, it returns a number which main can choose to print, or to do something else with. The third call to calculate returns 2, but the 2 isn't printed - instead, it determines how many times \"Hello\" is printed. A function with no arguments, that returns nothing, is equivalent to a procedure (or subroutine). A method is a function which can be called on an object. You might be familiar with non-static methods from Java or C#. A method has access to the state of the object it was called on (which is called the receiver). Unlike with functions, methods are often polymorphic on the type of the receiver - it's not possible to directly see which sequence of commands will run when you make a method call. A simple example of methods in Java, demonstrating polymorphism: This prints: even though you might think that printNumberOfWheels always prints 4 - subclasses can \"intercept\" the getNumberOfWheels method call.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/4841605/what-is-a-difference-between-a-method-and-a-function", "keywords": [], "tags": ["php"], "question": {"id": 4841605, "title": "What is a difference between a method and a function?", "content": "What is the difference between a method and a function?  Is it that a method returns a value and a function doesn't?", "abstract": ""}, "answers": [{"id": 66598059, "score": 0, "vote": 0, "content": "Method and function are same things but their context are different.\nA function inside a class called a method. like: } in  this  case  bar() is a method. to  execute this method you must create an object of class foo and call it like\n$foo->bar(); You can write a function out of class . you can call it bar()", "abstract": ""}, {"id": 9990338, "score": 8, "vote": 0, "content": "The words are not opposed to each other but rather describes two possible aspects of a subroutine. An attempt to define the words follows: Subroutine: A set of instructions that can be used several times in the same program. Function: A subroutine that returns a value. Derived from functions in mathematics (wikipedia). Method: A subroutine that belongs to an object or a class. Could be a function. I tend to use the word \"function\" for every subroutine that has no side effects but returns one clear value and the word \"method\" for every subroutine that has a side effect.", "abstract": ""}, {"id": 4841628, "score": 164, "vote": 0, "content": "Method is actually a function used in the context of a class/object. When you create a function outside of a class/object, you can call it a function but when you create a function inside a class, you can call it a method. So an object can have methods (functions) and properties (variables).", "abstract": ""}, {"id": 16121130, "score": 1, "vote": 0, "content": "We define method inside class , we define function out side class, function is not part of class", "abstract": ""}, {"id": 11643473, "score": 2, "vote": 0, "content": "Function is a generic term to be used in procedural programming approach where as Method is a term to be used in Object oriented programming approach to define a class property. ", "abstract": ""}, {"id": 4841634, "score": 6, "vote": 0, "content": "The difference between the expressions \"method\" and \"function\" is that a \"method\" is a member function of a class, whereas a standalone function does not, and a standalone function usually exists in global context.", "abstract": ""}, {"id": 4841639, "score": 2, "vote": 0, "content": "Both are used interchangeably, but function is the terminology used in structural languages and method is the terminology used in Object Oriented Langauages. Also methods exists within objects while functions can exist without objects as well.", "abstract": ""}, {"id": 4841631, "score": 0, "vote": 0, "content": "In one line, a method is a function but a function is not necessarily a method. The difference is that a method is used to describe functions defined in classes that are used with instances of those classes. }", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/62619932/what-is-a-method-thats-inside-another-method-called", "keywords": [], "tags": ["c#", "methods"], "question": {"id": 62619932, "title": "What is a method that&#39;s inside another method called?", "content": "What type of method is String dgvValue(int cell) in the below code?", "abstract": ""}, "answers": [{"id": 62836875, "score": 0, "vote": 0, "content": "The technical term is \"closure\", and it is very common in functional languages.\nThe wikipedia page gives a number of examples and good overview of what they do: Operationally, a closure is a record storing a function together with an environment. The environment is a mapping associating each free variable of the function (variables that are used locally, but defined in an enclosing scope) with the value or reference to which the name was bound when the closure was created. Unlike a plain function, a closure allows the function to access those captured variables through the closure's copies of their values or references, even when the function is invoked outside their scope. See also these tutorials on\njavascript closures\nand\npython closures. Also, although I cannot comment due to reputation, I want to push back on @infinitezero's comment on the accepted answer: It's also called a \"wth does this function do?\"-function. Remember that code is meant to be read by humans, not computers, so comprehensive naming should be paramount. While it is true that code is read by humans, sometimes this design decision is appropriate (see examples in tutorials) and can dramatically simplify code. In the original example, note that the .SelectedRows[0].Cells[cell].Value.ToString is rather long, and copying this seven times would be much harder to read and edit than to simply change the function. Moreover, this function could well no meaning outside of the btnEdit_Click function, and so making it local is appropriate, even though generating the closure is more computationally expensive.\nI would therefore argue that the reason to use closures is because code is written for humans and not computers.", "abstract": ""}, {"id": 62619964, "score": 70, "vote": 0, "content": "It's a feature of c# called local functions, introduced in c# 7: Many designs for classes include methods that are called from only one location. These additional private methods keep each method small and focused.\nLocal functions enable you to declare methods inside the context of another method. Local functions make it easier for readers of the class to see that the local method is only called from the context in which it is declared.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/54022620/definition-of-operation-and-method-in-oop", "keywords": [], "tags": ["oop", "object", "methods", "operation"], "question": {"id": 54022620, "title": "Definition of operation and method in OOP", "content": "I'm searching for a concrete definition of operation and method independent of the programming language. In my understanding: Operations just specify which functionality an object supports without\n  any implementation. It seems to be like a prototype in a C header. Methods specify the concrete implementations an object supports. It seems to be like an implemented C function. Question: Why do we speak of abstract methods? In my opinion abstract methods should be the same like operations.", "abstract": ""}, "answers": [{"id": 54029899, "score": 1, "vote": 0, "content": "Searching pascal.computer.org for operation gives numerous and varied definitions. In the context of this question, the second seems most fitting. in programming, a defined action that can be performed by a computer system That definition sounds vague in isolation, but ties nicely into the definition of method. implementation of an operation ...which is exactly as stated in the question. However, I think these formal definitions differ from colloquial usage. The term operation is somewhat rare in OOP. I would use it in the context of a mathematical operation, especially as the action of a mathematical operator, but not as a substitute for a method definition. Abstract method would be a more common phrase in that case. Likewise, while method is a quintessential OOP term, it is not typically used to call out an implementation. Concrete method would be the inverse of abstract method. I think the lesson is that while academic definitions exist, programmers don't necessarily speak that way. This is no different to common conversation diverging from the dictionary. See also: What's the difference between a method and a function?", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/48710208/whats-the-type-of-method-itself-in-c", "keywords": [], "tags": ["c#", "types"], "question": {"id": 48710208, "title": "What&#39;s the type of &quot;Method&quot; itself in C#?", "content": "I heard that C# is a pure object-oriented programming language, because all of things are derived from System.Object. So I doubt what's the type of the Method itself. I tried with StackTrace and StackFrame to get type of method, but I just got the name of class, which methods are declared. Of course, I tried this: however I got only this error. Methods can be assigned to Func<..., TResult>typed variables. I tested with Func and method that returns string, then I got this: But it's a typename of Func<string>. So, What's the real typename of methods? Edit Feb 10, 2018 01:46 AM, KST (GMT +09:00) Alright, let me summarize. Function itself have no type, also it is not an object, and Delegate / Func<> is a just feature of .NET Framework to handle functions as first class citizen(but it is not an FCC). is it correct?", "abstract": ""}, "answers": [{"id": 48710658, "score": 4, "vote": 0, "content": "A method is not an object therefore it has no type. A method in C# is the object oriented way of attaching functions to classes, but they are not first class citizens as functions are in JavaScript. That's why you cannot assign a method to a variable. You can't do this: But instead you can do something like this: In the second example despite the fact that it looks like you are actually assigning a method to a variable the reality is that the compiler creates a new instance of a Func<string, int> which is a delegate (which ultimately derives from System.Object) that happens to actually hold a type-safe reference to the method itself. That delegate IS an object and can be assigned and passed as parameters to other methods, but is not the method itself but a wrapper.", "abstract": ""}, {"id": 48710278, "score": 3, "vote": 0, "content": "All things are derived from System.Object, but not everything is a thing. Object.GetType() explains: \"Because System.Object is the base class for all types in the .NET Framework type system, the GetType method can be used to return Type objects that represent all .NET Framework types. The .NET Framework recognizes the following five categories of types: Classes, which are derived from System.Object, Value types, which are derived from System.ValueType. Interfaces, which are derived from System.Object starting with the .NET Framework 2.0. Enumerations, which are derived from System.Enum. Delegates, which are derived from System.MulticastDelegate.\" An instance method is not one of those, it has no meaning apart from its class.", "abstract": ""}, {"id": 48710273, "score": 7, "vote": 0, "content": "Methods don't have a type. Methods are what they are - just \"callable functions\" on an object or class. The fact that you can assign them to Delegates or Func with same signature is just a feature of the framework, but the method on itself doesn't have any \"type\". The closest thing to a type could be the return value of the method (if it has one).", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/5608476/whats-the-difference-between-a-method-and-a-selector", "keywords": [], "tags": ["objective-c", "selector"], "question": {"id": 5608476, "title": "What&#39;s the difference between a method and a selector?", "content": "What the difference between a method, a selector and a message in Objective-C? ", "abstract": ""}, "answers": [{"id": 5608573, "score": 146, "vote": 0, "content": "This is a great question. Selector - a Selector is the name of a method.  You're very familiar with these selectors: alloc, init, release, dictionaryWithObjectsAndKeys:, setObject:forKey:, etc.  Note that the colon is part of the selector; it's how we identify that this method requires parameters.  Also (though it's extremely rare), you can have selectors like this: doFoo:::.  This is a method that takes three parameters, and you'd invoke it like [someObject doFoo:arg1 :arg2 :arg3].  There's no requirement that there be letters before each part of the selector components.  As I said, this is extremely rare, and you will not find it used in the Cocoa frameworks.  You can work with selectors directly in Cocoa.  They have the type SEL:  SEL aSelector = @selector(doSomething:) or SEL aSelector = NSSelectorFromString(@\"doSomething:\"); Message - a message is a selector and the arguments you are sending with it.  If I say [dictionary setObject:obj forKey:key], then the \"message\" is the selector setObject:forKey: plus the arguments obj and key.  Messages can be encapsulated in an NSInvocation object for later invocation.  Messages are sent to a receiver.  (ie, the object that \"receives\" the message). Method - a method is a combination of a selector and an implementation (and accompanying metadata).  The \"implementation\" is the actual block of code; it's a function pointer (an IMP).  An actual method can be retrieved internally using a Method struct (retrievable from the runtime). Some other related things that you didn't ask for: Method Signature - a method signature represents the data types returned by and accepted by a method.  They can be represented at runtime via an NSMethodSignature and (in some cases) a raw char*. Implementation - the actual executable code of a method.  Its type at runtime is an IMP, and it's really just a function pointer.  iOS 4.3 includes a new ability to turn a block into an IMP. This is really cool. One of the fun things to realize is that the name of a method (the selector) is distinct from the implementation of the method (the IMP).  This means that you can swap them around, if you're feeling daring.  You can also add and remove methods at runtime, because all you're doing is editing an entry in a hash table: the key is the selector, and the value is the IMP of the method.  This allows you to do some really crazy and trippy stuff.  It's not for the faint of heart. :)", "abstract": ""}, {"id": 5608568, "score": 1, "vote": 0, "content": "This site has a good overview of all the terminology in question: http://www.otierney.net/objective-c.html Check out the link, but I'll give a quick summary: A method is essentially like a method of function that you are used to in your favourite programming language.   A message (from the article) \"A message can be dynamically forwarded to another object. Calling a message on an object in Objective-C doesn't mean that the object implements that message, just that it knows how to respond to it somehow via directly implementing it or forwarding the message to an object that does know how to.\" Selectors can mean two things.  It can refer to the name of a method, or \"refers to the unique identifier that replaces the name when the source code is compiled. Compiled selectors are of type SEL.\" (from: http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjectiveC/Chapters/ocSelectors.html)", "abstract": ""}, {"id": 5608554, "score": 9, "vote": 0, "content": "A method is the implementation which is run when an object or class is asked to perform some action. It is in the scope of its containing class and is therefore different when referenced through some other class. A selector is an identifier which represents the name of a method. It is not related to any specific class or method, and can be used to describe a method of any class, whether it is a class or instance method. Simply, a selector is like a key in a dictionary. It can tell you what method someone is talking about, but only if you also have the dictionary itself (the class or object). The method is what you get when you ask for the value from the dictionary using the selector as a key.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/4246883/what-is-method-property-and-function", "keywords": [], "tags": ["oop", "function", "properties", "terminology", "procedural-programming"], "question": {"id": 4246883, "title": "What is Method, Property and Function?", "content": "Yeah, I'm struggling with that. I cannot distinguish among them because every explanation I read is so unclear and philosophical enough. Can someone clear up these definitions for me ? Thanks guys. These definitions apply as much to procedural-programming as oop ? Thanks.", "abstract": ""}, "answers": [{"id": 38006464, "score": 1, "vote": 0, "content": "a)Function\nRefers to block of statements that perform a particular task and return a value. b)Procedure\nRefers to the building blocks of a program that do not return a value when called. c)Method\nRefers to the action that object can perform.", "abstract": ""}, {"id": 4247226, "score": 9, "vote": 0, "content": "Function is a combination of instructions coupled together to achieve some result. It may take arguments and return result. If a function doesn't return a result it is usually called a procedure. Examples: So functions are to do some particular work. For example, when you need to draw a polygon of 3 lines as a part of a vector image it is more convenient to call drawLine thrice than to put all the routine for line drawing inline. Methods (\"member functions\") are similar to functions, they belongs to classes or objects and usually expresses the verbs of the objects/class. For example, an object of type Window usually would have methods open and close which do corresponding operations to the object they belong. Properties are as in everyday language and technically are fields of objects/classes with dedicated getter/setter routines (which can be considered as methods. There are languages that don't have properties and this behavior is achieved using a private field+get/set methods.).", "abstract": ""}, {"id": 4246965, "score": 11, "vote": 0, "content": "Over time, the way people use each of these terms has changed (and will likely keep changing), but here's what they probably mean if you're reading articles written in the last decade or so: Functions (aka subroutines) are relatively self-contained, relatively independent pieces of code that make up a larger program. Methods are functions attached to specific classes (or instances) in object-oriented programming. Properties are an object-oriented idiom. The term describes a one or two functions (depending on the desired program behavior) - a 'getter' that retrieves a value and a 'setter' that sets a value. By convention, properties usually don't have many side-effects. (And the side-effects they do have usually have limited scope: they may validate the item being set, notify listeners of a change, or convert an object's private data to or from a publicly-declared type.) ", "abstract": ""}, {"id": 4247091, "score": 4, "vote": 0, "content": "Field - A field is a variable of any type that is declared directly in a class or struct. Fields are members of their containing type. Property - A property is a member that provides a flexible mechanism to read, write, or compute the value of a private field. Method - A method is a code block containing a series of statements. In C#, every executed instruction is done so in the context of a method. Procedure - A procedure is a code block containing a series of statements. Function -  A function is a code block containing a series of statements. That return operation result. ", "abstract": ""}, {"id": 4246949, "score": 1, "vote": 0, "content": "In OOP the primary structure is an object. Method is a named action which can be applied to the object.\nProperty is a named value, which the object has. For example, object Human has the property 'Age'.\nfunction is a more general thing, than a method. It is just an action, that doesn't belong to any object. But method is a function that belongs to the object.", "abstract": ""}, {"id": 4246915, "score": 2, "vote": 0, "content": "Function is a standalone construction like trim(), strlen(), fopen() etc. Method is a function of object. It is defined in class. Property is just property of object: I suggest read the manual Classes and Objects chapter.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/16223531/javas-methods-vs-functions", "keywords": [], "tags": ["java", "function", "methods"], "question": {"id": 16223531, "title": "Java&#39;s methods vs. functions", "content": "I just decided to integrate my MATLAB programming skills with some more consistent and rigorous Java coding. Therefore I hope it's not gonna be a too naive question. I'd like knowing if there is any real reason why Java refers to functions as methods and not as functions, as many other program languages do. Is it because of the inner OOP Java's nature compared with procedural languages such as C/C++? or are there any other important (or subtle) reasons? Thanks in advance.", "abstract": ""}, "answers": [{"id": 16335031, "score": 6, "vote": 0, "content": "Well there is a little difference between a method and a function. A function is just a code that you can call anytime by its name and you can pass arguments also known as parameters to it and you can also get the result from any function i.e. return value of the function. But a method is a code that is called by its name but it is associated to any object. You can pass parameters to methods also and you can also get some return value from methods but thing is they will always be associated with some objects. EDITED Java is object oriented, you cannot have Java code to run without classes in most cases however in C++ you can get your code run without classes. So in Java there will be classes and code will be written in classes so they are called methods instead of functions, as they will be associated with objects. But in C++ you can have some function that can be called by passing values explicitly. In simple terms you can say, a method is a function that is related to an object.", "abstract": ""}, {"id": 16335461, "score": 1, "vote": 0, "content": "Can't help thinking a lot of unnecessary drama in this one.  \"methods\" is just a name surely, that Java happens to use, for subroutines which may or may not require parameters, and may or may not return a value? E.g. valid \"methods\" might be as follows, without getting into OO purity, canonical definitions of \"functions\", etc; both of the below may or may not use an object's current \"state\" (instance variable values) in their execution too:", "abstract": ""}, {"id": 16335158, "score": 3, "vote": 0, "content": "In my opinion this figure http://www.jot.fm/issues/issue_2008_03/article4/images/figure2.gif  from http://www.jot.fm/issues/issue_2008_03/article4/\nhelps understanding one of the main differences between OO and procedural programming.\nBasically the idea is that  Procedural programming provides only one dimension to associate a\n  computational unit with a name. Here, procedure calls or names\n  are directly mapped to procedure implementations. In Figure a calling\n  m1 leaves no choice but the invocation of the only implementation of\n  procedure m1 while Object-oriented programming adds another dimension for name resolution\n  to that of procedural programming . In addition to the method or\n  procedure name, message dispatch takes the message receiver into\n  consideration when looking up a method. In Figure 2b we see two\n  implementations of method m1. The selection of the appropriate method\n  not only depends on the the message name m1, but also the receiver of\n  the actual message, here Ry the third section of the figure (c) refers to subject oriented programming, in which the behavior of an object (the called method) does not only depend on the object status but, also, on the subjects which is invoking (or observing) it. However this is actually out of the scope of your question. ", "abstract": ""}, {"id": 16223566, "score": 0, "vote": 0, "content": "They're the same. C++ typically calls them functions. Java typically refers to them as methods. Methods are typically associated with a class. You'll occasionally hear \"class function\" too, which is just a method. It doesn't matter, people will know what you're talking about if you call them either. ", "abstract": ""}]}]