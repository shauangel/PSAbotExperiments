[{"link": "https://stackoverflow.com/questions/6889663/negative-index-of-array-in-php", "keywords": [], "tags": ["php", "arrays"], "question": {"id": 6889663, "title": "Negative index of array in PHP", "content": "I found some code that uses negative array indices. Then, I try to use it, nothing special happens. It behaves normally. I can retrieve all elements by using a standard foreach loop. So, what is the purpose to use those negative indices? And when should I use it?", "abstract": ""}, "answers": [{"id": 42191191, "score": 21, "vote": 0, "content": "From 7.1 onward, we have an important and practical special case, i.e. when using the array syntax to access particular characters of a string from backwards:", "abstract": ""}, {"id": 66510315, "score": 2, "vote": 0, "content": "In PHP 8: Any array that has a number n as its first numeric key will use n+1\nfor its next implicit key, even if n is negative. So if the first key is negative -33, the next key will be -32 (not 0) .. and so on. See the difference here https://3v4l.org/8MXq9", "abstract": ""}, {"id": 24218816, "score": 14, "vote": 0, "content": "Negative array indexes don't have a special meaning (i.e. get the last/second last element etc.) in PHP.\nTo get the last element of an array use: To get the second last add: Keep in mind that these functions modify the arrays internal pointer. To reset it use:", "abstract": ""}, {"id": 6889688, "score": 23, "vote": 0, "content": "Negative array keys have no special meaning in PHP, as (like any other value) they can be the keys of an associative array. Some of PHP's standard library functions (the ones that expect regular arrays with only natural integer indices), however, take negative offsets to mean \"count from the end instead of the beginning\". array_slice is one such example.", "abstract": ""}, {"id": 6889677, "score": 33, "vote": 0, "content": "An array, in PHP, is actually just some kind of an ordered map : you can use integers (positive or negative), but also strings, as keys -- and there will not be much of difference.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/53494616/how-to-create-a-matrix-with-negative-index-position", "keywords": [], "tags": ["python", "arrays", "numpy", "matrix"], "question": {"id": 53494616, "title": "How to create a matrix with negative index position?", "content": "I can create a normal matrix with numpy using How can I create a matrix with a negative index - as in a 1600x200 matrix with row index from -800 to 800?", "abstract": ""}, "answers": [{"id": 74847778, "score": 1, "vote": 0, "content": "Extending the dependency list, this is kind of straightforward using a pandas DataFrame with custom index. However you will need to change slightly the syntax for how you access rows (and columns), yet there is the possibility to slice multiple rows and columns. This is specific to 2d numpy arrays: Once you have such dataframe you can access columns and rows (with few syntax inconsistencies): Full documentation on pandas slicing and indexing can be found here.", "abstract": ""}, {"id": 74906467, "score": 0, "vote": 0, "content": "You can create numpy.ndarray subclass. Take a look at the below example, it can create an array with a specific starting index. Example ", "abstract": ""}, {"id": 74897372, "score": 0, "vote": 0, "content": "You can create a matrix with a negative index using the following code:", "abstract": ""}, {"id": 74890278, "score": 2, "vote": 0, "content": "I don't know why you would need that but if you just need it for indexing try following function: This function only interpretes the first index so you can type in an index from -800 up to 799 for a 1600x200 matrix. If you want to index relatively to its number of lines try following function: Hope that helps!", "abstract": ""}, {"id": 74884414, "score": 0, "vote": 0, "content": "You can use the np.arange function to generate an array of integers from -800 to 800, and then reshape this array into the desired shape using the reshape method. Here's an example of how you could do this: This will create a 1600 x 200 matrix with row indices ranging from -800 to 800. You can then access elements of the matrix using these negative indices just like you would with positive indices. For example, to access the element at row -1 and column 0, you could use the following code:", "abstract": ""}, {"id": 74848106, "score": 3, "vote": 0, "content": "Not clear what is being asked. NumPy arrays do already support access via negative indexing, which will reach out to positions relative to the end, e.g.: If you need an array that is contiguous near the zero of your indices, one option would be to write a function to map each indices i to i + d // 2 (d being the size along the given axis), e.g.: Note that the above function is not as flexible as what NumPy accepts, it is just meant to give some idea on how to proceed.", "abstract": ""}, {"id": 53494862, "score": 3, "vote": 0, "content": "Not sure what you need it for but maybe you could use a dictionary instead. With this you can call a[-800] to a[800]. For 2-D, This can be called with a[(-800,-100)] to a[(800,100)]", "abstract": ""}, {"id": 53494794, "score": 2, "vote": 0, "content": "Probably you refer to the Fortran-like arbitrary indexing of arrays. This is not compatible with Python. Check the comments in this question. Basically it clashes with Python way of treating negative indexes, which is to start counting from the end (or right) of the array.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/57197385/can-arrays-index-be-negative-number-in-java", "keywords": [], "tags": ["java", "arrays"], "question": {"id": 57197385, "title": "Can array&#39;s index be negative number in Java?", "content": "I write codes above, editor didn't judge it illegal, but when I run it, it give me \n\"Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: -1\" So is negative number index in java is illegal all the time? Or there's some special situation can let array's index be negative number?", "abstract": ""}, "answers": [{"id": 70872912, "score": 0, "vote": 0, "content": "As @Darshan Mehta's answer says, negative numbers are not allowed as array indexes. However, you can always write your own array class that allows negative indices. Here's my example using generics. The above example outputs: Array indexes in Java are valid only if 0 <= index < array.length is true. However, because ModuloArray uses Math.floorMod(int x, int y) to access the array elements, any integer (including negative numbers) can be used as a valid index. This behavior is similar to how indexing works for lists in Python.\n", "abstract": ""}, {"id": 57197449, "score": 1, "vote": 0, "content": "So is negative number index in java is illegal all the time? Yes. Or there's some special situation can let array's index be a negative number? You could write own array-like collection type where negative indices would be valid. It would be rather a domain-specific type because I can't think of any general applications. A simple example would be It's not what I would recommend you do. It's confusing and unusual for any Java developer.", "abstract": ""}, {"id": 57197526, "score": 0, "vote": 0, "content": "arrays in java can not be indexed using negative numbers, the \"problem\" is that there is no such unsigned integers defined until now in java, so writing myArr[x] will compile as soon a x is a valid numerical index ", "abstract": ""}, {"id": 57197517, "score": 0, "vote": 0, "content": "In java, Negative index can't  be used. It is 0 based positive index. If used negative index then java will throw \"ArrayIndexOutOfBoundsException\" Exception.", "abstract": ""}, {"id": 57197484, "score": 1, "vote": 0, "content": "In short, no, they cannot be negative.  From the docs(using get for example) ArrayIndexOutOfBoundsException - If the specified index argument is negative, or if it is greater than or equal to the length of the specified array", "abstract": ""}, {"id": 57197478, "score": 5, "vote": 0, "content": "Let's have a look at Oracle's documentation here. This is what it says: An array object contains a number of variables. The number of variables may be zero, in which case the array is said to be empty. The variables contained in an array have no names; instead they are referenced by array access expressions that use non-negative integer index values. These variables are called the components of the array. If an array has n components, we say n is the length of the array; the components of the array are referenced using integer indices from 0 to n - 1, inclusive. Also, All array accesses are checked at run time; an attempt to use an index\n  that is less than zero or greater than or equal to the length of the\n  array causes an ArrayIndexOutOfBoundsException to be thrown. To answer the question, no, index can't be negative.", "abstract": ""}, {"id": 57197451, "score": 0, "vote": 0, "content": "Short answer: No. Slightly less short answer: Array indices range from 0 to the length of the array minus 1. E.g. :", "abstract": ""}, {"id": 57197448, "score": 3, "vote": 0, "content": "There is no support in java for negative indices.\nLast element can be accessed using", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/70425667/how-to-determine-the-negative-index-of-an-element-in-a-list", "keywords": [], "tags": ["python", "list"], "question": {"id": 70425667, "title": "How to determine the negative index of an element in a list?", "content": "How can I see the negative index of an element in a list in python list.index() will only return the positive index. How do I get the negative index of it?", "abstract": ""}, "answers": [{"id": 70425752, "score": 0, "vote": 0, "content": "You can use a simple custom logic for this for example: Code Output", "abstract": ""}, {"id": 70425723, "score": 0, "vote": 0, "content": "A negative index is the index from the end of the list. You could calculate it by subtracting the length of the list from the positive index:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/37956197/what-is-the-negative-index-in-shape-arrays-used-for-tensorflow", "keywords": [], "tags": ["tensorflow"], "question": {"id": 37956197, "title": "What is the negative index in shape arrays used for? (Tensorflow)", "content": "In the MNIST tutorial for Tensorflow, we reshape the output from the last Pool layer to a single vector. The code written was: What is the -1 index for? Aren't we just trying to shape the output to a single vector, so why do we not just reshape to: [1, 7*7*64]? Thanks in advance!", "abstract": ""}, "answers": [{"id": 67161446, "score": 2, "vote": 0, "content": "First shape dimension of -1 at input layer refer to batch size which may be variable. E.g. we may have input shape of (-1, 28, 28, 1) which means we can input data (e.g. images) of size (28, 28, 1), that are received in variable size of batches. The batch size can be 32, or 128, or what so not and it will be automatically applied to the layer. It also works for other layers, e.g. output layer may also have shape of (-1, 10), where first dimension also denotes variable batch size and it will be replaced with a correct batch size at a runtime.", "abstract": ""}, {"id": 37961264, "score": 7, "vote": 0, "content": "The -1 will be inferred. So NumPy or TensorFlow will infer what the dimension size should be based on the incoming elements and the other dimensions specified", "abstract": ""}, {"id": 37956459, "score": 14, "vote": 0, "content": "-1 means auto-expand. For example, a reshape with [-1, 7*7*64] will translate a 1-dimensional shape of, say, [19*7*7*64], to a 2-dimensional shape of [19, 7*7*64]. Another example, a reshape with [5, -1, 7] will translate a 1-dimensional shape of, say, [70], to a 3-dimensional shape of [5, 2, 7].", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/47170740/c-negative-array-index", "keywords": [], "tags": ["c++", "arrays"], "question": {"id": 47170740, "title": "C++ negative array index", "content": "I alloced an int array of 3 elements, and thought of this code below: Here's its output: It seems like array a has 5 alloced space, and a is at the middle of those space.\nAny ideas?", "abstract": ""}, "answers": [{"id": 47170794, "score": 40, "vote": 0, "content": "To explain how negative indexes work, you first have to learn (or remember) that for any array or pointer a and index i, the expression a[i] is equal to *(a + i). That means that you can have a pointer to the middle element of an array, and use it with a positive or negative index, and it's simple arithmetic. Example: Somewhat graphically it can be seen like Now when using a negative index in an array, as in the example of a in the question, it will be something like this: That is, negative indexes here will be out of bounds of the array, and will lead to undefined behavior.", "abstract": ""}, {"id": 47170789, "score": 1, "vote": 0, "content": "When I ran this on my own IDE (Visual Studio 2017) it threw an exception stating that the stack around the array had become corrupted. What I think is happening is that 3 spaces in memory are being allocated but you force the array to write to five spaces, those preceding and after the initial allocation. This will work technically, but is definitely not recommended. You are basically writing over top of something in your memory and that can have bad consequences when done in large arrays.", "abstract": ""}, {"id": 47170783, "score": 2, "vote": 0, "content": "That is something you should never ever do! C++ doesn't check the boundaries of built in plain arrays so technically you can access locations which are out of the allocated space (which is only 3 ints not 5) but you will ultimately produce errors.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/61435459/python-negative-indexing-differences", "keywords": [], "tags": ["python", "pandas"], "question": {"id": 61435459, "title": "Python Negative Indexing differences", "content": "I am using python 3.6, pandas 24.2 and came across a difference.  both produce an error while  is fine along with any other form of index. They are the same data structure but adding certain types of an index allows negative indexing while others don't?", "abstract": ""}, "answers": [{"id": 61438295, "score": 1, "vote": 0, "content": "For using a negative index, you can use: This would work in all the cases. Yes, the error is due to consistency issue as mentioned by @a-arnold. Since indexing with [] must handle a lot of cases, we can't use such index always. And when you set a custom index as string, the negative index works as it does not conflict with the integer index. The Indexing and selecting data \u2014 pandas 1.0.3 documentation gives pretty good idea about indexing and selection in pandas.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/61045656/why-js-allows-negative-indices-in-array", "keywords": [], "tags": ["javascript"], "question": {"id": 61045656, "title": "Why JS allows negative indices in array?", "content": "Why negative indexing of an array in JS doesn't raise an error? It looks like it not intended to have elements with a negative index in an array: UPD. The question is not \"why it is thechnically possible\" buth rather \"why it is allowed by design\". [RESOLVED] Short answer: there is no particular reason, it just happened to become like this.", "abstract": ""}, "answers": [{"id": 61045803, "score": 5, "vote": 0, "content": "Arrays are the special type of object in JavaScript. It has an extra list of methods and properties (like .length and .forEach), and also it has a list of used indexes (integer positive number starting from zero higher).\nBut just like any other object, it can have additional properties: Because of object properties can be accessed not only via dot but also via square brackets you can access any property using array-like syntax: Using the same syntax you can assign properties: You can safely use numbers as a property name for the object, it will automatically be converted to a string. The only difference is when you use positive integer values for the name of the property. Those are interpreted as array indexes.", "abstract": ""}, {"id": 61045737, "score": 1, "vote": 0, "content": "Arrays in javascript also can work as hash objects (as almost all objects in js including functions). So doing: a[-1] = -1 simply defines a new key in the array (as object hash) with key value \"-1\" and value -1. You should know that almost all objects in javascript can be used as hash objects as well. This is what you see. However these keys (which are not positive integers) for arrays do not count as array keys in the normal sense, only as hash keys.", "abstract": ""}, {"id": 61045692, "score": 0, "vote": 0, "content": "JS allows negative indices in an array for the simple reason that they are objects under the hood. You can also put [].blah = 5 and it would be valid but a terrible idea.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/7336679/in-r-what-does-a-negative-index-do", "keywords": [], "tags": ["r", "syntax", "indexing", "matrix-indexing"], "question": {"id": 7336679, "title": "In R, what does a negative index do?", "content": "I am porting part of a program (not enough to compile and run) from R to C++.  I am not familiar with R.  I have done okay using the references online, but was stumped by the following line: I am guessing:", "abstract": ""}, "answers": [{"id": 7336725, "score": 19, "vote": 0, "content": "Negative indices specify dropping (rather than retaining) particular elements ... so x[,-1] specifies dropping the first column (rows are the first dimension, before the comma, and columns are the second dimension, after the comma).  From ?\"[\" ( http://stat.ethz.ch/R-manual/R-devel/library/base/html/Extract.html ): For \u2018[\u2019-indexing only: \u2018i\u2019, \u2018j\u2019, \u2018...\u2019 can be logical\n                vectors, indicating elements/slices to select.  Such vectors\n                are recycled if necessary to match the corresponding extent.\n                \u2018i\u2019, \u2018j\u2019, \u2018...\u2019 can also be negative integers, indicating\n                elements/slices to leave out of the selection.", "abstract": ""}, {"id": 7336777, "score": 8, "vote": 0, "content": "1) cnt2 is a 2 dimensional matrix From the code you provided it is indeed a 2-dimensional structure of some sort (quite possibly a matrix). 2) cnt2.2 is a new variable being declared with a period '.' used the same way an alphabetic character would be. Correct. 3) <- is an assignment. Correct. 4) [,-1] accesses part of the array. I thought [,5] meant all rows, 5th column only. If this is correct, I have no idea what -1 refers to. [,-1] selects all columns except column 1. Note that, unlike in C++, indices in R start from one rather than zero.", "abstract": ""}, {"id": 7336746, "score": 27, "vote": 0, "content": "This is covered in section 2.7 of the manual: http://cran.r-project.org/doc/manuals/R-intro.html#Index-vectors It is a negative index into the cnt2 object specifying all rows and all columns except the first column.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/23431191/negative-indexing-in-python", "keywords": [], "tags": ["python", "list"], "question": {"id": 23431191, "title": "Negative indexing in Python", "content": "I have one record in a list I am trying to get the last name 'smith' from this record I use the below command: It provides me 'smith' But the book I am referring to use the below command: it also gives me same result 'smith' Why do indexes [1] and [-1] provide the same result?", "abstract": ""}, "answers": [{"id": 23431227, "score": 0, "vote": 0, "content": "Positive indexes count from the start of the list, negative indexes count from the end of the list. That is: Now say you have someone with a middle name: jane[0].split()[1] would give Jane's middle name 'elizabeth', while jane[0].split()[-1] would give her last name 'smith' Now having said all this; For a more exhaustive list of things you might be wrong about see Falsehoods Programmers Believe About Names", "abstract": ""}, {"id": 23431292, "score": 0, "vote": 0, "content": "this is your input this is what bob[0] gives you as you can see bob[0] has only two elements so 1 give you second element and -1 gives you last element which is same", "abstract": ""}, {"id": 23431252, "score": 0, "vote": 0, "content": "Because in this case the list you are splitting is ['adam', 'smith']. So, bob[0].split()[1] would return the 2nd element (don't forget list indexes are 0-based) and bob[0].split()[-1] would return that last element. Since the size of the list is 2, the second (index 1) and last (index -1) are the same. In general if you have a list my_list, then my_list[len(my_list) - 1] == my_list[-1]", "abstract": ""}, {"id": 23431240, "score": 5, "vote": 0, "content": "Python lists can be \"back indexed\" using negative indices. -1 signifies the last element, -2 signifies the second to last and so on. It just so happens that in your list of length 2, the last element is also the element at index 1. Your book suggests using -1 because it is more appropriate from a logical standpoint. You don't want the item at index 1 per se, but rather the last element of the list, which is the last name. What if, for example, a middle name was also included? Then using an index of 1 would not work whereas an index of -1 would.", "abstract": ""}]}]