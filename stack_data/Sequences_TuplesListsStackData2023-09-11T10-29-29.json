[{"link": "https://stackoverflow.com/questions/2102499/iterating-through-a-list-in-reverse-order-in-java", "keywords": [], "tags": ["java", "collections"], "question": {"id": 2102499, "title": "Iterating through a list in reverse order in java", "content": "I'm migrating a piece of code to make use of generics. One argument for doing so is that the for loop is much cleaner than keeping track of indexes, or using an explicit iterator. In about half the cases, the list (an ArrayList) is being iterated in reverse order by using an index today. Can someone suggest a cleaner way of doing this (since I dislike the indexed for loop when working with collections), though it does work? Note: I can't add any new dependencies outside the JDK.", "abstract": ""}, "answers": [{"id": 76896466, "score": 1, "vote": 0, "content": "Java 21 is adding a reversed() method to List, which returns a reversed view of the list.  This can be used to iterate in reverse order.", "abstract": ""}, {"id": 73321568, "score": 0, "vote": 0, "content": "How about using DeQue:", "abstract": ""}, {"id": 67763852, "score": -1, "vote": 0, "content": "", "abstract": ""}, {"id": 22304460, "score": 3, "vote": 0, "content": "You could use ReverseListIterator from Apache Commons-Collections: https://commons.apache.org/proper/commons-collections/apidocs/org/apache/commons/collections4/iterators/ReverseListIterator.html", "abstract": ""}, {"id": 32076116, "score": 11, "vote": 0, "content": "This is an old question, but it's lacking a java8-friendly answer. Here are some ways of reverse-iterating the list, with the help of the Streaming API:", "abstract": ""}, {"id": 2102524, "score": 1, "vote": 0, "content": "Create a custom reverseIterable.  ", "abstract": ""}, {"id": 15274617, "score": 39, "vote": 0, "content": "Guava offers Lists#reverse(List) and ImmutableList#reverse(). As in most cases for Guava, the former delegates to the latter if the argument is an ImmutableList, so you can use the former in all cases.  These do not create new copies of the list but just \"reversed views\" of it. Example", "abstract": ""}, {"id": 23884932, "score": 4, "vote": 0, "content": "If the lists are fairly small so that performance is not a real issue, one can use the reverse-metod of the Lists-class in Google Guava. Yields pretty for-each-code, and the original list stays the same. Also, the reversed list is backed by the original list, so any change to the original list will be reflected in the reversed one. Yields the following result: Which means that reverse iteration of myList can be written as:", "abstract": ""}, {"id": 2102539, "score": 16, "vote": 0, "content": "Option 1: Have you thought about reversing the List with Collections#reverse() and then using foreach? Of course, you may also want to refactor your code such that the list is ordered correctly so you don't have to reverse it, which uses extra space/time. EDIT: Option 2: Alternatively, could you use a Deque instead of an ArrayList?  It will allow you to iterate forwards and backwards EDIT: Option 3: As others have suggested, you could write an Iterator that will go through the list in reverse, here is an example:", "abstract": ""}, {"id": 12334827, "score": 1, "vote": 0, "content": "To have code which looks like this: Put this code into a file called \"In.java\":", "abstract": ""}, {"id": 23877084, "score": -1, "vote": 0, "content": "As has been suggested at least twice, you can use descendingIterator with a Deque, in particular with a LinkedList. If you want to use the for-each loop (i.e., have an Iterable), you can construct and use a wraper like this:", "abstract": ""}, {"id": 11227109, "score": -11, "vote": 0, "content": "Reason : \"Don't know why there is no descendingIterator with ArrayList...\" Since array list doesnot keep the list in the same order as data has been added to list. So, never use Arraylist . Linked list will keep the data in same order of ADD to list. So , above in my example, i used ArrayList() in order to make user to twist their mind and make them to workout something from their side. Instead of this USE:", "abstract": ""}, {"id": 11226370, "score": 2, "vote": 0, "content": "Very simple Example:", "abstract": ""}, {"id": 3227002, "score": 12, "vote": 0, "content": "You could use the concrete class LinkedList instead of the general interface List. Then you have a descendingIterator for iterating with the reverse direction. Don't know why there is no descendingIterator with ArrayList...", "abstract": ""}, {"id": 2103082, "score": 0, "vote": 0, "content": "Also found google collections reverse method.", "abstract": ""}, {"id": 2103037, "score": 5, "vote": 0, "content": "Here is an (untested) implementation of a ReverseIterable.  When iterator() is called it creates and returns a private ReverseIterator implementation, which simply maps calls to hasNext() to hasPrevious() and calls to next() are mapped to previous().  It means you could iterate over an ArrayList in reverse as follows: Class Definition", "abstract": ""}, {"id": 2102552, "score": 472, "vote": 0, "content": "Try this:", "abstract": ""}, {"id": 2102550, "score": 26, "vote": 0, "content": "I don't think it's possible using the for loop syntax.  The only thing I can suggest is to do something like: ... but I wouldn't say this is \"cleaner\" given that it's going to be less efficient.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/1098117/can-one-do-a-for-each-loop-in-java-in-reverse-order", "keywords": [], "tags": ["java", "reverse", "foreach"], "question": {"id": 1098117, "title": "Can one do a for each loop in java in reverse order?", "content": "I need to run through a List in reverse order using Java.  So where this does it forwards: Is there some way to iterate the stringList in reverse order using the for each syntax? For clarity: I know how to iterate a list in reverse order but would like to know (for curiosity's sake ) how to do it in the for each style.", "abstract": ""}, "answers": [{"id": 76718202, "score": 1, "vote": 0, "content": "Starting with the upcoming Java 21, the reversed() method can be used to return a reversed view on the list, which can then be iterated over using an enhanced for statement:", "abstract": ""}, {"id": 35018637, "score": 3, "vote": 0, "content": "As of the comment: You should be able to use Apache Commons ReverseListIterator As @rogerdpack said, you need to wrap the ReverseListIterator as an Iterable. As recommended by Roland Nordborg-L\u00f8vstad in the comments, you can simplify with Lambdas in current Java", "abstract": ""}, {"id": 67752501, "score": 0, "vote": 0, "content": "E.g. Reverse it now.", "abstract": ""}, {"id": 1098133, "score": 1, "vote": 0, "content": "You can use the Collections class to reverse the list then loop.", "abstract": ""}, {"id": 57954262, "score": 2, "vote": 0, "content": "A work Around :  Or with guava : ", "abstract": ""}, {"id": 1098153, "score": 158, "vote": 0, "content": "The Collections.reverse method actually returns a new list with the elements of the original list copied into it in reverse order, so this has O(n) performance with regards to the size of the original list. As a more efficient solution, you could write a decorator that presents a reversed view of a List as an Iterable. The iterator returned by your decorator would use the ListIterator of the decorated list to walk over the elements in reverse order. For example: And you would use it like:", "abstract": ""}, {"id": 52132535, "score": 0, "vote": 0, "content": "Definitely a late answer to this question. One possibility is to use the ListIterator in a for loop. It's not as clean as colon-syntax, but it works. Credit for the ListIterator syntax goes to \"Ways to iterate over a list in Java\"", "abstract": ""}, {"id": 42784492, "score": 1, "vote": 0, "content": "All answers above only fulfill the requirement, either by wrapping another method or calling some foreign code outside; Here is the solution copied from the Thinking in Java 4th edition, chapter 11.13.1 AdapterMethodIdiom; Here is the code:", "abstract": ""}, {"id": 1098137, "score": 101, "vote": 0, "content": "For a list, you could use the Google Guava Library: Note that Lists.reverse doesn't reverse the whole collection, or do anything like it - it just allows iteration and random access, in the reverse order. This is more efficient than reversing the collection first. To reverse an arbitrary iterable, you'd have to read it all and then \"replay\" it backwards. (If you're not already using it, I'd thoroughly recommend you have a look at the Guava. It's great stuff.)", "abstract": ""}, {"id": 4740681, "score": 2, "vote": 0, "content": "This may be an option. Hope there is a better way to start from last element than to while loop to the end.", "abstract": ""}, {"id": 1098204, "score": 11, "vote": 0, "content": "This will mess with the original list and also needs to be called outside of the loop.\nAlso you don't want to perform a reverse every time you loop - would that be true if one of the Iterables.reverse ideas was applied?", "abstract": ""}, {"id": 6074603, "score": 46, "vote": 0, "content": "The List (unlike the Set) is an ordered collection and iterating over it does preserve the order by contract. I would have expected a Stack to iterate in the reverse order but unfortunately it doesn't. So the simplest solution I can think of is this: I realize that this is not a \"for each\" loop solution. I'd rather use the for loop than introducing a new library like the Google Collections. Collections.reverse() also does the job but it updates the list as opposed to returning a copy in reverse order.", "abstract": ""}, {"id": 1098129, "score": 5, "vote": 0, "content": "AFAIK there isn't a standard \"reverse_iterator\" sort of thing in the standard library that supports the for-each syntax which is already a syntactic sugar they brought late into the language.  You could do something like for(Item element: myList.clone().reverse()) and pay the associated price.  This also seems fairly consistent with the apparent phenomenon of not giving you convenient ways to do expensive operations - since a list, by definition, could have O(N) random access complexity (you could implement the interface with a single-link), reverse iteration could end up being O(N^2). Of course, if you have an ArrayList, you don't pay that price. ", "abstract": ""}, {"id": 1098135, "score": 1, "vote": 0, "content": "You'd need to reverse your collection if you want to use the for each syntax out of the box and go in reverse order.", "abstract": ""}, {"id": 1098130, "score": 1, "vote": 0, "content": "Not without writing some custom code which will give you an enumerator which will reverse the elements for you. You should be able to do it in Java by creating a custom implementation of Iterable which will return the elements in reverse order. Then, you would instantiate the wrapper (or call the method, what-have-you) which would return the Iterable implementation which reverses the element in the for each loop.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/3940128/how-do-i-reverse-a-list-or-loop-over-it-backwards", "keywords": [], "tags": ["python", "list"], "question": {"id": 3940128, "title": "How do I reverse a list or loop over it backwards?", "content": "How do I iterate over a list in reverse in Python? See also: How can I get a reversed copy of a list (avoid a separate statement when chaining a method after .reverse)?", "abstract": ""}, "answers": [{"id": 60807295, "score": 56, "vote": 0, "content": "There are three different built-in ways to reverse a list. Which method is best depends on whether you need to: From a speed perspective, it is best to use the above built-in functions to reverse a list. For reversing, they are 2 to 8 times faster on short lists (10 items), and up to ~300+ times faster on long lists compared to a manually-created loop or generator. This makes sense -  they are written in a native language (i.e. C), have experts creating them, scrutiny, and optimization. They are also less prone to defects and more likely to handle edge and corner cases. Put all the code snippets in this answer together to make a script that will run the different ways of reversing a list that are described below. It will time each method while running it 100,000 times. The results are shown in the last section for lists of length 2, 10, and 1000 items. If the goal is just to reverse the order of the items in an existing list, without looping over them or getting a copy to work with, use the <list>.reverse() function. Run this directly on a list object, and the order of all items will be reversed: Note that the following will reverse the original variable that is given, even though it also returns the reversed list back. i.e. you can create a copy by using this function output. Typically, you wouldn't make a function for this, but the timing script requires it. We test the performance of this two ways - first just reversing a list in-place (changes the original list), and then copying the list and reversing it afterward to see if that is the fastest way to create a reversed copy compared to the other methods. The built-in index slicing method allows you to make a copy of part of any indexed object. The generic syntax is: <object>[first_index:last_index:step]. To exploit slicing to create a simple reversed list, use: <list>[::-1]. When leaving an option empty, it sets them to defaults of the first and last element of the object (reversed if the step size is negative). Indexing allows one to use negative numbers, which count from the end of the object's index backwards (i.e. -2 is the second to last item). When the step size is negative, it will start with the last item and index backward by that amount. There is a reversed(indexed_object) function: Test with both a raw iterator, and creating a list from the iterator. As the timing shows, creating your own methods of indexing is a bad idea. Use the built-in methods unless you really do need to do something custom. This simply means learning the built-in methods. That said, there is not a huge penalty with smaller list sizes, but when you scale up the penalty becomes tremendous. The code below could be optimized, I'm sure, but it can't ever match the built-in methods as they are directly implemented in a native language. Following is the rest of the script to time each method of reversing. It shows reversing in place with obj.reverse() and creating the reversed(obj) iterator are always the fastest, while using slices is the fastest way to create a copy. It also proves not to try to create a way of doing it on your own unless you have to! The results show that scaling works best with the built-in methods best suited for a particular type of reversing. In other words, as the object element count increases, the built-in methods outpace the other methods by even more. The built-in method that directly achieves what you need does better than stringing things together. i.e. slicing is best if you need a copy of the reversed list - it's faster than creating a duplicate list from list(reversed(obj)) function, and faster than making a copy of the list and then doing an in-place obj.reverse(), but never by more than double the speed. Meanwhile - custom methods can take orders of magnitude longer with large lists. For scaling, with a 1000 item list, the reversed(<list>) function call takes ~30 ms to setup the iterator, reversing in-place takes just ~55 ms, using the slice method takes ~210 ms to create a copy of the full reversed list, but the quickest manual method I made took ~8400 ms. With 2 items in the list: With 10 items in the list: And with 1000 items in the list:", "abstract": ""}, {"id": 3940144, "score": 1646, "vote": 0, "content": "To get a new reversed list, apply the reversed function and collect the items into a list: To iterate backwards through a list:", "abstract": ""}, {"id": 3940149, "score": 456, "vote": 0, "content": "Use list.reverse to reverse a list in-place: Use slices to create a new list with the items in reverse order:", "abstract": ""}, {"id": 26111558, "score": 2, "vote": 0, "content": "The question is not how to return a list in reverse but rather how to reverse a list with an example list name array. To reverse a list named \"array\" use array.reverse(). The incredibly useful slice method as described can also be used to reverse a list in place by defining the list as a sliced modification of itself using array[:] = array[::-1].", "abstract": ""}, {"id": 57171934, "score": 0, "vote": 0, "content": "use", "abstract": ""}, {"id": 53980025, "score": 4, "vote": 0, "content": "Using some old school logic to practice for interviews. Swapping numbers front to back. Using two pointers index[0] and index[last]", "abstract": ""}, {"id": 72293753, "score": -1, "vote": 0, "content": "", "abstract": ""}, {"id": 3940137, "score": 1503, "vote": 0, "content": "Extended slice syntax is explained here. See also, documentation.", "abstract": ""}, {"id": 65685044, "score": 3, "vote": 0, "content": "ORGANIZING VALUES: In Python, lists' order too can be manipulated with sort, organizing your variables in numerical/alphabetical order:\nTemporarily: print(sorted(my_list)) Permanent: You can sort with the flag \"reverse=True\": WITHOUT ORGANIZING Maybe you do not want to sort values, but only reverse the values. Then we can do it like this: **Numbers have priority over alphabet in listing order. The Python values' organization is awesome. Edit 1: a mistaken moderator claimed that my answer was a copy and deleted my old post.", "abstract": ""}, {"id": 68701255, "score": -1, "vote": 0, "content": "alternative way using list comprehension and abs", "abstract": ""}, {"id": 68519612, "score": -1, "vote": 0, "content": "A clean simple class object to solve your issue.", "abstract": ""}, {"id": 67781794, "score": -2, "vote": 0, "content": "I had this question come up during a python code test for a job interview.\nThe below is my answer.\nNote it works for any value any length", "abstract": ""}, {"id": 42568383, "score": 4, "vote": 0, "content": "You can also use the bitwise complement of the array index to step through the array in reverse: Whatever you do, don't do it this way ;)", "abstract": ""}, {"id": 60313631, "score": 2, "vote": 0, "content": "There are 3 methods to get the reversed list: Slicing Method 1:    reversed_array = array[-1::-1] Slicing Method 2:\nreversed_array2 = array[::-1] Using the builtin function: reversed_array = array.reverse() The third function actually reversed the list object in place. That means no copy of pristine data is maintained. This is a good approach if you don't want to maintain the old version. But doesn't seem to be a solution if you do want the pristine and reversed version.", "abstract": ""}, {"id": 59189264, "score": 7, "vote": 0, "content": "Another solution would be to use numpy.flip for this", "abstract": ""}, {"id": 58441850, "score": 0, "vote": 0, "content": "Here's a way to lazily evaluate the reverse using a generator: Now iterate through like this: If you need a list:", "abstract": ""}, {"id": 57979452, "score": -1, "vote": 0, "content": "This class uses Python magic methods and iterators for reversing, and reverses a list:", "abstract": ""}, {"id": 57643102, "score": 0, "vote": 0, "content": "Reverse of a user input values in one line code:", "abstract": ""}, {"id": 56821996, "score": 2, "vote": 0, "content": "With minimum amount of built-in functions, assuming it's interview settings", "abstract": ""}, {"id": 35630643, "score": 31, "vote": 0, "content": "Using slicing, e.g. array = array[::-1], is a neat trick and very Pythonic, but a little obscure for newbies maybe. Using the reverse() method is a good way to go in day to day coding because it is easily readable. However, if you need to reverse a list in place as in an interview question, you will likely not be able to use built in methods like these.  The interviewer will be looking at how you approach the problem rather than the depth of Python knowledge, an algorithmic approach is required. The following example, using a classic swap, might be one way to do it:- Note that this will not work on Tuples or string sequences, because strings and tuples are immutable, i.e., you cannot write into them to change elements.", "abstract": ""}, {"id": 29140786, "score": 3, "vote": 0, "content": "Use list comprehension:", "abstract": ""}, {"id": 47286139, "score": 17, "vote": 0, "content": "With reversed and list:", "abstract": ""}, {"id": 44301749, "score": 0, "vote": 0, "content": "Can be done using __reverse__ , which returns a generator.", "abstract": ""}, {"id": 20101037, "score": 32, "vote": 0, "content": "For reversing the same list use:  To assign reversed list into some other list use:", "abstract": ""}, {"id": 40230218, "score": 0, "vote": 0, "content": "Reversing in-place by switching references of opposite indices:", "abstract": ""}, {"id": 40294928, "score": 22, "vote": 0, "content": "I find (contrary to some other suggestions) that l.reverse() is by far the fastest way to reverse a long list in Python 3 and 2. I'd be interested to know if others can replicate these timings. l[::-1] is probably slower because it copies the list prior to reversing it. Adding the list() call around the iterator made by reversed(l) must add some overhead. Of course if you want a copy of the list or an iterator then use those respective methods, but if you want to just reverse the list then l.reverse() seems to be the fastest way. Functions List Python 3.5 timings Python 2.7 timings", "abstract": ""}, {"id": 39041089, "score": 0, "vote": 0, "content": "", "abstract": ""}, {"id": 38630884, "score": 1, "vote": 0, "content": "", "abstract": ""}, {"id": 35351521, "score": 1, "vote": 0, "content": "You could always treat the list like a stack just popping the elements off the top of the stack from the back end of the list. That way you take advantage of first in last out characteristics of a stack. Of course you are consuming the 1st array. I do like this method in that it's pretty intuitive in that you see one list being consumed from the back end while the other is being built from the front end.", "abstract": ""}, {"id": 35236452, "score": 8, "vote": 0, "content": "Using reversed(array) would be the likely best route.  Should you need to understand how could implement this without using the built in reversed. This should take O(N) time.", "abstract": ""}, {"id": 34260263, "score": 1, "vote": 0, "content": "", "abstract": ""}, {"id": 33327555, "score": -1, "vote": 0, "content": "", "abstract": ""}, {"id": 33086218, "score": 4, "vote": 0, "content": "If you want to store the elements of reversed list in some other variable, then you can use revArray = array[::-1] or revArray = list(reversed(array)). But the first variant is slightly faster: Output:", "abstract": ""}, {"id": 29958795, "score": 1, "vote": 0, "content": "", "abstract": ""}, {"id": 3940427, "score": 1, "vote": 0, "content": "The most direct translation of your requirement into Python is this for statement: This is rather cryptic but may be useful.", "abstract": ""}, {"id": 3940155, "score": 11, "vote": 0, "content": "", "abstract": ""}, {"id": 3940140, "score": 18, "vote": 0, "content": "", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/1211608/possible-to-iterate-backwards-through-a-foreach", "keywords": [], "tags": ["c#", "foreach"], "question": {"id": 1211608, "title": "Possible to iterate backwards through a foreach?", "content": "I know I could use a for statement and achieve the same effect, but can I loop backwards through a foreach loop in C#?", "abstract": ""}, "answers": [{"id": 75168157, "score": 1, "vote": 0, "content": "This is simple when we use the List.Reverse() method and foreach together. You can refer to this post for other options as well.", "abstract": ""}, {"id": 69920378, "score": 0, "vote": 0, "content": "I added an extension to the list type to help me lazily loop the list in reverse use like this", "abstract": ""}, {"id": 28601063, "score": 20, "vote": 0, "content": "Before using foreach for iteration, reverse the list by the reverse method:", "abstract": ""}, {"id": 51054759, "score": 5, "vote": 0, "content": "Elaborateling slighty on the nice answer by Jon Skeet, this could be versatile: And then use as", "abstract": ""}, {"id": 38653355, "score": -2, "vote": 0, "content": "I have used this code which worked", "abstract": ""}, {"id": 31160480, "score": 6, "vote": 0, "content": "Sometimes you don't have the luxury of indexing, or perhaps you want to reverse the results of a Linq query, or maybe you don't want to modify the source collection, if any of these are true, Linq can help you. A Linq extension method using anonymous types with Linq Select to provide a sorting key for Linq OrderByDescending; Usage: It is named \"Invert\" because it is synonymous with \"Reverse\" and enables disambiguation with the List Reverse implementation. It is possible to reverse certain ranges of a collection too, since Int32.MinValue and Int32.MaxValue are out of the range of any kind of collection index, we can leverage them for the ordering process; if an element index is below the given range, it is assigned Int32.MaxValue so that its order doesn't change when using OrderByDescending, similarly, elements at an index greater than the given range, will be assigned Int32.MinValue, so that they appear to the end of the ordering process. All elements within the given range are assigned their normal index and are reversed accordingly. Usage: I'm not sure of the performance hits of these Linq implementations versus using a temporary List to wrap a collection for reversing. At time of writing, I was not aware of Linq's own Reverse implementation, still, it was fun working this out. \nhttps://msdn.microsoft.com/en-us/library/vstudio/bb358497(v=vs.100).aspx", "abstract": ""}, {"id": 24486151, "score": 7, "vote": 0, "content": "If you use a List<T>, you can also use this code: This is a method that write the list reverse in itself. Now the foreach: The output is:", "abstract": ""}, {"id": 1211610, "score": 177, "vote": 0, "content": "If you are on .NET 3.5 you can do this: It isn't very efficient as it has to basically go through the enumerator forwards putting everything on a stack then pops everything back out in reverse order. If you have a directly-indexable collection (e.g. IList) you should definitely use a for loop instead. If you are on .NET 2.0 and cannot use a for loop (i.e. you just have an IEnumerable) then you will just have to write your own Reverse function. This should work: This relies on some behaviour which is perhaps not that obvious. When you pass in an IEnumerable to the stack constructor it will iterate through it and push the items onto the stack. When you then iterate through the stack it pops things back out in reverse order. This and the .NET 3.5 Reverse() extension method will obviously blow up if you feed it an IEnumerable which never stops returning items.", "abstract": ""}, {"id": 1211611, "score": 95, "vote": 0, "content": "When working with a list (direct indexing), you cannot do it as efficiently as using a for loop. Edit: Which generally means, when you are able to use a for loop, it's likely the correct method for this task. Plus, for as much as foreach is implemented in-order, the construct itself is built for expressing loops that are independent of element indexes and iteration order, which is particularly important in parallel programming. It is my opinion that iteration relying on order should not use foreach for looping.", "abstract": ""}, {"id": 12713023, "score": 4, "vote": 0, "content": "It is possible if you can change the collection code that implements IEnumerable or IEnumerable (e.g. your own implementation of IList). Create an Iterator doing this job for you, for example like the following implementation through the IEnumerable interface (assuming 'items' is a List field in this sample): Because of this your List will iterate in reverse order through your list. Just a hint: You should clearly state this special behaviour of your list within the documentation (even better by choosing a self-explaining class name like Stack or Queue, too).", "abstract": ""}, {"id": 1211626, "score": 72, "vote": 0, "content": "As 280Z28 says, for an IList<T> you can just use the index. You could hide this in an extension method: This will be faster than Enumerable.Reverse() which buffers all the data first. (I don't believe Reverse has any optimisations applied in the way that Count() does.) Note that this buffering means that the data is read completely when you first start iterating, whereas FastReverse will \"see\" any changes made to the list while you iterate. (It will also break if you remove multiple items between iterations.) For general sequences, there's no way of iterating in reverse - the sequence could be infinite, for example: What would you expect to happen if you tried to iterate over that in reverse?", "abstract": ""}, {"id": 1833024, "score": -8, "vote": 0, "content": "This works pretty well", "abstract": ""}, {"id": 1211612, "score": 2, "vote": 0, "content": "No. ForEach just iterates through collection for each item and order depends whether it uses IEnumerable or GetEnumerator().", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/529424/traverse-a-list-in-reverse-order-in-python", "keywords": [], "tags": ["python", "loops", "reverse"], "question": {"id": 529424, "title": "Traverse a list in reverse order in Python", "content": "How do I traverse a list in reverse order in Python? So I can start from collection[len(collection)-1] and end in collection[0]. I also want to be able to access the loop index.", "abstract": ""}, "answers": [{"id": 40999178, "score": 43, "vote": 0, "content": "An approach with no imports: Time complexity O(n) and space complexity O(1). An approach that creates a new list in memory, be careful with large lists: Time complexity O(n) and space complexity O(n).", "abstract": ""}, {"id": 72380349, "score": 1, "vote": 0, "content": "As a beginner in python, I found this way more easy to understand and reverses a list. say numlst = [1, 2, 3, 4] for i in range(len(numlst)-1,-1,-1): print( numlst[ i ] ) o/p = 4, 3, 2, 1", "abstract": ""}, {"id": 52266579, "score": 5, "vote": 0, "content": "Assuming task is to find last element that satisfies some condition in a list (i.e. first when looking backwards), I'm getting following numbers. Python 2: So, the ugliest option xrange(len(xs)-1,-1,-1) is the fastest. Python 3 (different machine): Here, enumerate(reversed(xs), 1) is the fastest.", "abstract": ""}, {"id": 69930468, "score": 1, "vote": 0, "content": "I'm confused why the obvious choice did not pop up so far: If reversed() is not working because you have a generator (as the case with enumerate()), just use sorted():", "abstract": ""}, {"id": 51340606, "score": 14, "vote": 0, "content": "In python 3, list creates a copy, so reversed(list(enumerate(collection)) could be inefficient, generating yet an other list is not optimized away. If collection is a list for sure, then it may be best to hide the complexity behind an iterator so, the cleanest is:", "abstract": ""}, {"id": 7722144, "score": 41, "vote": 0, "content": "The reversed builtin function is handy: The documentation for reversed explains its limitations. For the cases where I have to walk a sequence in reverse along with the index (e.g. for in-place modifications changing the sequence length), I have this function defined an my codeutil module: This one avoids creating a copy of the sequence. Obviously, the reversed limitations still apply.", "abstract": ""}, {"id": 530507, "score": 121, "vote": 0, "content": "It can be done like this: So your guess was pretty close :) A little awkward but it's basically saying: start with 1 less than len(collection), keep going until you get to just before -1, by steps of -1. Fyi, the help function is very useful as it lets you view the docs for something from the Python console, eg: help(range)", "abstract": ""}, {"id": 58849875, "score": 0, "vote": 0, "content": "you can use a generator: finally: hope this help you.", "abstract": ""}, {"id": 56424919, "score": 4, "vote": 0, "content": "I think the most elegant way is to transform enumerate and reversed using the following generator which generates a the reverse of the enumerate iterator Example: Result:", "abstract": ""}, {"id": 52195368, "score": 5, "vote": 0, "content": "If you need the index and your list is small, the most readable way is to do reversed(list(enumerate(your_list))) like the accepted answer says. But this creates a copy of your list, so if your list is taking up a large portion of your memory you'll have to subtract the index returned by enumerate(reversed()) from len()-1. If you just need to do it once: or if you need to do this multiple times you should use a generator:", "abstract": ""}, {"id": 529427, "score": 1692, "vote": 0, "content": "Use the built-in reversed() function: To also access the original index, use enumerate() on your list before passing it to reversed(): Since enumerate() returns a generator and generators can't be reversed, you need to convert it to a list first.", "abstract": ""}, {"id": 54817016, "score": 4, "vote": 0, "content": "If you don't mind the index being negative, you can do:", "abstract": ""}, {"id": 49693921, "score": 16, "vote": 0, "content": "Also, you could use either \"range\" or \"count\" functions. \nAs follows: You could also use \"count\" from itertools as following:", "abstract": ""}, {"id": 51462833, "score": 1, "vote": 0, "content": "i think this one is also simple way to do  it... read from end and keep decrementing till the length of list, since we never execute the \"end\" index hence added -1 also", "abstract": ""}, {"id": 47975414, "score": 0, "vote": 0, "content": "A simple way : ", "abstract": ""}, {"id": 47492673, "score": 2, "vote": 0, "content": "You can use a negative index in an ordinary for loop: To access the index as though you were iterating forward over a reversed copy of the collection, use i - 1: To access the original, un-reversed index, use len(collection) - i:", "abstract": ""}, {"id": 42491881, "score": 7, "vote": 0, "content": "for what ever it's worth you can do it like this too. very simple.", "abstract": ""}, {"id": 38613651, "score": 2, "vote": 0, "content": "You can also use a while loop:", "abstract": ""}, {"id": 37574802, "score": 2, "vote": 0, "content": "To use negative indices: start at -1 and step back by -1 at each iteration.", "abstract": ""}, {"id": 32517283, "score": 13, "vote": 0, "content": "OR", "abstract": ""}, {"id": 25352522, "score": 11, "vote": 0, "content": "I like the one-liner generator approach:", "abstract": ""}, {"id": 23282463, "score": 6, "vote": 0, "content": "", "abstract": ""}, {"id": 21793637, "score": 13, "vote": 0, "content": "How about without recreating a new list, you can do by indexing: OR", "abstract": ""}, {"id": 17899322, "score": 1, "vote": 0, "content": "The other answers are good, but if you want to do as \nList comprehension style", "abstract": ""}, {"id": 529439, "score": 7, "vote": 0, "content": "Use list.reverse() and then iterate as you normally would. http://docs.python.org/tutorial/datastructures.html", "abstract": ""}, {"id": 529466, "score": 79, "vote": 0, "content": "If you need the loop index, and don't want to traverse the entire list twice, or use extra memory, I'd write a generator.  ", "abstract": ""}, {"id": 529443, "score": 251, "vote": 0, "content": "You can do: (Or whatever you want to do in the for loop.) The [::-1] slice reverses the list in the for loop (but won't actually modify your list \"permanently\").", "abstract": ""}, {"id": 529441, "score": 3, "vote": 0, "content": "the reverse function comes in handy here:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/51738699/iterating-an-interable-sequence-in-reverse-order", "keywords": [], "tags": ["python", "python-3.x"], "question": {"id": 51738699, "title": "iterating an interable sequence in reverse order", "content": "I have a iterable sequence nums = [1,2,3,4]. I want to create a generator function which, when next(nums) is used, will return the values one by one in reverse order. My goal is to do this using len(). I know the length of the list minus one would be the index of the last item in the list. How would I write the code for the output using len(): EDIT: Forgot to mention no other built-in functions are allowed.", "abstract": ""}, "answers": [{"id": 51738869, "score": 0, "vote": 0, "content": "", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/69102162/looping-backwards-in-python-and-getting-the-index", "keywords": [], "tags": ["python"], "question": {"id": 69102162, "title": "Looping backwards in python and getting the index", "content": "There are multiple ways to loop back in python\nFor example we have which gives I can solve what I need with that, but I am curious. There is another way to loop back which is Looks nice, right?\nThis gives My question is, using this second method is there a way to get not only the element but also the index? (the 2,1,0)", "abstract": ""}, "answers": [{"id": 69102724, "score": 2, "vote": 0, "content": "Here's a way using reversed() and zip() that should be memory efficient: Output:", "abstract": ""}, {"id": 69102477, "score": 0, "vote": 0, "content": "", "abstract": ""}, {"id": 69102389, "score": 3, "vote": 0, "content": "use the builtin method reversed", "abstract": ""}, {"id": 69102371, "score": 2, "vote": 0, "content": "There's a builtin for that: reversed. This might be more readable and intuitive than using a range or slice with negative step. For just the index, you can pass the range to reversed directly: For index and element, you have to collect the enumerate iterator into a list before reversing:", "abstract": ""}, {"id": 69102249, "score": 1, "vote": 0, "content": "This uses enumerate to keep elements with their specific index. Then we convert it to list and reverse (enumerate result is not reversible without converting). No need to keep track of any order (like subtracting) manually You can also just reverse the forward range: Python actually reverses range in a smart way, without converting it to a list, so it works even for big stuff: This means that range(len(arr))[::-1] will work in exactly the same way, with exactly the same speed, as your range(len(arr)-1, -1, -1) while looking nice!", "abstract": ""}, {"id": 69102237, "score": -1, "vote": 0, "content": "The normal way to iterate with an index is with enumerate. One can use this to index the other way by subtracting the index from the length of the sequence: Note that reversed doesn't create a new list in memory and is preferable to [::-1] if just iterating.", "abstract": ""}, {"id": 69102213, "score": -1, "vote": 0, "content": "You can use enumerate and subtract from the initial length: output:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/67957942/how-to-enumerate-over-a-list-in-python-backwards-with-indexfrom-the-end-to-the", "keywords": [], "tags": ["python", "loops", "reverse"], "question": {"id": 67957942, "title": "How to enumerate over a list in python backwards with index(From the end to the beginning)", "content": "I'm like to iterate over a list of received data from Digikey api any didn't have much luck googling since the function enumerate(reversed(part.standard_pricing)) just doesn't work and you can't reverse the part.standard_pricing for some reason\nSomething like that is desired: But range doesn't work on list either... I'd like to do that: just instead start from the end of part.standard_pricing and have the index decrease instead of increase Any idea on how to do that pythonically?", "abstract": ""}, "answers": [{"id": 67958475, "score": 3, "vote": 0, "content": "You don't need to reverse or copy the list. Just use it in place and index it from the end: This is a mirror of the Python antipattern but since it is a mirror you can consider it an anti-antipattern.", "abstract": ""}, {"id": 67958072, "score": 6, "vote": 0, "content": "Instead of reverseing the enumerated list, we can also enumerate the reversed list and use a bit of math for the index: to get You can also go for i = -j and get -1, -2, -3, which, when indexes, gives the same values as the 2, 1, 0 respectively.", "abstract": ""}, {"id": 67957975, "score": 9, "vote": 0, "content": "You can call enumerate on the list, then convert the enumerate object to list, it will give list of tuples where each tuple will have index and value, finally iterate on reversed list. In case, you don't want another copy of the sequence in the memory, you can create your custom generator.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/58673766/how-to-reduce-in-reverse-so-to-iterate-from-the-last-index-and-on-through-until", "keywords": [], "tags": ["clojure"], "question": {"id": 58673766, "title": "how to reduce in reverse so to iterate from the last index and on through until the 0 index?", "content": "I would like my anonymous function inside my reduce call to be able to operate on the list of input in reverse order. In javascript there is a function called .reduceRight() https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight What is the equivalent in clojure? ", "abstract": ""}, "answers": [{"id": 58702209, "score": 2, "vote": 0, "content": "You want to iterate from the last index and on through until the 0 index. This suggests you are dealing with something like a vector. If so, you can apply the rseq function to it, which yields, in constant time, a reversed sequence of its argument.  Clojure's vectors have java class PersistentVector. This implements an interface called Reversible. This is what the rseq function looks for. ", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/49627796/how-to-iterate-loop-in-reverse-order-in-scala", "keywords": [], "tags": ["scala"], "question": {"id": 49627796, "title": "How to iterate loop in reverse order in Scala", "content": "I want result as 20 19 18 .. and so on but it prints nothing,", "abstract": ""}, "answers": [{"id": 49627909, "score": 4, "vote": 0, "content": "The default step of range functions in Scala is 1, the numbers ate iterated in increasing order. If i is less than 20, the sequence of numbers will be empty. If you want to iterate in decreasing order, you have to specify the iteration step manually using by method:", "abstract": ""}]}]