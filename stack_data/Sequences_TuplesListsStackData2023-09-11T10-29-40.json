[{"link": "https://stackoverflow.com/questions/36268749/how-to-remove-multiple-items-from-a-list-in-just-one-statement", "keywords": [], "tags": ["python", "list", "list-comprehension"], "question": {"id": 36268749, "title": "How to remove multiple items from a list in just one statement?", "content": "In python, I know how to remove items from a list: The above code removes the values 5 and 'item' from item_list.\nBut when there is a lot of stuff to remove, I have to write many lines of: If I know the index of what I am removing, I use: where x is the index of the item I want to remove. If I know the index of all of the numbers that I want to remove, I'll use some sort of loop to del the items at the indices. But what if I don't know the indices of the items I want to remove? I tried item_list.remove('item', 'foo'), but I got an error saying that remove only takes one argument. Is there a way to remove multiple items from a list in a single statement? P.S. I've used del and remove. Can someone explain the difference between these two, or are they the same?", "abstract": ""}, "answers": [{"id": 36268815, "score": 266, "vote": 0, "content": "In Python, creating a new object e.g. with a list comprehension is often better than modifying an existing one: ... which is equivalent to: In case of a big list of filtered out values (here, ('item', 5) is a small set of elements), using a set is faster as the in operation is O(1) time complexity on average. It's also a good idea to build the iterable you're removing first, so that you're not creating it on every iteration of the list comprehension: A bloom filter is also a good solution if memory is not cheap.", "abstract": ""}, {"id": 75317342, "score": 0, "vote": 0, "content": "You can combine the numpy array and set function to end up with a new array that only shows the elements you want to keep. which gives you this output:\narray([  5,  78, 423,  45,   4])", "abstract": ""}, {"id": 74405920, "score": 0, "vote": 0, "content": "we can remove multiple elements list1=[1,2,3,4,5,200,30] del list1[1:3] print(list1) [1,4,5,200,30]", "abstract": ""}, {"id": 72194226, "score": 0, "vote": 0, "content": "Suppose we have my_list  as below. We would like to remove the duplicated 0's from our list. By using remove(), only one 0 can be removed, whereas the next code can remove all the duplicated 0's at once:", "abstract": ""}, {"id": 36269020, "score": 0, "vote": 0, "content": "But what if I don't know the indices of the items I want to remove? I do not exactly understand why you do not like .remove but to get the first index corresponding to a value use .index(value): then remove the corresponding value: .index(value) gets the first occurrence of value, and .remove(value) removes the first occurrence of value. You are welcome.", "abstract": ""}, {"id": 42243963, "score": 50, "vote": 0, "content": "You can do it in one line by converting your lists to sets and using set.difference: Would give you the following output: Note: this will remove duplicates in your input list and the elements in the output can be in any order (because sets don't preserve order). It also requires all elements in both of your lists to be hashable.", "abstract": ""}, {"id": 61587495, "score": 1, "vote": 0, "content": "You Can use this -  Suppose we have a list, l = [1,2,3,4,5] We want to delete last two items in a single statement We have output: l = [1,2,3]  Keep it Simple", "abstract": ""}, {"id": 60353808, "score": 2, "vote": 0, "content": "You can use filterfalse function from itertools module Example Output:", "abstract": ""}, {"id": 54780071, "score": 0, "vote": 0, "content": "I don't know why everyone forgot to mention the amazing capability of sets in python. You can simply cast your list into a set and then remove whatever you want to remove in a simple expression like so:", "abstract": ""}, {"id": 48068713, "score": 2, "vote": 0, "content": "I'm reposting my answer from here because I saw it also fits in here.\nIt allows removing multiple values or removing only duplicates of these values \nand returns either a new list or modifies the given list in place. Docstring extension: You should be clear about what you really want to do, modify an existing list, or make a new list with\nthe specific items missing. It's important to make that distinction in case you have a second reference pointing\nto the existing list. If you have, for example... This may or may not be the behaviour you want.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/68764920/more-succinct-way-to-remove-multiple-elements-from-a-list", "keywords": [], "tags": ["python", "string", "list", "split", "strip"], "question": {"id": 68764920, "title": "More succinct way to remove multiple elements from a list?", "content": "I am trying to slice and strip a string. I have written the following code: It is working fine but the issue is I have to remove each word separately. Is there a way to do it in fewer lines?\nThe output I am looking for is: EDIT 1 - How do I get this output -", "abstract": ""}, "answers": [{"id": 68765051, "score": 0, "vote": 0, "content": "Its not clear from the question what is variable in the strings, but it seems like this regular expression would do. The goal is to match everything that is static with some wildcards and  parenthesized capture groups for the data you want in the result. Since you want two pieces of data in the order they are found in the string, you can create two capture groups and extend the result list. Result", "abstract": ""}, {"id": 68765010, "score": 0, "vote": 0, "content": "I am not sure if this is what you have in mind, but usually regular expressions are useful for extracting patterns from strings. For example: Edit: Here is a modification of the regex pattern reflecting the additonal  string samples provided by OP in a comment below: This gives: Edit 2: Version capturing _table patterns: It gives:", "abstract": ""}, {"id": 68765083, "score": 0, "vote": 0, "content": "As I previously suggested, I think it can be done much easier with a simple split(). The strings always follow the same pattern. All you need to do is split at whitespace and take out the second and fourth element from the resulting lists. Result:", "abstract": ""}, {"id": 68765104, "score": 0, "vote": 0, "content": "You can write a pattern that matches the strings and match for example either previous or current using (?:previous|current) , and capture the last part of the first line in group 1. First check if there is a match, and if there is set the new value to the group 1 value. If there is no match, leave the value unmodified. See the capture group value in green in this regex demo. Output", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/54731142/remove-multiple-elements-with-multiple-indexes-from-arraylist-in-java", "keywords": [], "tags": ["java", "arrays", "string", "arraylist"], "question": {"id": 54731142, "title": "Remove multiple elements with multiple indexes from arraylist in java", "content": "I have two List2. I stores items in one list and in 2nd list I am storing int numbers which I consider as indexes.  I want remove items from items list with all indexes.", "abstract": ""}, "answers": [{"id": 66216310, "score": 0, "vote": 0, "content": "For anyone that was stuck and landed on this page, but your indices were not a List of indices, but an array of indices. This page was helpful but I tweaked the answers a little bit, and it worked. The code below Note: ItemIndices represents the indices of the positions in the list, you want to remove. uriCache is not necessary, i used it in my code to store a list of the removed items (which were URIs, by the way). mediaUris is the list you would like to remove those items with indices specified by the array itemIndices", "abstract": ""}, {"id": 54733512, "score": 0, "vote": 0, "content": "Here You go. Remove from arrays starts of biggest index :)", "abstract": ""}, {"id": 54732158, "score": 0, "vote": 0, "content": "Solution using java stream API,", "abstract": ""}, {"id": 54731797, "score": 3, "vote": 0, "content": "You should add in the end: Done.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/65902284/how-to-remove-multiple-items-in-an-array-of-objects-in-react", "keywords": [], "tags": ["javascript", "reactjs"], "question": {"id": 65902284, "title": "How to remove multiple items in an array of objects in React?", "content": "I have a React app with an array of Objects. I use a method to first, get a list of object ids and then remove the elements in the array by comparing them to the ids list. The problem is, the function produces the wrong output. This is the function The above method produces wrong output as I tried the ES6 filter method as follows But this produces the same original array without filtering anything. How can I remove the selected objects from the array?", "abstract": ""}, "answers": [{"id": 65902361, "score": 1, "vote": 0, "content": "You have to assign the filter result array to your variable. Also in order to filter(remove), you have to return false from your method :", "abstract": ""}, {"id": 65902348, "score": 1, "vote": 0, "content": "Method .filter of Array doesn't mutate the array, it create a new array with filtered value. Just assign result of filter to questionssData.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/63439887/how-to-simultaneously-delete-multiple-values-from-a-list-in-python-based-on-thei", "keywords": [], "tags": ["python", "list", "element"], "question": {"id": 63439887, "title": "How to simultaneously delete multiple values from a list in Python based on their index?", "content": "How to delete all the elements from a list that have their corresponding index in another list? So the final list should look like this: I tried this, but as the length of the list is modified because of the deletion, it destroys the proper removing: And I got an error. How can I make this work?", "abstract": ""}, "answers": [{"id": 63441460, "score": 1, "vote": 0, "content": "Assuming index_list contents are valid for as actual size, you won't have a problem if you delete from the end of the list to the start: To make it into a more capable one-line which strips out duplicates in the removal list and returns what was removed: output: output: a=[1, 13, 15, 22, 70] You could even add a bit of filtering to take out indices in the removal list that are not in the bounds of as length.", "abstract": ""}, {"id": 63440107, "score": 1, "vote": 0, "content": "If returning a new object with the same data is ok, use a list comprehension: Sometimes however, you may want to modify the original object in-place. In that case you could do something like this:", "abstract": ""}, {"id": 63439922, "score": 2, "vote": 0, "content": "from: Deleting multiple elements from a list, or less pythonic:", "abstract": ""}, {"id": 63439931, "score": 2, "vote": 0, "content": "try this", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/11303225/how-to-remove-multiple-indexes-from-a-list-at-the-same-time", "keywords": [], "tags": ["python", "list"], "question": {"id": 11303225, "title": "How to remove multiple indexes from a list at the same time?", "content": "Say I have this list here: How would I delete say indexes 2, 3, 4, and 5 at the same time? pop doesn't accept multiple values. How else do I do this?", "abstract": ""}, "answers": [{"id": 41079803, "score": 39, "vote": 0, "content": "There wasn't much hint on performance for the different ways so I performed a test on removing 5000 items from 50000 in all 3 generally different approaches, and for me numpy was the winner (if you have elements that fit in numpy): Here's the code I timed (in the third function conversion from/to list may be removed if working directly on numpy arrays is ok):", "abstract": ""}, {"id": 44871744, "score": 2, "vote": 0, "content": "another option (in place, any combination of indices):", "abstract": ""}, {"id": 41097792, "score": 6, "vote": 0, "content": "This is a single step operation. It  does not use a loop and therefore executes fast. It uses list slicing.", "abstract": ""}, {"id": 38254102, "score": 1, "vote": 0, "content": "Old question, but I have an answer. First, peruse the elements of the list like so: Then, call this function with a list of the indexes of elements you want to pop.  It's robust enough that the order of the list doesn't matter. As a bonus, result should only contain elements you wanted to remove. In [73]: mylist = ['a','b','c','d','charles'] In [76]: for x in range(len(mylist)): ....: 0: a 1: b 2: c 3: d 4: charles ... In [77]: multipop(mylist, [0, 2, 4]) Out[77]: ['charles', 'c', 'a'] ... In [78]: mylist Out[78]: ['b', 'd']", "abstract": ""}, {"id": 11307993, "score": 18, "vote": 0, "content": "If you can use numpy, then you can delete multiple indices: and if you use np.r_ you can combine slices with individual indices: However, the deletion is not in place, so you have to assign to it.", "abstract": ""}, {"id": 11303237, "score": 17, "vote": 0, "content": "If they're contiguous, you can just do  If you want to remove noncontiguous indexes, it's a little trickier.", "abstract": ""}, {"id": 11303241, "score": 78, "vote": 0, "content": "Example:", "abstract": ""}, {"id": 11303234, "score": 399, "vote": 0, "content": "You need to do this in a loop, there is no built-in operation to remove a number of indexes at once. Your example is actually a contiguous sequence of indexes, so you can do this: which removes the slice starting at 2 and ending just before 6. It isn't clear from your question whether in general you need to remove an arbitrary collection of indexes, or if it will always be a contiguous sequence. If you have an arbitrary collection of indexes, then: Note that you need to delete them in reverse order so that you don't throw off the subsequent indexes.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/62280961/how-to-remove-multiple-elements-from-a-list-of-lists", "keywords": [], "tags": ["python", "python-3.x", "list", "dlib"], "question": {"id": 62280961, "title": "How to remove multiple elements from a list of lists?", "content": "I have list of list elements. In my case, I am using dlib tracker. Appending all detected tracker to a list. I am trying to remove some of the tracker from the list. To make it simple, I have a list like below, I want to remove list item whenever I found 4 in the list.  For that I used below snippet to find the index to remove elements. So far good. I have index of elements to be deleted. I am stuck at how to delete multiple indexes in list of list?  Expected output:", "abstract": ""}, "answers": [{"id": 62281377, "score": 1, "vote": 0, "content": "This task might be done using list comprehension (as already shown) or using filter: To use filter you need function - in this case I used lambda to make nameless function, though normal function might be used too. filter return iterable so I used list on it to get list.", "abstract": ""}, {"id": 62281224, "score": 1, "vote": 0, "content": "You can do it simply with one line using list comprehension: Output: ", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/56505239/how-to-remove-multiple-items-from-nested-list-in-python-3", "keywords": [], "tags": ["python", "list"], "question": {"id": 56505239, "title": "How to remove multiple items from nested list in python 3?", "content": "How to remove multiple items from nested list in python 3, without using a list comprehension? And at times Indexerror came how to handle that? Output Comes like this: Expected Output:", "abstract": ""}, "answers": [{"id": 56505772, "score": 0, "vote": 0, "content": "[[x for x in z if x!='SUB'] for z in split_list] keep in mind that it is a nested list. Treat x as the sub element and z as the element. Also keep in mind that the above code will delete all 'SUB'. just for deleting the first instance use remove.", "abstract": ""}, {"id": 56505280, "score": 2, "vote": 0, "content": "You can use always use a list-comprehension. Get all the words to be removed in a separate list and try this : If you want to do it without list comprehension, you need to declare a vacant list to append each new sub-list and also a new vacant sub-list to append all new sub-items. Check this : It outputs the same :", "abstract": ""}, {"id": 56505288, "score": 0, "vote": 0, "content": "You could simply use map and filter", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/53094253/delete-multiple-elements-from-a-list", "keywords": [], "tags": ["elixir"], "question": {"id": 53094253, "title": "Delete multiple elements from a list", "content": "Given this list: how can I return a new list that has these elements? I know I use List.delete/2 but as for as I can tell that will only delete 1 element at a time. I want to remove the first two elements in one fell swoop.", "abstract": ""}, "answers": [{"id": 55267975, "score": 1, "vote": 0, "content": "Another approach, which could be dynamic based on your implementation is Enum.filter/2 It would look something like this:", "abstract": ""}, {"id": 53132942, "score": 2, "vote": 0, "content": "If you want to remove elements based on some arbitrary condition, you can use Enum.reject/2, and provide the reject condition as an argument.", "abstract": ""}, {"id": 53111363, "score": 1, "vote": 0, "content": "To withdraw only first 2 elements: you can pattern match like that: you can also use tl/1 twice: However this last solution does not do it in one fell swoop. If the number of elements to drop varies, I do not see another solution that the one @Dogbert suggested: to use Enum.drop/2, or also Enum.split/2 like that:", "abstract": ""}, {"id": 53094563, "score": 5, "vote": 0, "content": "I think you are looking for this You can use List.delete/2 only can delete one at time and Enum.drop/2 can delete multiple depend how you use it. ", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/53513347/how-to-remove-multiple-objects-in-list-by-id", "keywords": [], "tags": ["c#", "list", "object", "remove-if"], "question": {"id": 53513347, "title": "How to remove multiple objects in List by id?", "content": "I have a class as below I have an array of ids I need to remove: Is there any method to remove the myObj in myObjArray where the id is in the idToBeRemove string?", "abstract": ""}, "answers": [{"id": 53513476, "score": 9, "vote": 0, "content": "List<T> has a method RemoveAll which will accomplish what you need. Unlike doing something like Where(...).ToList(), it will modify the existing list in place rather than create a new one.  Note that as your array of items to remove grows, you'll want to move to something more performant, such as a HashSet<T>, though with your current count of 2, it is not a pressing need. @Richardissimo also offers a good suggestion in the comments to your question for when the main list itself grows, a Dictionary<K, V> could be useful. Again, not an immediate need with a small list, but something to keep in mind as it grows and if performance is an issue. ", "abstract": ""}, {"id": 53513566, "score": 0, "vote": 0, "content": "Use this to remove id:", "abstract": ""}, {"id": 53513414, "score": 2, "vote": 0, "content": "To remove from existing List you can use List.RemoveAll(Predicate): To get result in new collection you can use Enumerable.Where and Enumerable.Contains:", "abstract": ""}, {"id": 53513436, "score": 0, "vote": 0, "content": "", "abstract": ""}]}]