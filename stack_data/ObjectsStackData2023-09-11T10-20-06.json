[{"link": "https://stackoverflow.com/questions/44231619/how-kotlin-delegation-is-useful", "keywords": [], "tags": ["kotlin"], "question": {"id": 44231619, "title": "How kotlin delegation is useful?", "content": "I'm really confused about the kotlin delegation. Let me describe the regular polymorphism approach here which looks same like the kotlin delgation. I can pass any implemented class of Base interface to b variable to call the method of specified class's object. Then what is the benefit of kotlin's delegation? Which is described here. I know this is the simple scenario where the both codes are working fine. There should be a benefit of delegation that's why kotlin introduced it. What is the difference? and how kotlin delegation can be useful? Please give me a working example to compare with polymorphism approach.", "abstract": ""}, "answers": [{"id": 76246956, "score": 0, "vote": 0, "content": "In Kotlin, delegates are special objects that allow one object to delegate certain operations or properties to another object. In other words, they allow one object to pass on the responsibility of performing certain tasks to another object. Here's an example to better understand how delegates work in Kotlin: In this example, we have an interface called Printer, which defines a print method, and a class called ConsolePrinter that implements this interface and prints the message to the console. Then we have a class called MessageProcessor, which also implements the Printer interface using the delegate by printer. This means that all calls to the print method on the MessageProcessor object will be delegated to the printer object that was passed in the constructor. In the main function, we create an instance of ConsolePrinter, and then create an instance of MessageProcessor, passing the ConsolePrinter as an argument to the constructor. We then call the processMessage method on the MessageProcessor object, which in turn calls the print method. This call to the print method will be delegated to the ConsolePrinter object, and we will see the message \"Processing message: Hello, World!\" printed to the console. Thus, delegates allow us to split the responsibility between different objects and reuse functionality implemented in other objects.", "abstract": ""}, {"id": 62953919, "score": 1, "vote": 0, "content": "Following is the example :-  Now, the custom mode can reuse display() function of both modes DarkMode & LightMode Kotlin natively support delegation pattern.\nKotlin provides by keyword to specify the delegate object which our custom mode will be delegating to.\nWe can achieve the same result of the code above using by keyword.", "abstract": ""}, {"id": 44238951, "score": 9, "vote": 0, "content": "Also remember that you're not restricted to just one delegate. Kotlin's way of implementing delegation is similar to traits implementation in languages like Groovy. You can compose different functionality via delegates. Kotlin's way can also be considered more powerful because you can \"plug in\" different implementations too. Output: You can't do this with inheritance.", "abstract": ""}, {"id": 44232126, "score": 6, "vote": 0, "content": "It is extremely useful for creating decorators and for object composition.\nJoshua Bloch in Effective Java, 2nd Edition, Item 16 'Favor Composition Over Inheritance' shows a good example: inheritance is easy-to-break, and decorators are not. Inheritance: Delegation:", "abstract": ""}, {"id": 44231716, "score": 4, "vote": 0, "content": "It is useful because of the Delegation Pattern where most of the behavior can be the same as the target of the delegation (b) but you just want to override a subset of methods to act differently. An example would be an InputStream implementation which delegates all work to another InputStream but overrides the close() method to not close the underlying stream. This could be implemented as:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/56040048/what-is-the-difference-between-set-assignee-and-delegate-task-in-camunda", "keywords": [], "tags": ["java", "bpmn", "camunda"], "question": {"id": 56040048, "title": "What is the difference between &quot;set assignee&quot; and &quot;delegate task&quot; in Camunda?", "content": "In Camunda REST API there are two calls If I understand correctly, both of them assign a task to a specific user. What is the difference between these two calls?", "abstract": ""}, "answers": [{"id": 56061438, "score": 6, "vote": 0, "content": "A task in your process reamains active until it is completed or canceled. To control which user(s) should work on this task, you use the candidate user/group property, it allows you to filter on potential tasks in your tasklist. The \"assignee\" is a special property that marks a task as \"being worked on by a specific user\". Its very common to do so when you start working on a task from your tasklist, so colleagues will not start working on the same task. Delegate a task means that you as a task worker decide that someone else should do some (partial) work on this task, but give it back to you when he is done. It remains your responsibility to complete it after it is handed back to you. TLDR: Neither setAssignee nor delegate are required for the tasks lifecycle (you always can complete) but they are useful lifecycle extensions to organize your workflow. Setting an assignee is a very common way of blocking a task for others, delegation is (at least in my projects) very rarely used way of further workload distribution.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/2044301/what-is-delegate", "keywords": [], "tags": ["oop", "delegates"], "question": {"id": 2044301, "title": "What is Delegate?", "content": "I am confused that what is the actual role of a delegate?  I have been asked this question many times in my interviews, but I don't think that interviewers were satisfied with my answer. Can anyone tell me the best definition, in one sentence, with a practical example?", "abstract": ""}, "answers": [{"id": 2044316, "score": 190, "vote": 0, "content": "I like to think of a delegate as \"a pointer to a function\".  This goes back to C days, but the idea still holds.   The idea is that you need to be able to invoke a piece of code, but that piece of code you're going to invoke isn't known until runtime.  So you use a \"delegate\" for that purpose. Delegates come in handy for things like event handlers, and such, where you do different things based on different events, for example. Here's a reference for C# you can look at: In C#, for example, let's say we had a calculation we wanted to do and we wanted to use a different calculation method which we don't know until runtime.  So we might have a couple calculation methods like this: We could declare a delegate signature like this: And then we could declare a method which takes the delegate as a parameter like this: And we could call the CalcMyTotal method passing in the delegate method we wanted to use.", "abstract": ""}, {"id": 12908139, "score": 2, "vote": 0, "content": "Here I am going to explain delegates, multicast delegates and their usage..\nDelegate is a type which  holds the method(s) reference in an object. It is also referred to as a type safe function pointer. We can say a delegate is a type that defines a method signature. When you instantiate a delegate, you can associate its instance with any method with a compatible signature. You can invoke (or call) the method through the delegate instance. \nDelegates are used to pass methods as arguments to other methods.\nEvent handlers are nothing more than methods that are invoked through delegates.\nAdvantages of using delegates are,\n    Encapsulating the method's call from caller\n    Effective use of delegate improves the performance of application\n    Used to call a method asynchronously.\nThere are some properties of delegates are public delegate type_of_delegate delegate_name() // Declaration The following example shows a delegate operation: What is Multicast Delegate? It is a delegate which holds the reference of more than one method. Multicast delegates must contain only methods that return void, else there is a run-time exception.  Here Delegate is added using the += operator and removed using the -= operator. Delegate types are derived from the Delegate class in the .NET Framework. Delegate types are sealed\u2014they cannot be derived.\nBecause the instantiated delegate is an object, it can be passed as a parameter, or assigned to a property. This allows a method to accept a delegate as a parameter, and call the delegate at some later time. This is known as an asynchronous callback.", "abstract": ""}, {"id": 15109107, "score": 1, "vote": 0, "content": "Delegates is mainly used with events.  The need is: You do not want to execute a piece of code at the time when you run the program.\nAfter running the program you want to execute that piece of code whenever an event occurs. Example :  This is what they say, you do not know which method will invoke at compiling time. you know it only at runtime that is when clicking the button. Without delegates no user interface programming is possible. Because you are executing code whenever the user makes events that is clicking button , typing in textbox, selecting dropdownlist item and so on....", "abstract": ""}, {"id": 18383686, "score": 1, "vote": 0, "content": "A delegate is an object that represents a pointer to a function. However, it is not an ordinary function pointer in that it: 1) Is Object Oriented 2) Is type safe, i.e. it can only point to a method and you cannot read the raw memory address it is pointing to 3) Is strongly typed. It can only point to methods that match its signatures. 4) Can point to more than one method at the same time.", "abstract": ""}, {"id": 15715723, "score": 1, "vote": 0, "content": "A delegate object\nis an object that another object consults when something happens in that object. For\ninstance, your repair man is your delegate if something happens to your car. you go to your repair man and ask him to fix the car for you  (although some prefer to repair the car themselves, in which case, they are their own delegate for their car).", "abstract": ""}, {"id": 12757268, "score": 4, "vote": 0, "content": "A delegate is an object that can refer to a method. Thus, when we create a delegate, we are creating an object that can hold a reference to a method. Furthermore, the method can be called through this reference. Thus, a delegate can invoke the method to which it refers.\nThe principal advantage of a delegate is that it allows us to specify a call to a method, but the method actually invoked is determined at runtime, not at compile time. Simple Delegate http://knowpacific.wordpress.com/2012/01/26/delegate/", "abstract": ""}, {"id": 10944566, "score": 0, "vote": 0, "content": "A delegate is something to which a task is being delegated.  The primary purpose of delegation is to decouple code and allow for greater flexibility and reuse. In programming, and specifically object-oriented programming, this means that when a method is called to do some work, it passes the work on to the method of another object that it has a reference to.  The reference could point to whatever object we wish, as long as the object conforms to a predefined set of methods.  We call it \"programming to an interface\" (versus programming to a concrete class implementation).  An interface is basically a generic template and has no implementation; it simply means a recipe, a set of methods, preconditions and postconditions (rules). Simple example: Now you see I can use whatever implementation I want at any time without changing the code in SomeCaller because the type that doIt() is passed is not concrete but rather abstract since it's an interface.  In the Java world, this is often expressed in the service paradigm where you call out to a service (an object advertising itself as a service via a specific interface) and the service then calls out to delegates to help it do its work.  The service's methods are named as coarse-grained tasks (makePayment(), createNewUser(), etc.), while internally it does lots if nitty-gritty work through delegation, with the delegates' types being interfaces instead of the concrete implementations. (N.B.: How an implementation gets assigned is beyond the scope of this thread.  Lookup inversion of control and dependency injection.)", "abstract": ""}, {"id": 7147880, "score": 1, "vote": 0, "content": "In Event communication sender does not know which object will handle the event.\nDelegate is type which hold the reference of method.\nDelegate has signature and holds reference to method which matches its signature\nso Delegate is like type safe function pointer. button1.Click += new System.EventHandler(button1_Click)\nSystem.EventHandler is declared as a delegate here\nIn .net Events work on the concept of Delegate (like Button Click) Delegate is used when you do not know which code to invoke at run time\nSo at that time Delegate is used to handle Events http://msdn.microsoft.com/en-us/library/ms173171(v=vs.80).aspx", "abstract": ""}, {"id": 2045487, "score": 1, "vote": 0, "content": "A great explanation and practical implementation of the Delegate pattern can be found in the Google Collections Forwarding Classes (also, the Decorator pattern).", "abstract": ""}, {"id": 2044382, "score": -2, "vote": 0, "content": "While not really a \"function pointer\", a delegate might look like this is a dynamic language like PHP: or in JavaScript you could do something like:", "abstract": ""}, {"id": 2044373, "score": 19, "vote": 0, "content": "Taken from here Q What are delegates?\nA When an object receives a request, the object can either handle the request itself or pass the request on to a second object to do the work. If the object decides to pass the request on, you say that the object has forwarded responsibility for handling the request to the second object.  Or, as an easy pseudo example: something sends a request to object1. object1 then forwards the request and itself to object2 -- the delegate. object2 processes the request and does some work. (note: link above gives good examples)", "abstract": ""}, {"id": 2044357, "score": 4, "vote": 0, "content": "Think about delegate as about a simplified implementation of Command pattern.", "abstract": ""}, {"id": 2044328, "score": 21, "vote": 0, "content": "a delegate is simply a function pointer.\nsimply put you assign the method you wish to run your delegate.\nthen later in code you can call that method via Invoke. some code to demonstrate (wrote this from memory so syntax may be off)", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/4701418/what-is-delegation-when-would-i-want-to-use-it", "keywords": [], "tags": ["oop", "design-patterns", "delegation"], "question": {"id": 4701418, "title": "What is delegation? When would I want to use it?", "content": "In OOP, a term delegation is mentioned. How is this modelled in a class? I searched on yahoo etc but got links to delegates.", "abstract": ""}, "answers": [{"id": 52729914, "score": 0, "vote": 0, "content": "Delegation is like inheritance except instead of class2 having copied functions and variables from class1 class2 just gets class1 to do that stuff for it and class2 focuses on doing and having the extra functions and variables you give it. One obvious advantage of this is it saves space on your computer.", "abstract": ""}, {"id": 4701431, "score": 26, "vote": 0, "content": "Imagine you have the classes Car and Engine: In this example the Car delegates to the underlying Engine. The user of the car cannot directly start the engine (unless he is a mechanic). But he can tell the car to start, and the car in turn tells the engine to start. You'd want to use it whenever you use object composition and you need to use a method of one of the composing objects. In that case you create a method that delegates to it.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/832536/when-to-use-delegation-instead-of-inheritance", "keywords": [], "tags": ["oop", "inheritance", "delegation"], "question": {"id": 832536, "title": "When to use delegation instead of inheritance?", "content": "Could someone please explain when would I want to use delegation instead of inheritance?", "abstract": ""}, "answers": [{"id": 52200487, "score": 1, "vote": 0, "content": "I agree with @Anzurio. Just to explain it in simple words:  Use inheritance only when you feel like the new class is a natural extension of the existing class. Prefer to use composition/delegation for all other purposes like using a specific method, etc.", "abstract": ""}, {"id": 33326567, "score": 1, "vote": 0, "content": "In my opinion, delegation can be called when it's time to use and inheritance is embedded ever. Take the in_threads gem for example, it use InThreads delegator to implement the threads for any Ruby Enumerable module. With this, only call in_threads methods on a array, it will run in threads.", "abstract": ""}, {"id": 832674, "score": 4, "vote": 0, "content": "Assume your class is called B and the derived/delegated to class is called A then Here are some examples when inheritance or delegation are being used:\nIf", "abstract": ""}, {"id": 832563, "score": 4, "vote": 0, "content": "You may use delegation to multiple internal class instances to simplify their functionality into a common grouping.  If your language doesn't implement multiple inheritance for instance you may inherit from one of the bases and wrap the other, delegating the functionality you want to expose to the underlying implementation.  Inheritance also ties your class into the hierarchy of classes you are inheriting from where as with delegation you may keep your place in your own hierarchy and delegate calls to another.", "abstract": ""}, {"id": 832546, "score": 32, "vote": 0, "content": "They have nothing to do with each other.  Delegation is a behavior.  Inheritance is a model technique. Inheritance is for modeling \"is-a\".  A computer \"is-a\" electronic system. Delegation is how methods provide results.  Sometimes one object will delegate work to another object.  Delegation can be via any relationship -- you can delegate to a superclass, to a member of a composite or aggregate, or any relationship.", "abstract": ""}, {"id": 832543, "score": 73, "vote": 0, "content": "When you want to \"copy\"/Expose the base class' API, you use inheritance.\nWhen you only want to \"copy\" functionality, use delegation. One example of this:\nYou want to create a Stack out of a List. Stack only has pop, push and peek. You shouldn't use inheritance given that you don't want push_back, push_front, removeAt, et al.-kind of functionality in a Stack.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/2534094/what-is-a-delegate-in-objective-cs-iphone-development", "keywords": [], "tags": ["ios", "iphone", "objective-c", "delegates", "uiapplicationdelegate"], "question": {"id": 2534094, "title": "What is a &quot;delegate&quot; in Objective C&#39;s iPhone development?", "content": "What is a \"delegate\" in Objective C's iPhone development?", "abstract": ""}, "answers": [{"id": 2534126, "score": 56, "vote": 0, "content": "See this discussion A delegate allows one object to send messages to another object when an event happens. For example, if you're downloading data from a web site asynchronously using the NSURLConnection class. NSURLConnection has three common delegates: One or more of these delegates will get called when NSURLConnection encounters a failure, finishes successfully, or received a response from the web site, respectively.", "abstract": ""}, {"id": 2534583, "score": 80, "vote": 0, "content": "A delegate is a pointer to an object with a set of methods the delegate-holder knows how to call.  In other words, it's a mechanism to enable specific callbacks from a later-created object. A good example is UIAlertView.  You create a UIAlertView object to show a short message box to users, possibly giving them a choice with two buttons like \"OK\" and \"Cancel\".  The UIAlertView needs a way to call you back, but it has no information of which object to call back and what method to call. To solve this problem, you can send your self pointer to UIAlertView as a delegate object, and in exchange you agree (by declaring the UIAlertViewDelegate in your object's header file) to implement some methods that UIAlertView can call, such as alertView:clickedButtonAtIndex:. Check out this post for a quick high-level intro to the delegate design pattern and other callback techniques. References:", "abstract": ""}, {"id": 15112148, "score": 3, "vote": 0, "content": "Please! check below simple step by step tutorial to understand how Delegates works in iOS. Delegate in iOS I have created two ViewControllers (for sending data from one to another) Here is the sample code may help you. AppDelegate.h AppDelegate.m FirstViewController.h FirstViewController.m SecondViewController.h SecondViewController.m", "abstract": ""}, {"id": 18141171, "score": 3, "vote": 0, "content": "I try to elaborate it through simple program Two Classes Student.h Student.m Teacher.h Teacher.m main.m EXPLANATION :::  From main method when initWithStudent:student will execute  1.1 Teacher's object's property 'student' will be assigned with student object. 1.2  self.student.delegate = self From main method when [student studentInfo] will be called 2.1  [self.delegate respondToSelector:@selector(teacherName)]\n         Here delegate already points to teacher object so it can invoke\n         'teacherName' instance method. 2.2  so [self.delegate performSelector:@selector(teacherName)]\n         will execute easily. It looks like Teacher object assign delegate to student object to call it's own method. It is a relative idea, where we see that student object called 'teacherName' method but it is basically done by teacher object itself. ", "abstract": ""}, {"id": 17214978, "score": 3, "vote": 0, "content": "I think all these answers make a lot of sense once you understand delegates. Personally I came from the land of C/C++ and before that procedural languages like Fortran etc so here is my 2 min take on finding similar analogues in C++ paradigm. If I were to explain delegates to a C++/Java programmer I would say What are delegates ? These are static pointers to classes within another class. Once you assign a pointer, you can call functions/methods in that class. Hence some functions of your class are \"delegated\" (In C++ world - pointer to by a class object pointer) to another class. What are protocols ? Conceptually it serves as similar purpose as to the header file of the class you are assigning as a delegate class. A protocol is a explicit way of defining what methods needs to be implemented in the class who's pointer was set as a delegate within a class. How can I do something similar in C++? If you tried to do this in C++, you would by defining pointers to classes (objects) in the class definition and then wiring them up to other classes that will provide additional functions as delegates to your base class. But this wiring needs to be maitained within the code and will be clumsy and error prone. Objective C just assumes that programmers are not best at maintaining this decipline and provides compiler restrictions to enforce a clean implementation.", "abstract": ""}, {"id": 13541487, "score": 0, "vote": 0, "content": "Delegate is nothing but instance of Object which we can call methods behalf of that Objects. and also helps to create methods in rumtime of that Objects.", "abstract": ""}, {"id": 11538105, "score": 1, "vote": 0, "content": "A delegate captures the taping actions of an user and performs particular Action according to the user Taping Action.", "abstract": ""}, {"id": 9516917, "score": 1, "vote": 0, "content": "The delegate fires the automatic events in Objects C. If you set the delegate to Object, it sends the message to another object through the delegate methods.  It's a way to modify the behavior of a class without requiring subclassing. Each Objects having the delegate methods.These delegate methods fires, when the particular Objects take part in user interaction and Program flow cycle. Simply stated: delegation is a way of allowing objects to interact with each other without creating strong interdependencies between them.", "abstract": ""}, {"id": 2534108, "score": 5, "vote": 0, "content": "I think this Wikipedia article describes it best: http://en.wikipedia.org/wiki/Delegation_pattern It is \"just\" an implementation of a design pattern and very common in Objective-C", "abstract": ""}, {"id": 2534102, "score": 21, "vote": 0, "content": "Delegates are a design pattern; there is no special syntax or language support. A delegate is just an object that another object sends messages to when certain things happen, so that the delegate can handle app-specific details the original object wasn't designed for. It's a way of customizing behavior without subclassing. ", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/1224830/difference-between-strategy-pattern-and-delegation-pattern", "keywords": [], "tags": ["design-patterns", "delegation", "strategy-pattern"], "question": {"id": 1224830, "title": "Difference between Strategy pattern and Delegation pattern", "content": "What is the difference between Strategy pattern and Delegation pattern (not delegates)?", "abstract": ""}, "answers": [{"id": 44268845, "score": 1, "vote": 0, "content": "if you meant strategy pattern vs delegates, as in functions/lambdas passed as arguments,\nthen at least I know there is less overhead in terms of classes that need to be compiled for delegates. I actually found this page looking for someone to give me their thoughts on the benefits of still using the design pattern route given that both java 8 and C# now support passing functions as arguments", "abstract": ""}, {"id": 5095370, "score": 2, "vote": 0, "content": "Here's a thought: Delegates mimic the delegating class (at least as I've used them, not sure if that's the canonical way or not but that's how I usually do it).  So basically, if I have a class that has multiple entry points (methods) and I want to change the implementation at runtime, I would create delegates the implement the same interface. If, on the other hand, I had one part of a class that I want to be able to interchange at runtime, I would create Strategy classes with a single method interface (eg. executeCalculation) and make it an aggregate component of the containing class.   So in summary, a strategy encompasses a single behavior, delegates implement a set of behaviors, and you could use delegates to implement strategies.  ", "abstract": ""}, {"id": 1224941, "score": 28, "vote": 0, "content": "the strategy pattern is a very specific design solution to a common software problem.\nthe strategy pattern implies that there will be  delegation is more a principal than a pattern.  delegation implies that instead of having a single object be in charge of everything, it delegates responsibilities to other objects.  the reason this is a common technique is that it enforces two even more fundamental principals of software development by lessening coupling and increasing cohesiveness. Having said all that, don't worry about patterns.  Focus on the principals and if you feel your solution could be improved upon - look to the patterns to see if there is a better mousetrap.  If you focus on patterns instead of principals, you will find yourself getting lost in all the patterns and implementing patterns for the sake of implementing patterns... ", "abstract": ""}, {"id": 1224894, "score": 12, "vote": 0, "content": "\"Delegation\" isn't really a design-pattern, it's more of a general programming technique, where component A delegates the task (whatever kind of task that may be) to component B. Delegation can be used in many contexts.  The Strategy pattern,on the other hand, is a specific pattern which typically makes heavy use of delegation as an implementation detail. For example, you might implement the strategy pattern and invoke it using The strategy pattern involves having various implementations of your Strategy interface, and selecting the appropriate implementation at runtime. The act of invoking that implementation is delegation. So it's not either/or, the concepts are complimentary.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/38194605/what-is-delegate-in-a-rails-form-object-file", "keywords": [], "tags": ["ruby-on-rails", "forms"], "question": {"id": 38194605, "title": "What is `delegate` in a Rails form object file?", "content": "I have a ruby form object, xForm that inherits from Form. There is a section inside the form file called # Delegations I haven't dealt with form objects or delegations before, and wasn't able to find information by searching Google. Can anyone explain what they are used for on a high-level?", "abstract": ""}, "answers": [{"id": 38194700, "score": 3, "vote": 0, "content": "Delegate is used if you want to easily access a value on an associated object In your example, your Form has a user. In order to access email, you could continually type: my_form.user.email or you could use delegation (as in your example) which means you can just type my_form.email and the form figures out where to get the email from. It allows you to reduce typing, but also to hide away implementation-details. http://apidock.com/rails/Module/delegate explains it pretty well if you want more Typically this is used for Form objects so that you can build a flatter params-structure in the view that contains the form. eg if you delegate both :email and :email= then you can name a field :email in the my_form form... and then in the controller you can just use my_form = MyForm.new(params[:my_form]) instead of having to separately instantiate the associated objects and pass the attributes specific to each.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/34979623/explain-how-the-concepts-of-encapsulation-and-delegation", "keywords": [], "tags": ["java"], "question": {"id": 34979623, "title": "Explain how the concepts of encapsulation and delegation", "content": "So, I'm trying to find how they related to each other, but can't seem to find anything. a), relate to each other\nb), how they differ from each other", "abstract": ""}, "answers": [{"id": 34979779, "score": 0, "vote": 0, "content": "Encapsulation is a core principal, it refers to the bundling of data with the methods that operate on that data. Basically, logic and data go together. If you have a class, with properties and logic together \u2013 it is encapsulated. Helps separation of concerns and reduces surface areas \u2013 also supports immutability \u2013 since only the object can control the data. Delegation is when at runtime you can invoke a different object to complete a task dynamically. A useful OO pattern.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/20533602/what-is-delegation-in-ruby", "keywords": [], "tags": ["ruby", "delegation"], "question": {"id": 20533602, "title": "What is delegation in Ruby?", "content": "I came across this in my textbook, but I don't even know what delegation is. I know what inclusion is, but not what delegation is. In the context of Ruby, compare delegation to module inclusion in\n  terms of the notion of class interfaces. With module inclusion, methods defined in modules become part of the\n  interface of classes(and all their subclasses). This is not the case\n  with delegations. Can you explain in layman's terms?", "abstract": ""}, "answers": [{"id": 20535233, "score": 2, "vote": 0, "content": "B delegate the question to A, while BB use module AA to answer question.", "abstract": ""}, {"id": 20534658, "score": 5, "vote": 0, "content": "Delegation is, simply put, is when one object uses another object for a method's invocation. If you have something like this: An instance of the B class will utilize the A class's foo method when its foo method is called. The instance of B delegates the foo method to the A class, in other words.", "abstract": ""}]}]