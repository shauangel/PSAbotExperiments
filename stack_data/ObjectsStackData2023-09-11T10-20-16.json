[{"link": "https://stackoverflow.com/questions/75790825/how-to-organize-testclass-to-show-in-testexplorer-multiple-times-once-per-each", "keywords": [], "tags": ["c#", "mstest"], "question": {"id": 75790825, "title": "How to organize TestClass to show in TestExplorer multiple times, once per each parameter?", "content": "I have MSTest [TestClass] class with 15 test methods [TestMethod]. Test class tests \u201clocal\u201d and \u201cremote\u201d storages. Using Visual Studio22\u2019s TestExplorer I would like to see \u201cLocalStorage\u201d tests and \u201cRemoteStorage\u201d tests separately. Each instance should have two parameters: StorageType and DefaultFolder, that are set up per storage type How can I achieve that?", "abstract": ""}, "answers": [{"id": 75791378, "score": 1, "vote": 0, "content": "I agree with @RatzMouze create two test classes but if you decide to stick with one test class using TestCategory can be done with an enum rather than a string as with a string if the category name changes you need to change them all by search and replace. Using an emum Usage \nSee also Test Traits", "abstract": ""}, {"id": 75790955, "score": 0, "vote": 0, "content": "I first misunderstood the question. This answer deals with grouping multiple methods within the same class. See my other answer for the actual question. You can use the TestCategory attribute. Then in the Test Explorer window, choose \"Group by > Traits\". ", "abstract": ""}, {"id": 75791188, "score": 0, "vote": 0, "content": "Create a base class with the test methods. Don't mark it as TestClass. Then inherit classes marked as TestClass that set properties of the base class in their initialize method that control behaviour. ", "abstract": ""}, {"id": 75791018, "score": 0, "vote": 0, "content": "AFAIK, best practise would be to make 2 TestClasses, one for local and one for remote.\nBy doing this, you automatically get the results seperately.\nYou should never have TestMethods testing more than one thing.\n You should never have TestMethods testing more than one thing.\n", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/73627202/how-do-i-code-a-component-to-show-different-child-elements-attributes-of-base-c", "keywords": [], "tags": ["c#", "design-patterns", "blazor", "abstract-class"], "question": {"id": 73627202, "title": "How Do I Code A Component to Show Different Child Element&#39;s Attributes of Base Class", "content": "I am trying to organize many different request forms into objects. I am a little too novice to understand how to orient the objects but I kind of understand the behavior I want. for example All implements save to the database a record that has a discriminator and a field for the request converted to JSON Everything seemed fine so far in my developing this and I started to wonder how I display the information. I'm working in blazor so I have a component that renders the db model and then another component inside it that loads the deserialized request. I'm not able to then do What patterns should I look at or what am I doing wrong or missing preventing me from displaying the information correctly? Or do I need to make a .razor for every request type instead of something generic enough to handle the different child objects?", "abstract": ""}, "answers": []}, {"link": "https://stackoverflow.com/questions/126898/organizing-the-source-code-base-when-mixing-two-or-more-languages-like-java-and", "keywords": [], "tags": ["codebase", "polyglot"], "question": {"id": 126898, "title": "Organizing the source code base when mixing two or more languages (like Java and C++)", "content": "I ran into a problem a few days ago when I had to introduce C++ files into a Java project. It started with a need to measure the CPU usage of the Java process and it was decided that the way to go was to use JNI to call out to a native library (a shared library on a Unix machine) written in C. The problem was to find an appropriate place to put the C files in the source repository (incidentally Clearcase) which consists of only Java files. I thought of a couple of alternatives: (a) Create a separate directory for putting the C files (specifically, one .h file and one .c file) at the top of the source base like: /vobs/myproduct/javasrc\n/vobs/myproduct/cppsrc I didn't like this because I have only two C files and it seemed very odd to split the source base at the language level like this. Had substantial portions of the project been written more or less equally in C++ and Java, this could be okay. (b) Put the C files into the Java package that uses it. I have the calling Java classes in /vobs/myproduct/com/mycompany/myproduct/util/ and the C files also go in there. I didn't like this either because I think the C files just don't belong in the Java package. Has anybody solved a problem like this before? Generally, what's a good strategy to follow when organizing codebase that mixes two or more languages? Update: I don't have any plan to use any C or C++ in my project, some Jython perhaps, but you never know when my customers need a feature that can be solved only by using C or best solved by using C.", "abstract": ""}, "answers": [{"id": 127130, "score": 0, "vote": 0, "content": "In this case, the files in question are not just a different language, but also run as a separate program that interacts through a defined interface. This means that the source files can be treated as a separate project, and therefore kept elsewhere. The case is different in .NET projects which mix C# and ASP.NET (for example) within one codebase. How do people organise their code in such cases?", "abstract": ""}, {"id": 127051, "score": 1, "vote": 0, "content": "Keeping them in separate folders is a good idea.  It makes it easier to find than searching Java packages for the C files, and it also allows for the possibility of adding more C code in the future without having to move it all around later.", "abstract": ""}, {"id": 127018, "score": 0, "vote": 0, "content": "Let's use different terminology. There is one product which is not project. The product consist of Java workspace and C/C++ workspace, each loadable from the different IDE. Eventually if you use one and the same IDE there will be only one workspace.\nEach workspace consists of several projects. Each project has its own folder structure (src, bin, res, e.t.c). So in case it is only one workspace, then it is better to have at least one Java and one C/C++ project inside, each with different compile/run/debug/output/... settings. So, I would use: This way you can use eventually one and the same folder structure for each project, which is more consistent. Basically this is just one more level of abstraction - dividing the product to different related projects.", "abstract": ""}, {"id": 127022, "score": 4, "vote": 0, "content": "The default Maven-generated layout for web apps is src/main/java, src/test/java, src/main/resources, and src/test/resources.  I would assume that it would default to adding src/main/cpp and src/test/cpp as well.  This seems like a decent enough convention to me.", "abstract": ""}, {"id": 127016, "score": 0, "vote": 0, "content": "Personally in the case of split language solutions, I would keep them in seperate projects or folders.  One way of looking at the problem is to treat the C classes like any other third party API. Interface out the dependancies (i.e. avoid direct calls) in your java code to avoid tight coupling and keep the C source in a seperate project/folder from the java.", "abstract": ""}, {"id": 126975, "score": 9, "vote": 0, "content": "\"I didn't like this because I have only two C files and it seemed very odd to split the source base at the language level like this\" Why does it seem odd? Consider this project: Or, if you decide to split things up into modules: \n  project1\\module1\\src\\java\n  project1\\module1\\src\\cpp\n  project1\\module2\\src\\java\n  project1\\module2\\src\\python\n I guess it's a matter of personal taste, but the above structure is fairly common, and I think it works quite well once you get used to it.", "abstract": ""}, {"id": 126922, "score": 0, "vote": 0, "content": "Personally I'd separate the two, possibly even into their own separate projects, but that's when they are both separate things, much like you wouldn't put two different concepts in the same class. It's get much vaguer when they both touch the same conceptual area. Ofcourse there's always issues when it comes to building the code, is putting it in structure b) possible for instance without needing to do all sorts of tricks to get it to compile? Are you planning on using more C in the project, in which case the C files would get spread all over your project if you follow the same pattern ...", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/30376505/how-to-organize-a-set-of-classes-properly", "keywords": [], "tags": ["python", "python-2.7", "oop"], "question": {"id": 30376505, "title": "How to organize a set of classes properly?", "content": "I want to create a set of objects through inheritance, and I need some advice to organize my implementation. All objects must inherit from a BaseObject, as so: I want to ensure that all objects inheriting from BaseObject are forced to have a class Actuator and a class Sensor. Then I have another abstraction level, with some generics objects, for example: And I want every Camera object I create to have at least get_frame and set_parameters. I want to force implementation of these classes/function to keep the same synthax for every new object, so that if I want to work with another camera, I can keep my previous scripts, I just need to create a new Camera object.\nYou should also know that these classes won't be instanciated directly, but are a patern to build on. I looked at metaclasses, wich looks nice to force implementation of methods in a class but I'm not sure if:", "abstract": ""}, "answers": [{"id": 30381904, "score": 2, "vote": 0, "content": "I want to force implementation of these classes/function to keep the\n  same syntax for every new object, so that if I want to work with\n  another camera, I can keep my previous scripts, I just need to create\n  a new Camera object.  OT : do you really mean \"object\" (=> instance), or subclass ? But anyway: Since you mentionned that \"Sensor\" and \"Actuator\" are not necessarily supposed to have the same interface for different BaseObject subclasses, let's ignore the whole BaseObject part for the moment and concentrate on the Camera part.  If I understand correctly, what you want is generic Camera type. This type must have a sensor and an actuator attributes, which both must respect a given interface, but with possibly different implementations. At this point we (well, I at least) don't have enough context to decide if we need an abstract BaseCamera type or if we just need abstract BaseCameraSensor and BaseCameraActuator interfaces. What is sure is that we do need BaseCameraSensor and BaseCameraActuator so let's start with this. I assume the sensor and actuator need to be aware of the camera they belong too, which FWIW really screams \"strategy\" pattern, so we start with a base class - let's call it \"BaseStrategy\" - that don't do much except get a reference to it's host object: Now let's define our \"CameraSensor\" and \"CameraActuator\" interfaces: Now we can take care of the \"Camera\" part. If the only variant parts of the implementation are encapsulated in the Sensor and Actuator (which is the point of the strategy pattern), then we don't need an abstract base class - we can just pass the appropriate Sensor and Actuator subclasses as params to the initialiser: And the problem is solved. FWIW, note that you don't really need the Strategy class nor the ABC part, just documenting the expected interface for sensor_class and actuator_class and let the program crash if they are not respected is enough - that's how we've been programming in Python for years (15+ years as far as I'm concerned) and it JustWork(tm) - but ABC at least makes the contract clearer and the program will crash sooner. But don't be fooled: it wont make your code foolsafe (hint: nothing will, period).  Now if we have some other variant parts that implementation cannot be known ahead of time, the simplest solution would be to follow the same pattern - delegate to a Strategy object that is passed at instanciation time. So the point is: now we have this implemented, we find out we don't have a need for some BaseCamera ABC.", "abstract": ""}, {"id": 30376785, "score": 3, "vote": 0, "content": "I would implement them like so: Every subclass will have an actuator and a sensor param. Make sure you call super.__init__ if you override __init__ in child classes.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/22183676/how-to-define-a-base-class", "keywords": [], "tags": ["visual-c++", "inheritance"], "question": {"id": 22183676, "title": "How to define a base class?", "content": "I am getting a an error called C2504: 'MyCourse' : base class undefined I have 3 classes, but all of them need to share some information with each other : How can I have a base class when each of them extends to another ?", "abstract": ""}, "answers": [{"id": 22183819, "score": 1, "vote": 0, "content": "class MyStudent : public MyCourse { class MyCourse : public MyStudent { class MyDriver1 : public MyCourse, public MyStudent This is bad practice.   A base class first of all, should define COMMON functionality and variables which are to be inherited by child classes.  It shouldn't be set up like the above where classes are all inheriting from each other. Take a step back from all three classes, ask yourself, what things in common do all of these classes need? A MyStudent should not extend a MyCourse and a MyCourse should not extend a MyStudent. A MyStudent should have a declaration of a MyCourse object somewhere inside it if you wish to store course information from a student", "abstract": ""}, {"id": 22183754, "score": 2, "vote": 0, "content": "You have a circular reference in your inheritance hierarchy. This is not allowed in C++, and it doesn't make sense anyway. Inheritance is used to model \"is-a\" relationships. If B extends A, then a B is a more specific example of an A. In that case, how could an A also be a more specific example of an A? You need to rethink what you are actually trying to model here, and design your class hierarchy accordingly. A student is not a course, and a course is not a student. Inheritance is not the appropriate tool to model this relationship. A course contains a list of enrolled students. The correct way to model this is called composition: your course class should contain some sort of list of students.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/17094298/organizing-class-best-practices", "keywords": [], "tags": ["c#", "class"], "question": {"id": 17094298, "title": "Organizing class... best practices?", "content": "Say I have a class as follows But I want to organize it better, so how can I do it. At the moment i tried something like this -  A few things I do not like about this  But I am not sure if it is the best practice. I was thinking of creating a embedded class within the class FootballPlayer. I am going to be using the class in a WPF application and going to implement INotifyPropertyChanged on my FootballPlayer class. By using the method above, I am going to have to imlpement INPC on all of the classes such as CareerDetails etc. So what should I do instead or should I stick with what I have? I may have another base class called 'FootballTeam' which could have a sub-class named CurrentMatchDetails as well - It may look like this so I should be able to access properties like this teamObject.CurrentMatchDetails.RefereeName or playerObject.CurrentMatchDetails.Goals; ", "abstract": ""}, "answers": [{"id": 17095803, "score": 1, "vote": 0, "content": "I may have another base class called 'FootballTeam' which could have a sub-class named CurrentMatchDetails as well First, a class named FootBallTeam should never have a subclass named CurrentMatchDetails. Inheritance is not a code sharing mechanism, but to model according to physical world. Is CurrentMatchDetails a FootballTeam? I see no way. Inheritance work for this kind of model: Here StarPlayer is a FootballPlayer, so all those properties of a football player should be available on a star player too. You should use composition, please read more here: Prefer composition over inheritance?. In your case FootBallTeam should be a property on the CurrentMatchDetails. I dont have a better answer than Ed's (+1 for him), I will just try to flesh out his a bit further. If visibility of some classes are bothering you, you can protect it by pushing them to some specific namespace. And finally a football team is still perfectly valid entity even if they are not in a match. Model it this way: Makes sense. Now call it like: Alert: The design above is ok but still a bit smelly. Why would a FootballPlayer have a PlayerCurrentMatchStat? A football player is still a perfect player even if he is in the bench. May be you could make it null if he is not in a match. Same goes for PlayerSeasonStat - if so which season? I would completely redesign it, and imo is a little more complex, but a lot more logical. Here inheritance is used sparingly (where it warrants) and what is used to good effect is composition.", "abstract": ""}, {"id": 17094368, "score": 8, "vote": 0, "content": "You should create a StatDetails object: In this way, you only have to implement INotifyPropertyChanged on two classes.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/10307523/properly-designing-java-class-hierarchies-for-code-sharing-and-encapsulation", "keywords": [], "tags": ["java", "oop", "design-patterns", "interface", "encapsulation"], "question": {"id": 10307523, "title": "Properly designing Java class hierarchies for code sharing and encapsulation", "content": "When laying out a class hierarchy, I often find myself frustrated at the gap between being able to encapsulate functionality while also sharing code. Part of the problem, of course, is lack of multiple inheritance, but interfaces help somewhat. The inability to define protected methods on interfaces seems to me to be the bigger issue. The standard solution seems to be to have a public interface that is implemented by a protected abstract base class. The problem is when we have the following That is, we return one of our nicely-encapsulated objects to caller, but then any method which gets that object back needs to be able to rely on some internal functionality. That internal functionality cannot be part of the interface (that would break encapsulation), but to make it part of an abstract base class requires us to use casting. We cannot make Foo an abstract class because other interfaces need to extend it to add optional, orthogonal functionality to a more complex hierarchy than is display here. What are the standard approaches to this problem? Do you add getId to the Foo interface, even though clients shouldn't use it? Do you perform an unsafe cast to BaseFoo in FooCollection.add? If you check before casting, what do you do when the types don't match, even though they always should for all intents and purposes? Any information you have on best practices in this sort of situation would be very helpful. Edit: In case it's not clear, this example is intentionally oversimplified. The key point is that sometimes you return an \"interface view\" of an object. When that \"interface view\" is passed back in to a package-specific class, the method it is passed to will likely need to use internal functionality in its implementation. How does one manage that mismatch between internal and public functionality? ", "abstract": ""}, "answers": [{"id": 10307594, "score": 2, "vote": 0, "content": "I don't know about \"best\" practices, but here are a couple of ideas. Interfaces are supposed to separate \"what is to be done\" from \"how something is to be done\".  I don't think getters and setters belong in interfaces.  I try to give them more meaningful signatures. In your case, I see nothing wrong with two interfaces:  Separate the two; force clients to implement only the ones they need.  Your decision to make id part of the abstract class is arbitrary.  Separating it out and making it explicit can be helpful. Casting loses all benefit of polymorphism.  I don't think that it should be abandoned lightly.  If you must move getId() up to the interface, do so.  If you can avoid it by different choices, do so. \"Best\" depends on your context.  Your simple example might not be true in all cases.", "abstract": ""}, {"id": 10307589, "score": 7, "vote": 0, "content": "Okay, here's a couple of points: Contrary to popular opinion, inheritance really isn't about sharing code.  What you create in an inheritance hierarchy is an organization of things that share some common set of abstract behaviors; it just works out sometimes to have the effect of reusing some code. The fashion has changed quite a bit in the last few years, so that deep and complicated inheritance hierarchies are no longer considered good form.  In general in Java. you should If you really want the effect of multiple inheritance, build implementation classes for your interfaces, and aggregate them. In particular, by defining your classes with interfaces and implementation classes, you make building tests much easier; if your interface is separate, it's almost trivial to build a mock for that interface.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/5965120/where-to-implement-methods-when-derived-class-only-differs-by-context-and-retu", "keywords": [], "tags": ["c#", "oop"], "question": {"id": 5965120, "title": "Where to implement methods when derived class only differs by &quot;context&quot; and return type", "content": "I got a base class \"BaseClass\" and n derived class DerivedCLass1, DerivedClass2...\n(I don't know if \"derived\" is the right term but my DerivedClassX are BaseClass with just \nfew methods added. Like Vehicle vs Car / MotorCycle / Truck) All the derived classes share a storePDF function that generates/stores a pdf.\nThis method  shouldn't be called from a BaseClass instance coz this is irrelevant.\nBut I don't want the code to be repeating all over the derived classes.\nHow should I organize my classes ? (or interfaces)  ", "abstract": ""}, "answers": [{"id": 5965294, "score": 0, "vote": 0, "content": "A suggestion would be to mark storePDF() as protected in the base class so that it is not accessible by anyone except the classes that inherit from it. This would prevent anyone from calling storePDF() on the base class. Then for the child classes, you could have an abstract method in the base class that would be overriden by the base classes, which would call the protected storePDFHelper method: Semantically, I think this is a good option because you would:\n1) not be able to call storePDF from BaseClass, which you mentioned would be good\n2) be able to reuse storePDF logic over all children of BaseClass But I'd like to hear from the other, more experienced folks too :)\nHope this helps!", "abstract": ""}, {"id": 5965372, "score": 0, "vote": 0, "content": "StorePdf should probably be extracted into at class of its own.  Whether this should be injected into your derived classes, or StorePdf should receive them as arguments, depends on the implementation details. First, you move it away to remove the violation of SRP. ", "abstract": ""}, {"id": 5965321, "score": 0, "vote": 0, "content": "Your List<DerivedCLass1> getInstance(string id) function in the two derived classes don't return different types - is this correct or a typo? In any case, because they return a type that is different to the base class they cannot override the equivalent function. Change your base class to abstract, and try something like this: With the storePDF() method, leave its implementation in the base class - any consumer will have to invoke it via a derived class because the base class is abstract and cannot be created directly.", "abstract": ""}, {"id": 5965255, "score": 0, "vote": 0, "content": "The idea is to keep all the common code in base class, derive classes may override some functions if different functionality is to be achieved, there is no harm in that. You could call base method as well from derive class method if required like base.DoSomething() from derive.DoSomething(). Hope this help", "abstract": ""}, {"id": 5965238, "score": 0, "vote": 0, "content": "you should create and abstract or virtual method storePdf in base class\nand in the derived classes override this method if you have some default behavior you should move it into the virtual base method if not you can create and abstract method or an Interface with this method\nIn your case you can create a public virtual method in the base class and also make base class abstract it's avoid instantiate object of this class", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/3475005/modern-way-to-declare-a-class-in-php", "keywords": [], "tags": ["php", "class"], "question": {"id": 3475005, "title": "Modern way to declare a class in php", "content": "Wanting to make sure I'm using classes properly. The main script accepts this from the user: For the program to find a microsoft event it has to run the regular expression: '(ID=)+[0-9]+'\nFor the program to find a linux event it has to run the regular expression: '(ID=)+[A-F]+' Creating an Events class seems a logical way to organize the code. I don't want to send the required regular expression into the class from the main script if possible. I want to tell the events class if it is a microsoft or linux event and let the class return the processed data based on variables that are pre-defined in the class for each type of event. I have existing code written as:  I want to use something like multiple static helper methods in the Events class instead. If I change the existing code to the code below, will it allow me to call microsoft_events and linux_events independently from outside the class, and is this correct way to create the class? (example code for calling the static functions from outside the class is appreciated) :", "abstract": ""}, "answers": [{"id": 3475484, "score": 3, "vote": 0, "content": "I would suggest a different approach to this. Having different methods for each even types will require you to write repeating code, which will eventually lead to costly maintainable code and error prone (even copy/paste is error prone! and I've seen it in some projects to prove it). First, static calls should be limited only (or mostly) when methods does not require to store data in class members; a static method should not set anything, less data to be used by instances of the class itself. You should therefore use the singleton pattern. Second, if you should have many event types, each should have their proper specialized class. Object oriented design goes from abstract to concrete, general to specialized. Therefore, your Events should not know how many or what event it stores, but should leave that to the caller. This will enable you to have a more coherent interface. Here would be an example design : Now that we have our container, we will need event types, first we have our base class : Then, simply specialize it (we create two specialize event types) : Adding new events Get events As you can see, the overhead for class design is a little more complex, but the API is a lot more consistent afterwards. A good design must apply the reusable pattern and this is accomplished here. Hope this helps. ******EDIT**** since your question has changed, here is an edited solution. It is much smaller, but still follow the same base design : Then our base event type class Now, we specialize the types Then we test the results", "abstract": ""}, {"id": 3475470, "score": 3, "vote": 0, "content": "Off the top of my head, i can suggest something like This is one of many possible ways, of course. Let me know if you need further comments.", "abstract": ""}, {"id": 3475034, "score": 3, "vote": 0, "content": "$this can't be used within a static method - one can't assume that the class will be instantiated here... You would have to declare your class like this: Calling:", "abstract": ""}, {"id": 3475056, "score": 4, "vote": 0, "content": "If you want to use everything statically (which makes it essentially a prettied up procedural piece of code), you'll have to do something like this: Note that you can only have a single instance then, every call will change the values for everything.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/1932245/c-abstract-base-class-problem", "keywords": [], "tags": ["c++"], "question": {"id": 1932245, "title": "C++ Abstract Base Class Problem", "content": "So I have run into a problem with my ABC design in C++.  I'm going to use a simplified example from what I actually have.  Please ignore any syntax errors until I get to where my issue is. So I have an ABC: Then I have a derived class: In my main logic function I have something along the lines of: Now at this point my code works beautifully, I have multiple classes functioning correctly based on if I change the type (manually for now) from one derived class to another using the abstract base class as the type for the derived objects. Now my issue... If I want to change my derived class to add in functionality that is not supported by the ABC then my compiler is not recognizing them whatsoever.  For example if I leave ABC the way it is and change Derived to: Then back to my main logic function: My compiler keeps giving me errors that \"DoSomethingElse()\" is not a member of the ABC.  Is what I am trying to do possible?  It feels like I am overlooking something simple but I've hit this road block in my architecture of this piece of software.  Any help is greatly appreciated.", "abstract": ""}, "answers": [{"id": 1944770, "score": 0, "vote": 0, "content": "It sounds like you want to use RTTI (http://en.wikipedia.org/wiki/Run-time_type_information) - if the pointer happens to be a SubClassFoo, you have additional functionality you can use.  If it doesn't, you might be out of luck on special functionality, but might be able to degrade gracefully.", "abstract": ""}, {"id": 1932255, "score": 9, "vote": 0, "content": "You are trying to invoke a method which only exists in the derived class, so you would need to cast the obj pointer like so to invoke this method: Note that dynamic_cast will do a run-time check to ensure that obj is part of the same class hierarchy (i.e. it is a \"valid\" cast), and will return 0 if the cast is invalid.  Note that you need to enable RTTI to use dynamic_cast. Casting like this can be considered a code-smell, and there may be a better way to achieve what you are doing. Polymorphism (what you are trying to achieve here) works better when you are using abstract base classes - i.e. when the methods are pure virtual in the base class, and implemented in any derived classes.  This is analagous to interfaces in other languages.", "abstract": ""}, {"id": 1932393, "score": 3, "vote": 0, "content": "In my opinion you have a broken design.  What you want to do can't be done. Think about this...  How does code that calls the function that returns the DirextX9 device type know that that function exists?  What happens if it gets an ABC * that points at an instance of the DirectX10 functionality? In my opinion, what you should do is figure out the major abstractions that exist in all versions of DirectX (which, being a Unix geek is an API with which I am wholly unfamiliar and think you ought to be using the cross-platform OpenGL instead).  Then you create an interface for each abstraction and make it into an ABC.  The interfaces for each ABC only mention other ABCs.  Then you derive a specific class for each abstraction that implements it in terms of the types and functions of a specific version of the DirectX API. Now, you might end up with something like this: Now, it may be that you only have machines made out of gold or silver but not both.  And you might decide that GoldWidget::nudgeSprocket(Sprocket *sp) needs to be able to call GoldWidget::glitter() on its sp argument, and that this will be perfectly safe.  In my (and may others) opinion, this is a design error. One of two things should be true.  Either the nudgeSprocket method should be implemented in terms of the generic Sprocket interface, or there should be a class that knows it is dealing with a GoldWidget and will call a version of nudgeSprocket that takes a GoldSprocket as an argument. I would suggest reading about design patterns as I think knowing about this particular way of thinking about things will help you organize your thoughts about how to do this and result in a relatively clean design.  In particular, I suspect the Adapter pattern, the Bridge pattern, and the Facade pattern used in some combination might work well for helping you solve your problem.", "abstract": ""}, {"id": 1932290, "score": 0, "vote": 0, "content": "Because base class object can't refer to something which is not part of it.", "abstract": ""}, {"id": 1932265, "score": 3, "vote": 0, "content": "This is completely correct, the obj pointer you are using is of the ABC type, so according to the principle of Polymorphism, it will only have the methods available to the ABC class. This is, of course, completely correct and sensible if you think about it. If you really need access to the special methods on the derived objects, you need a pointer of that type, as it wouldn't really BE that type until you do that.", "abstract": ""}, {"id": 1932252, "score": 2, "vote": 0, "content": "DoSomethingElse is a member of Derived, not ABC, so the compiler can't assume you can call it on a pointer of type ABC.  You could upcast to a Derived*, or change the ABC* to a Derived* since you know it's derived, or you could move DoSomethingElse to the Abstract class. ", "abstract": ""}]}]