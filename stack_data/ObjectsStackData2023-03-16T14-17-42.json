[{"link": "https://stackoverflow.com/questions/73928136/python-class-methods-and-conventions", "keywords": [], "tags": ["python", "class", "oop", "package", "conventions"], "question": {"id": 73928136, "title": "Python class, methods and conventions", "content": "Suppose Im creating a class named Bar: Once I create an object of Bar, How should I get the value of the foo variable?\nShould I just type this? Or should I create a method get_foo()? And then write First or second option?", "abstract": ""}, "answers": [{"id": 74056850, "score": 0, "vote": 0, "content": "If you have a class Bar and want to access the variable foo, use your first case that is: But if you want to modify the variable, editing through the object is not recommended. For that, create a function like this: Now you can edit the variable and also access it with the updated value.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/66091209/what-is-id-of-a-python-class-not-class-instance", "keywords": [], "tags": ["python", "class", "object", "identity"], "question": {"id": 66091209, "title": "what is id() of a python class, not class instance", "content": "From the python document the id() function: Return the \u201cidentity\u201d of an object. This is an integer (or long integer) which is guaranteed to be unique and constant for this object during its lifetime. Two objects with non-overlapping lifetimes may have the same id() value. CPython implementation detail: This is the address of the object in memory. This is clear, I understand it. It a python class instance is passed to id function, it returns the \u201cidentity\u201d / address of that object.  However, if a python class name is passed to id function. What does it return?  From example. I understand 65097560 is the memory address of object x. but what is the meaning of id(Abc) / 67738424?", "abstract": ""}, "answers": [{"id": 66095240, "score": 1, "vote": 0, "content": "Classes are objects themselves. They're instances of the metaclass type. (type is also used for determining something's type.) In Python 2, old-style classes are instances of classobj. In general, everything is an object in Python, including functions like id() itself, builtin types/classes like list, and modules like sys. Though there are a few exceptions like keywords and operators.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/42963968/python-class-depending-on-variable", "keywords": [], "tags": ["python", "oop", "inheritance"], "question": {"id": 42963968, "title": "Python class depending on variable", "content": "Is there a way to change objects class dynamically depending on passed variable? For example:", "abstract": ""}, "answers": [{"id": 42969674, "score": 1, "vote": 0, "content": "Define a conditional check if, else  in the __new__ function of class parent prior to the __init__.", "abstract": ""}, {"id": 42970211, "score": 2, "vote": 0, "content": "This can be done in a __new__ method for the Parent class.  It gets to make the decisions about what object is really created: The output proves that it works:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/64366138/classes-vs-function-do-i-need-to-use-self-keyword-if-using-a-class-in-python", "keywords": [], "tags": ["python", "function", "class", "object", "self"], "question": {"id": 64366138, "title": "Classes vs Function: Do I need to use &#39;self&#39; keyword if using a class in Python?", "content": "I have a data engineering program that is grabbing some data off of Federal government websites and transforming that data. I'm a bit confused on whether I need to use the 'self' keyword or if it's a better practice to not use a class at all. This is how it's currently organized: I'm mostly using a class here for organization purposes. For instance, there might be a dozen different methods from one class that I need to use. I find it more aesthetically pleasing / easier to type out this: Rather than: Which just has a boatload of underscores. So I'm just curious if this would be considered bad code to use a class like this, without bothering with 'self'? Or should I just eliminate the classes and use a bunch of functions in my files instead?", "abstract": ""}, "answers": [{"id": 64366295, "score": 2, "vote": 0, "content": "I suppose you have a file called data/get_govt_data.py that contains your first code block. You can just rename that file to data/GetGovtData.py, remove the class line and not bother with classes at all, if you like. Then you can do Depending on your setup you may need to create an empty file data/__init__.py for Python to see data as a module. EDIT: Regarding the file naming, Python does not impose any too tight restrictions here. Note however that many projects conventionally use camelCase or CapitalCase to distinguish function, class and module names. Using CapitalCase for a module may confuse others for a second to assume it's a class. You may choose not to follow this convention if you do not want to use classes in your project.", "abstract": ""}, {"id": 64366373, "score": 6, "vote": 0, "content": "If you develop functions within a Python class you can two ways of defining a function: The one with a self as first parameter and the other one without self. So, what is the different between the two? The first one is a method, which is able to access content within the created object. This allows you to access the internal state of an individual object, e.g., a counter of some sorts. These are methods you usually use when using object oriented programming. A short intro can be fund here [External Link]. These methods require you to create new instances of the given class. Functions without initialising an instance of the class. This is why you can directly call them on the imported class. This is based on the comment of Tom K. Instead of using self, you can also use the decorator @staticmethod to indicate the role of the method within your class. Some more info can be found here [External link]. To answer you initial question: You do not need to use self. In your case you do not need self, because you do not share the internal state of an object. Nevertheless, if you are using classes you should think about an object oriented design.", "abstract": ""}, {"id": 64366372, "score": 1, "vote": 0, "content": "To answer the question in the title first: The exact string 'self' is a convention (that I can see no valid reason to ignore BTW), but the first argument in a class method is always going to be a reference to the class instance. Whether you should use a class or flat functions depends on if the functions have shared state. From your scenario it sounds like they may have a common base URL, authentication data, database names, etc. Maybe you even need to establish a connection first? All those would be best held in the class and then used in the functions.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/61161661/how-to-read-number-of-methods-in-a-class-in-python", "keywords": [], "tags": ["python", "python-3.x"], "question": {"id": 61161661, "title": "How to read number of methods in a class in python?", "content": "As Python can have multiple classes in one file/module, then how to read Number of Methods class by class?", "abstract": ""}, "answers": [{"id": 61163780, "score": 0, "vote": 0, "content": "let's assume you have a module my_module.py: if you want the number of user-defined methods from each class you can use: output:", "abstract": ""}, {"id": 61161830, "score": 1, "vote": 0, "content": "The quick way is to simply run the built in dir() function on a class. Any non-dunder method is typically meant to be used by the programmer.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/56722735/python-class-method-that-receives-an-object-of-its-class", "keywords": [], "tags": ["python", "class-method"], "question": {"id": 56722735, "title": "python class method that receives an object of its class", "content": "I want to create a Square class that has method to calculate the distance from another Square. Here is how I have defined it: The _other_square is an object of type Square.\nThis gives me an Unresolved reference 'Square' error.  Is there a way to get around it?", "abstract": ""}, "answers": [{"id": 56722822, "score": 2, "vote": 0, "content": "Change the function definition to this: The type hint is now a str instance which will be resolved after the module has been loaded, and therefore the Square type is defined. See here for all details.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/46636267/python-class-as-object", "keywords": [], "tags": ["python", "class", "object"], "question": {"id": 46636267, "title": "Python class as object", "content": "I wonder if the class below becomes an object in a moment when is defined or does it become and object in the moment when I instantiate it? so, blabla is an object. The question is: is the BlaBlaCar class an object too so it is an object on it is own when I not call it? Does it exist in the memory as an object when is defined as 'class BlaBlaCar(object)' ??? EDIT:\nIt is clear to me that when I do: print(BlaBlaCar()) then I instantiate class object. The question is when I create the class body definition do I create object to? ", "abstract": ""}, "answers": [{"id": 46636409, "score": 1, "vote": 0, "content": "I concur with @jonrsharpe 's comment and I think you can find all information you need here. Almost everything in Python is an Object. I looked up some references for this as well. Here, in the Python Docs, it is stated: Class Definition Syntax\n  The simplest form of class definition looks like this: Class definitions, like function definitions (def statements) must be executed before they have any effect. (You could conceivably place a class definition in a branch of an if statement, or inside a function.) In practice, the statements inside a class definition will usually be function definitions, but other statements are allowed, and sometimes useful \u2014 we\u2019ll come back to this later. The function definitions inside a class normally have a peculiar form of argument list, dictated by the calling conventions for methods \u2014 again, this is explained later. When a class definition is entered, a new namespace is created, and used as the local scope \u2014 thus, all assignments to local variables go into this new namespace. In particular, function definitions bind the name of the new function here. When a class definition is left normally (via the end), a class object is created. This is basically a wrapper around the contents of the namespace created by the class definition; we\u2019ll learn more about class objects in the next section. The original local scope (the one in effect just before the class definition was entered) is reinstated, and the class object is bound here to the class name given in the class definition header (ClassName in the example).  From this you take, that the pure definition of the class is an object. And here I could find this information about objects: 2.4.2. What's an Object?\n  Everything in Python is an object, and almost everything has attributes and methods. All functions have a built-in attribute doc, which returns the doc string defined in the function's source code. The sys module is an object which has (among other things) an attribute called path. And so forth. Still, this begs the question. What is an object? Different programming languages define \u201cobject\u201d in different ways. In some, it means that all objects must have attributes and methods; in others, it means that all objects are subclassable. In Python, the definition is looser; some objects have neither attributes nor methods (more on this in Chapter 3), and not all objects are subclassable (more on this in Chapter 5). But everything is an object in the sense that it can be assigned to a variable or passed as an argument to a function (more in this in Chapter 4). This is so important that I'm going to repeat it in case you missed it the first few times: everything in Python is an object. Strings are objects. Lists are objects. Functions are objects. Even modules are objects. Be aware, however, that no instance is created with the class definition until:", "abstract": ""}, {"id": 46636546, "score": 0, "vote": 0, "content": "First, to dispell any doubt, a class definition does give you an object representing the class itself (not an instance): So you see BlaBlaCar is an object in memory. You ask, \"where is the class object created to?\" The class definition normally is in a module (or in the example above, in the current namespace, which is __main__).  When this module is executed, a module object is created.  As part of module execution, any class definition executed will result in a class object which is then bound to the class name in the module's namespace.   So in a sense, you can say the class object is \"in\" the module's namespace.  But really, you can ask a similar question, \"where is the module object created to?\", at which point, the answer just is that the interpreter creates the object and has one or more references to it, just like any other object you create. A subtlety is that the garbage collector will collect any object that doesn't have a reference to it.  In the case of the class object, the surrounding module has it in its namespace.  In the case of the module itself, there is always a reference from places like sys.modules.  ", "abstract": ""}, {"id": 46636506, "score": 1, "vote": 0, "content": "As has been pointed out elsewhere, almost everything in Python is an object.\nHowever, I feel that your question The question is when I create the class body definition do I create object to?  has not been addressed directly yet. When Python executes the definition of the class, yes, an object is created. But it is important to note that ", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/35958961/class-vs-type-in-python", "keywords": [], "tags": ["python", "python-3.x"], "question": {"id": 35958961, "title": "Class vs. Type in Python", "content": "I just recently started to teach myself how to code.  I am currently reading Think Python 2 for python 3 and when it teaches about the type() function, it gives the example type(2) which outputs <class 'int'>.  It then states that \"the word 'class' is used in the sense of a category; a type is a category of values.\" The part that confuses me is that the type() function outputs class instead of type. Also, I'm not sure about the difference between type and class; are string, float point, and integer classes of the type \"value\", or are they the same thing? I have looked this up but cannot find an answer to my specific questions or simple enough for me to understand.", "abstract": ""}, "answers": [{"id": 35959047, "score": 40, "vote": 0, "content": "Once upon a time, Python had both types and classes. Types were built-in objects defined in C; classes were what you built when using a class statement. The two were named differently because you couldn't mix these; classes could not extend types. This difference was artificial, a limitation in the language implementation. Starting with Python 2.2, the developers of Python have slowly moved towards unifying the two concepts, with the difference all but gone in Python 3. Built-in types are now also labelled classes, and you can extend them at will. Your book is trying to explain a difference that isn't present in Python anymore. Even in Python 2 the difference is only there in name, since type(2) shows the word 'type' is still used there: but you can subclass int just like any other class. (Python 2 does still have old-style classes, those that don't inherit from object; these are a remnant of the old system from before the unification.)", "abstract": ""}, {"id": 35959061, "score": 6, "vote": 0, "content": "The python hierarchy is Type (Metaclass) -> Class -> Instance.\nThink of the function type() as going one level up. If you use the function type() on an instance of an int (any integer) like so: type(123) you will receive the class of the instance which in this case is int. If you will use type() on the class int, you will recieve type type which is the metaclass of int. Keep in mind metaclasses are advanced technical details of python and you do not need to learn about them at first.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/36640673/why-should-i-use-classes-in-python", "keywords": [], "tags": ["python", "class", "oop"], "question": {"id": 36640673, "title": "Why should I use classes in python?", "content": "I am a  very amateur learner of Python, and I have recently started learning the concept of classes. I can understand the concept of classes (very) roughly, but I can't understand why I can't simply write some functions instead of writing a class? For example, (I am learning from Interactive python) one of the exercise given (which I am supposed to write using a class) is : Add a distanceFromPoint method that works similar to distanceFromOrigin except that it takes a Point as a parameter and computes the distance between that point and self. Add a method reflect_x to Point which returns a new Point, one which is the reflection of the point about the x-axis. For example, Point(3, 5).reflect_x() is (3, -5). They written the code using classes like this:  Why should I use class when I can write them simply like this: ", "abstract": ""}, "answers": [{"id": 36642170, "score": 0, "vote": 0, "content": "Your example of a point is a bad one for justifying the use of classes.  A class is a great way of describing what something is rather than manipulating data. So a point just has two bits of information describing it (in 2D space anyway).  Think of something more abstract, like, a movie file. Movies have all sorts of information associated with them: title, duration, genres, actors, age rating, popularity, language, awards... goes on. Try writing functions that handle a long list of all of this information and you will quickly see the merits of a class. Maths is maybe the one area where there really isn't that much contextual information, there are only a few variables and they define everything. Real-world data is less clearly defined and so benefits from the extensibility of classes.", "abstract": ""}, {"id": 36641737, "score": 22, "vote": 0, "content": "One of the big advantages of using OOP is extensibility. Let's say you'd written an application that processes lots of data in the form of points. Now your customer adds to the specification that as well as the x and y coordinate of each point, your app needs to know what colour each point is. If you'd written your code to store each point as a tuple, (x, y), you might add the colour as a third value: (x, y, colour). But now you have to go through all of your code to find the places where it's broken because you changed the data format. If you'd used a class, you could simply define a new class that inherits from Point and adds the necessary capabilities: All your code that worked with the Point class will still work with the new class, and you can do this even if you didn't write, or can't change, the definition of the Point class.", "abstract": ""}, {"id": 36641026, "score": 0, "vote": 0, "content": "Functional and object-oriented programming are different paradigms. In Python, everything is an object, even ints. The whole language goes towards object-oriented programming, which is why you should prefer going for it, especially if your program will grow.", "abstract": ""}, {"id": 36640908, "score": 3, "vote": 0, "content": "You can declare a function outside of a class.\nBut storing them in class is a better pratice in general in programming. OOP is considered to be more readable and also reusable. And in this case, the distance between two points depends on points, so it's logical to have the distanceFromPoint method in this class. Class also allow you to be sure than you calculate the distance from Points and not for tuples who can contains bad values, like more than two coordinates.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/19614196/what-does-object-do-next-to-class-name-in-python", "keywords": [], "tags": ["python", "class", "object"], "question": {"id": 19614196, "title": "What does (object) do next to class name in python?", "content": "When you declare a class in python, I often see (object) written next to the class name. Is this same as writing below? I don't really see any difference in terms of how they function. Is it just a way to clarify that someClass is a subclass of object? and is it a good practice to explicitly write object when I make a class? ", "abstract": ""}, "answers": [{"id": 19614216, "score": 14, "vote": 0, "content": "In Python 2, making someClass a subclass of object turns someClass into a \"new-style class,\" whereas without (object) it's just a \"classic class.\"  See the docs or another question here for information on the differences between them; the short answer is that you should always use new-style classes for the benefits they bring. In Python 3, all classes are \"new-style,\" and writing (object) is redundant.", "abstract": ""}, {"id": 19614209, "score": 1, "vote": 0, "content": "In python 3.x, they are the same, when you declare:  it inherits from object implicitly. For more information visit this.", "abstract": ""}]}]