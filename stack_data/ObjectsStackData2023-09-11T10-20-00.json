[{"link": "https://stackoverflow.com/questions/16688655/check-if-an-object-is-an-instance-of-a-class-but-not-an-instance-of-its-subclas", "keywords": [], "tags": ["java", "instanceof"], "question": {"id": 16688655, "title": "Check if an object is an instance of a class (but not an instance of its subclass)", "content": "For this example: How can I check if qux is an instance of Foo (but not an instance of its subclass of foo)? That is: Is there some kind of statement like instanceof for this check? or I should use qux.getClass().equals(Foo.class)", "abstract": ""}, "answers": [{"id": 42245076, "score": 2, "vote": 0, "content": "I have read all the answers which have been posted so far but couldn't find satisfactory answer yet. Answering to Is there some kind of statement like instanceof for this check? or I should use qux.getClass().equals(Foo.class) question I would say yes, there is instanceof operator in java to check if the object is instance of class. Below is an example-: Output-: Description-:instanceof operator tells if an object is a instance of a class or it's parent classes (up to any level).\nvehicle instanceof Car : FALSE line of output is indicating that instanceof operator will not tell if an object is a instance of its sub class. Another way is to use getClass().equals(Foo.class) to determine if an object is a instance of a class or not. Let us see below example-: Output-: Description-: It would be clear from the above example that which one(out of above two) should be opted where? Important Notes-:", "abstract": ""}, {"id": 16689218, "score": 2, "vote": 0, "content": "I just tried following code, it seems like working fine", "abstract": ""}, {"id": 16688927, "score": 1, "vote": 0, "content": "", "abstract": ""}, {"id": 16688815, "score": 0, "vote": 0, "content": "Well you already know that qux is instanceof Foo (unless it's null...), so a simple qux instanceof Bar and a null check should be all you need.", "abstract": ""}, {"id": 16688794, "score": 82, "vote": 0, "content": "If you have to do this, the only way would be the getClass().equals(Foo.class) option you've suggested. However, the goal of OO design is to allow you to treat any Foo in the same fashion. Whether or not the instance is a subclass should be irrelevant in a normal program.", "abstract": ""}, {"id": 16688791, "score": 8, "vote": 0, "content": "If you are looking for exact class match the only means is qux.getClass().equals(Foo.class). instanceof will also return true for subclasses.", "abstract": ""}, {"id": 16688776, "score": 5, "vote": 0, "content": "you should use instanceof This works with both classes and interfaces, so in most cases it should preferred over .class which does not work with interfaces.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/68937249/check-if-object-is-an-instance-of-a-class-from-a-list-of-classes-and-cast", "keywords": [], "tags": ["java"], "question": {"id": 68937249, "title": "Check if Object is an instance of a class from a list of classes and cast", "content": "I have a number of classes that my object might be at run time. Currently to check which class it is i have a number of if statements like This works but doesn't feel very clean. I had a look at Check if an object is an instance of any one of a list of classes (Android) which suggests a way to check if the object is an instance of a class from a list of classes like However this doesn't then work as i need to go on and cast the object to that class. Does anyone know of a cleaner way to bot check my object type is of a class from a list of classes AND then cast the object to that class. Something like NOTE of course normally I would just make all of the Classes be subclasses of a super class that had the getID method and other methods I need. However in this specific instance these classes all need to be subclasses of a libraries class. Making them inherit from one base classes breaks code in the library. Which i know is a bad design issue on the libraries side but isn't something i can fix.", "abstract": ""}, "answers": [{"id": 68937395, "score": 3, "vote": 0, "content": "However in this specific instance these classes all need to be subclasses of a libraries class Then you should use an interface: However, if Like, Post etc are also library classes, you can do something like this:", "abstract": ""}, {"id": 68937411, "score": 2, "vote": 0, "content": "You need to use polymorphism. For example, create an interface And let your classes implement it. Then you can call the getId method on each of them. Additionally, you can create an abstract class with basic functionality for the Post, Like, etc. classes. Something like that.", "abstract": ""}, {"id": 68938764, "score": 0, "vote": 0, "content": "Re @Alberto Sinigaglia solution, it works excellent... but looks ridiculous after all necessary casts ;), ex: each Class implements:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/67231734/what-is-the-best-way-to-check-if-an-object-is-a-subclass-and-not-the-base-class", "keywords": [], "tags": ["python", "python-3.x", "object", "subclass"], "question": {"id": 67231734, "title": "What is the best way to check if an object is a subclass and NOT the base class", "content": "let's consider the following code snippet: Output: Now if my task was to tell if my_car is of type Vehicle but not of type Car, how would I do that? Is there a smart, short, elegant way for this?", "abstract": ""}, "answers": [{"id": 67231977, "score": 0, "vote": 0, "content": "Please try this code:", "abstract": ""}, {"id": 67231821, "score": 2, "vote": 0, "content": "If my_car is a direct instance of Vehicle then type(my_car) is Vehicle. If it is an indirect instance of Vehicle then isinstance(my_car, Vehicle) and type(my_car) is not Vehicle.", "abstract": ""}, {"id": 67231796, "score": 1, "vote": 0, "content": "Use isinstance()", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/56450218/how-to-check-if-an-instance-of-an-abstract-object-belongs-to-a-particular-subcla", "keywords": [], "tags": ["java", "object", "inheritance", "instance", "abstract-class"], "question": {"id": 56450218, "title": "how to check if an instance of an abstract object belongs to a particular subclass", "content": "I am referencing this duplicate question here:\nCheck if a Class Object is subclass of another Class Object in Java I have an abstract parent class named 'Figure' of which I have two subclasses, 'Circle' and 'Rectangle' both of which extend this abstract parent.  I am trying to determine if a Figure object is of type Circle or type Rectangle.   My original code was: After studying the linked question above, I have rewritten my code as follows: For some reason this does not work unless I include the following in my main class: I'm not sure the significance of including this in my class, if I do not, it seems to require that I include it as a parameter in my method.  I am unable to correctly invoke and test this method because I am unsure what parameter to pass into the method when invoked.  I'd like to write something like: where 'shape1' is a Figure object that was instantiated as either a circle or a rectangle.  Because the parameter is of type Figure, I am unsure how to define the 'isRectangle' method to take a Figure object (the abstract parent) and determine specifically which subclass it is an instance of.  Or preferrably to take no parameter and just do the work by using the Figure object to invoke the method.  I am a bit confused how to proceed.  *Edit: upon user suggestions, I have rewritten the following which does NOT appear to work because in both cases the output is FALSE. ", "abstract": ""}, "answers": [{"id": 61641310, "score": 2, "vote": 0, "content": "You can use the .getClas() method to find the subclass", "abstract": ""}, {"id": 56450304, "score": 4, "vote": 0, "content": "That will always return false since the Figure Class instance is not a subclass of the Rectangle Class instance : You want to generally invoke isAssignableFrom() on the class of a variable which you don't know the runtime type.\nIt would make more sense :  That allows to know whether the instance of the class of the figure variable IS a Rectangle.    Introducing a method to handle the requirement would make still more sense as it is dynamic and it also allows to handle different class compatibility checks :  And you could so use it such as :  That prints :  true false false And of course all of these will outputtrue as a Figure, a Circle and a Rectangle are Figures :", "abstract": ""}, {"id": 56451105, "score": 1, "vote": 0, "content": "I'm going to chime in here and point out a bug in these methods: In the second method, the behaviour you want is for it to check whether or not it is a circle. But instead, you check if it is a rectangle. Instead of figure instanceof Rectangle you should be checking figure instanceof Circle PS. it is acceptable to use instanceof. Anything else is overkill.", "abstract": ""}, {"id": 56450869, "score": 1, "vote": 0, "content": "Your original implementation is correct and the simplest one until we get pattern matching in Java. More detailed explaination: instanceof operator can be used to check if an object is an instance of a particular class. This matches your intent. You can achieve similar functionality with ClassA.isAssignableFrom(ClassB). Here, ClassA is superclass and ClassB is a subclass. Note that this function compares two classes (instances of Class<?>), not an instance against a class.  You can get the class from an instance using getClass method, and thus, the resulting code will look like: Your proposed check has multiple problems:", "abstract": ""}, {"id": 56450624, "score": 1, "vote": 0, "content": "I don\u2019t see much reason to complicate your code with assignable. Your original code works. More than that, checking variable\u2019s class is not a good practice, try to restructure your code. (Check polymorphism, Barbara Liskov principle and Interface segregation principle)\nAnd for clarifying things: Figure is not an object since it\u2019s abstract, it\u2019s type. The type is what stands on the left side of variable declaration.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/2410304/how-to-check-if-a-subclass-is-an-instance-of-a-class-at-runtime", "keywords": [], "tags": ["java", "subclass", "instanceof"], "question": {"id": 2410304, "title": "How to check if a subclass is an instance of a class at runtime?", "content": "In an android app test suite I have a class like this where B is a view: now I have a list of view objects which may contain A objects but in this case I only care if they're subclasses or \"instances of\" B. I'd like to do something like: The problem is that when the if encounters an A object it doesn't evaluate to an \"instance of B\". Is there a way to do isSubclassOf or something?", "abstract": ""}, "answers": [{"id": 2415417, "score": 174, "vote": 0, "content": "You have to read the API carefully for this methods. Sometimes you can get confused very easily. It is either: API says: Determines if the specified Object (the parameter) is assignment-compatible with the object represented by this Class (The class object you are calling the method at) or: API says: Determines if the class or interface represented by this Class object is either the same as, or is a superclass or superinterface of, the class or interface represented by the specified Class parameter or (without reflection and the recommended one):", "abstract": ""}, {"id": 17960516, "score": 1, "vote": 0, "content": "If there is polymorphism such as checking SQLRecoverableException vs SQLException, it can be done like that. Simply say, ", "abstract": ""}, {"id": 2410350, "score": 7, "vote": 0, "content": "Class.isAssignableFrom() - works for interfaces as well. If you don't want that, you'll have to call getSuperclass() and test until you reach Object.", "abstract": ""}, {"id": 2410348, "score": -1, "vote": 0, "content": "I've never actually used this, but try view.getClass().getGenericSuperclass()", "abstract": ""}, {"id": 2410325, "score": 2, "vote": 0, "content": "It's the other way around: B.class.isInstance(view)", "abstract": ""}, {"id": 2410324, "score": 10, "vote": 0, "content": "Maybe I'm missing something, but wouldn't this suffice:", "abstract": ""}, {"id": 2410321, "score": 25, "vote": 0, "content": "This will return true if view is an instance of B or the subclass A (or any subclass of B for that matter).", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/43828688/java-how-to-if-a-object-is-instance-of-parent-class-or-subclass", "keywords": [], "tags": ["java", "object", "inheritance"], "question": {"id": 43828688, "title": "Java: How to if a object is instance of parent class or subclass", "content": "For example, public class A{...} public class B extends A{...} Then, I want check if a is A or B. Is there any way to do this?", "abstract": ""}, "answers": [{"id": 43828738, "score": 4, "vote": 0, "content": "Check the type of object with instanceof take a look at the following", "abstract": ""}, {"id": 43828723, "score": 3, "vote": 0, "content": "you can check whether an instance is a type of a class by following way", "abstract": ""}, {"id": 43828827, "score": -1, "vote": 0, "content": "You can use getClass() method of the object instance.. ", "abstract": ""}, {"id": 43828796, "score": 0, "vote": 0, "content": "Renuka Fernando is correct, but you have to be careful here. Because of how objects are set up in memory, if your object is declared as a super class, but then initialized to one of its children, like so: Then the following code will always says \"I'm an A!\": That is because a is an A and a B at the same time, so if you were trying to see if a was a B, then you would have to put in further checks.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/27475063/test-an-object-is-a-subclass-of-the-type-of-another-instance", "keywords": [], "tags": ["python", "class", "inheritance", "python-3.4"], "question": {"id": 27475063, "title": "Test an object is a subclass of the type of another instance", "content": "I have this code: Now I want to check if obj2 and obj3 are instances of classes that are subclasses of obj1 as well as simply subclasses of of Item. Here is what I understand, I know that I can use the isinstance() to find if obj2 is Sub. and I know that I can use issubclass(Sub, Item). But let's say I didn't know what class obj2 was. I tried using issubclass(type(obj2),Item) but that doesn't work, because type() returns a separate object that I don't really understand the workings of. And this is just one problem, although I figure that the answer to this question will help me solve some of the other problems that I am having. Also I have tried using some of the special attributes to do this such as __class__ but I can't figure out how to do that either.", "abstract": ""}, "answers": [{"id": 27475071, "score": 44, "vote": 0, "content": "You'd need to extract the type of obj with the type() function: Note that the second argument is the class, the first is the instance to test. type() is returning the actual class object here, not any separate object. issubclass() works just fine for your usecase: Demo: Note that if you re-defined the classes here, existing instances will not be updated to point to the new class objects. If type(obj2) doesn't work for you, then that means that the class used to produce it is not the same you are testing with now. You can test if this the case by testing your assumptions; validate that the classes and instances are still in sync, for example:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/15492944/ios-how-to-check-a-given-class-is-a-kind-of-uiviewcontroller-class", "keywords": [], "tags": ["ios", "objective-c", "class", "uiviewcontroller"], "question": {"id": 15492944, "title": "iOS: How to check a given Class is a kind of UIViewController class?", "content": "I am writing a method that returns a view controller instance for a given view controller class, but I need to make sure the class passed in is actually a view controller class: I cannot compare the name of the class since cls may not be UIViewController. edit: Sorry I meant inside the method, how do I check if cls is a kind of UIViewController subclass", "abstract": ""}, "answers": [{"id": 25555565, "score": 0, "vote": 0, "content": "This answer comes a little late, but since you want to check the class of a Class Object (not an instance of a class), the following is the appropriate test:", "abstract": ""}, {"id": 15539680, "score": 0, "vote": 0, "content": "", "abstract": ""}, {"id": 15492983, "score": 0, "vote": 0, "content": "If you have a class object representing the Objective-C class to be tested then use + (BOOL)isSubclassOfClass:(Class)aClass which returns a Boolean value that indicates whether the receiver is an instance of given class or an instance of any class that inherits from that class. (required) EDIT If you have a class object which is a subclass of\u2014or identical to class to be tested then use + (BOOL)isSubclassOfClass:(Class)aClass which returns a Boolean value that indicates whether the receiving class is a subclass of, or identical to, a given class.", "abstract": ""}, {"id": 15492959, "score": 1, "vote": 0, "content": "you can use the below code.", "abstract": ""}, {"id": 15493021, "score": 24, "vote": 0, "content": "", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/20052155/check-if-an-object-is-of-the-same-class-as-this", "keywords": [], "tags": ["java", "class", "instanceof"], "question": {"id": 20052155, "title": "Check if an object is of the same class as this?", "content": "I have a base class for multiple data object types in Java. I want to create an equals method in the base class, that works directly when inherited. Equality is determined by the two objects belonging to subclasses of the base class. This is easily achievable using having the same ID. The ID field is defined by the base class so we can here test that. belonging to the same class. This is where I have the problem. Two objects may be of different types (and so be in different lists), but have the same ID. I have to be able to distinguish them. How can I do this?", "abstract": ""}, "answers": [{"id": 20052453, "score": 0, "vote": 0, "content": "If I understand you question correctly, you need a way to differentiate two objects of same Class with same id. If so, for this you may use toString() which gives unique representation of objects unless they are string objects. Of course, you must not have overridden toString() in your base class.\nexample:You can use this, only for the third case that you mentioned.", "abstract": ""}, {"id": 20052297, "score": 1, "vote": 0, "content": "You should read this article for problems when implementing equals.  To make it short: use this.getClass()==other.getClass() instead of instanceof, because otherwise the equals() relationship will not be transitive (superInstance.equals(subInstance) will be true, but subInstance.equals(superInstance) will be false).", "abstract": ""}, {"id": 20052287, "score": -1, "vote": 0, "content": "The best practice to know objects equality is to override hashcode() and equals() if you maitain objects in a collection you can refer Why do we have to override the equals() method in Java?", "abstract": ""}, {"id": 20052273, "score": -1, "vote": 0, "content": "You can do that with Class.isInstance() method. In your base class, do this. Then you can check Hope this helps.", "abstract": ""}, {"id": 20052221, "score": 9, "vote": 0, "content": "Use instead of instanceof. This will return true only if the two object belong to the same class (it's safe to check if class objects are equal by reference). And after that you may compare the id.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/13779614/check-if-an-object-is-an-instance-of-a-given-class-or-of-a-subclass-of-it", "keywords": [], "tags": ["smalltalk", "pharo"], "question": {"id": 13779614, "title": "Check if an object is an instance of a given class or of a subclass of it", "content": "Is there an easy way to do this in Smalltalk? I'm 80% sure that there is some method but can't find it anywhere. I know that I can use And I know that I can use superclass etc... but I hope that there is something built in :)", "abstract": ""}, "answers": [{"id": 13779790, "score": 6, "vote": 0, "content": "You are right, to check for exact class you use (using identity instead): instance class == SomeClass ifTrue: [] Usefull is also isKindOf: which tests if instance is a class or subclass of given class: (instance isKindOf: SomeClass) ifTrue: [] Nicest and most elegant is to write a testing method in superclass and peer classes, then use it like: instance isSomeClass ifTrue: []", "abstract": ""}, {"id": 13779768, "score": 22, "vote": 0, "content": "To test whether anObject is instance of aClass: To test whether it is an instance of aClass or one of it subclasses:", "abstract": ""}]}]