[{"link": "https://stackoverflow.com/questions/8257714/how-can-i-convert-an-int-to-a-string-in-c", "keywords": [], "tags": ["c", "string", "integer"], "question": {"id": 8257714, "title": "How can I convert an int to a string in C?", "content": "How do you convert an int (integer) to a string? I'm trying to make a function that converts the data of a struct into a string to save it in a file.", "abstract": ""}, "answers": [{"id": 23840699, "score": 45, "vote": 0, "content": "After having looked at various versions of itoa for gcc, the most flexible version I have found that is capable of handling conversions to binary, decimal and hexadecimal, both positive and negative is the fourth version found at http://www.strudel.org.uk/itoa/. While sprintf/snprintf have advantages, they will not handle negative numbers for anything other than decimal conversion. Since the link above is either off-line or no longer active, I've included their 4th version below. (Important Note: This code is GPLv3-licensed, so if you compile something with it, the result must be released under the same terms.)", "abstract": ""}, {"id": 75798494, "score": 0, "vote": 0, "content": "Improved cnicutar answer. Include: Create your number: Calculate length: Then you can store your string as a local variable: or as a pointer: Hope that helps!", "abstract": ""}, {"id": 32213487, "score": 3, "vote": 0, "content": "", "abstract": ""}, {"id": 70477879, "score": 3, "vote": 0, "content": "sprintf is returning the bytes and adds a null byte as well: Output:", "abstract": ""}, {"id": 32495191, "score": 9, "vote": 0, "content": "If you are using GCC, you can use the GNU extension asprintf function.", "abstract": ""}, {"id": 20724968, "score": 14, "vote": 0, "content": "Here's another way.", "abstract": ""}, {"id": 8257754, "score": 163, "vote": 0, "content": "As pointed out in a comment, itoa() is not a standard, so better use the sprintf() approach suggested in the rival answer! You can use the itoa() function to convert your integer value to a string. Here is an example: If you want to output your structure into a file there isn't any need to convert any value beforehand. You can just use the printf format specification to indicate how to output your values and use any of the operators from printf family to output your data.", "abstract": ""}, {"id": 32871108, "score": 9, "vote": 0, "content": "Converting anything to a string should either 1) allocate the resultant string or 2) pass in a char * destination and size.  Sample code below: Both work for all int including INT_MIN.   They provide a consistent output unlike snprintf() which depends on the current locale. Method 1:  Returns NULL on out-of-memory. Method 2:   It returns NULL if the buffer was too small. [Edit] as request by @Alter Mann (CHAR_BIT*sizeof(int_type)-1)*10/33+3 is at least the maximum number of char needed to encode the some signed integer type as a string consisting of an optional negative sign, digits, and a null character.. The number of non-sign bits in a signed integer is no more than CHAR_BIT*sizeof(int_type)-1.  A base-10 representation of a n-bit binary number takes up to n*log10(2) + 1 digits.  10/33 is slightly more than log10(2).  +1 for the sign char and +1 for the null character.  Other fractions could be used like 28/93. Method 3: If one wants to live on the edge and buffer overflow is not a concern, a simple C99 or later solution follows which handles all int. Sample output", "abstract": ""}, {"id": 32819876, "score": 152, "vote": 0, "content": "The short answer is: The longer is: first you need to find out sufficient size. snprintf tells you length if you call it with NULL, 0 as first parameters: Allocate one character more for null-terminator. If works for every format string, so you can convert float or double to string by using \"%g\", you can convert int to hex using \"%x\", and so on.", "abstract": ""}, {"id": 52677014, "score": -4, "vote": 0, "content": "Use function itoa() to convert an integer to a string For example:", "abstract": ""}, {"id": 8257728, "score": 379, "vote": 0, "content": "You can use sprintf to do it, or maybe snprintf if you have it: Where the number of characters (plus terminating char) in the str can be calculated using:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/5765398/whats-the-best-way-to-convert-a-number-to-a-string-in-javascript", "keywords": [], "tags": ["javascript", "string", "performance", "numbers"], "question": {"id": 5765398, "title": "What&#39;s the best way to convert a number to a string in JavaScript?", "content": "What's the \"best\" way to convert a number to a string (in terms of speed advantage, clarity advantage, memory advantage, etc) ? Some examples: String(n) n.toString() \"\"+n n+\"\"", "abstract": ""}, "answers": [{"id": 75106148, "score": 0, "vote": 0, "content": "Just use template literal syntax:", "abstract": ""}, {"id": 68684925, "score": 10, "vote": 0, "content": "I recommended `${expression}` because you don't need to worry about errors. \n\n[undefined,null,NaN,true,false,\"2\",\"\",3].forEach(elem=>{\n  console.log(`${elem}`, typeof(`${elem}`))\n})\n\n/* output\nundefined string\nnull      string\nNaN       string\ntrue      string\nfalse     string\n2         string\n          string\n3         string\n*/\n\n\n Below you can test the speed. but the order will affect the result. (in StackOverflow) you can test it on your platform. \n\nconst testCases = [\n  [\"${n}\", (n) => `${n}`], // \ud83d\udc48\n  ['----', undefined],\n\n  [`\"\" + n`, (n) => \"\" + n],\n  [`'' + n`, (n) => '' + n],\n  [`\\`\\` + n`, (n) => `` + n],\n  [`n + ''`, (n) => n + ''],\n  ['----', undefined],\n\n  [`String(n)`, (n) =>  String(n)],\n  [\"${n}\", (n) => `${n}`], // \ud83d\udc48\n\n  ['----', undefined],\n  [`(n).toString()`, (n) => (n).toString()],\n  [`n.toString()`, (n) => n.toString()],\n\n]\n\nfor (const [name, testFunc] of testCases) {\n  if (testFunc === undefined) {\n    console.log(name)\n    continue\n  }\n  console.time(name)\n  for (const n of [...Array(1000000).keys()]) {\n    testFunc(n)\n  }\n  console.timeEnd(name)\n}\n\n\n", "abstract": ""}, {"id": 59825184, "score": 50, "vote": 0, "content": "The below are the methods to convert an Integer to String in JS. The methods are arranged in the decreasing order of performance. Method 1: Method 2: Method 3: Method 4: Note: You can't directly call toString() on a number. 2.toString() will throw Uncaught SyntaxError: Invalid or unexpected token. (The performance test results are given by @DarckBlezzer in his answer)", "abstract": ""}, {"id": 58152638, "score": 4, "vote": 0, "content": "With number literals, the dot for accessing a property must be distinguished from the decimal dot. This leaves you with the following options if you want to invoke to String() on the number literal 123:", "abstract": ""}, {"id": 23496874, "score": 9, "vote": 0, "content": "If you need to format the result to a specific number of decimal places, for example to represent currency, you need something like the toFixed() method. digits is the number of digits to display after the decimal place.", "abstract": ""}, {"id": 54347170, "score": 2, "vote": 0, "content": ".toString() is the built-in typecasting function, I'm no expert to that details but whenever we compare built-in type casting verse explicit methodologies, built-in workarounds always preferred. ", "abstract": ""}, {"id": 30882869, "score": 40, "vote": 0, "content": "...JavaScript's parser tries to parse\n  the dot notation on a number as a floating point literal. Source", "abstract": ""}, {"id": 53796206, "score": 4, "vote": 0, "content": "The only valid solution for almost all possible existing and future cases (input is number, null, undefined, Symbol, anything else) is String(x). Do not use 3 ways for simple operation, basing on value type assumptions, like \"here I convert definitely number to string and here definitely boolean to string\". Explanation: String(x) handles nulls, undefined, Symbols, [anything] and calls .toString() for objects. '' + x calls .valueOf() on x (casting to number), throws on Symbols, can provide implementation dependent results. x.toString() throws on nulls and undefined. Note: String(x) will still fail on prototype-less objects like Object.create(null). If you don't like strings like 'Hello, undefined' or want to support prototype-less objects, use the following type conversion function:", "abstract": ""}, {"id": 51503252, "score": 11, "vote": 0, "content": "I used https://jsperf.com to create a test case for the following cases: https://jsperf.com/number-string-conversion-speed-comparison As of 24th of July, 2018 the results say that number + '' is the fastest in Chrome, in Firefox that ties with template string literals. Both String(number), and number.toString() are around 95% slower than the fastest option. ", "abstract": ""}, {"id": 51254588, "score": 0, "vote": 0, "content": "It seems similar results when using node.js. I ran this script: and got the following results: Similar times each time I ran it. ", "abstract": ""}, {"id": 50730371, "score": 9, "vote": 0, "content": "I'm going to re-edit this with more data when I have time to, for right now this is fine... Test in nodejs v8.11.2: 2018/06/06 \n\nlet i=0;\r\n    console.time(\"test1\")\r\n    for(;i<10000000;i=i+1){\r\n    \tconst string = \"\" + 1234;\r\n    }\r\n    console.timeEnd(\"test1\")\r\n    \r\n    i=0;\r\n    console.time(\"test1.1\")\r\n    for(;i<10000000;i=i+1){\r\n    \tconst string = '' + 1234;\r\n    }\r\n    console.timeEnd(\"test1.1\")\r\n    \r\n    i=0;\r\n    console.time(\"test1.2\")\r\n    for(;i<10000000;i=i+1){\r\n    \tconst string = `` + 1234;\r\n    }\r\n    console.timeEnd(\"test1.2\")\r\n    \r\n    i=0;\r\n    console.time(\"test1.3\")\r\n    for(;i<10000000;i=i+1){\r\n    \tconst string = 1234 +  '';\r\n    }\r\n    console.timeEnd(\"test1.3\")\r\n    \r\n    \r\n    i=0;\r\n    console.time(\"test2\")\r\n    for(;i<10000000;i=i+1){\r\n    \tconst string = (1234).toString();\r\n    }\r\n    console.timeEnd(\"test2\")\r\n    \r\n    \r\n    i=0;\r\n    console.time(\"test3\")\r\n    for(;i<10000000;i=i+1){\r\n    \tconst string = String(1234);\r\n    }\r\n    console.timeEnd(\"test3\")\r\n    \r\n    \r\n    i=0;\r\n    console.time(\"test4\")\r\n    for(;i<10000000;i=i+1){\r\n    \tconst string = `${1234}`;\r\n    }\r\n    console.timeEnd(\"test4\")\r\n    \r\n    i=0;\r\n    console.time(\"test5\")\r\n    for(;i<10000000;i=i+1){\r\n    \tconst string = 1234..toString();\r\n    }\r\n    console.timeEnd(\"test5\")\r\n    \r\n    i=0;\r\n    console.time(\"test6\")\r\n    for(;i<10000000;i=i+1){\r\n    \tconst string = 1234 .toString();\r\n    }\r\n    console.timeEnd(\"test6\")\n\n\n output ", "abstract": ""}, {"id": 49683606, "score": 0, "vote": 0, "content": "Just come across this recently, method 3 and 4 are not appropriate because how the strings are copied and then put together. For a small program this problem is insignificant, but for any real web application this action where we have to deal with frequency string manipulations can affects the performance and readability.  Here is the link the read.  ", "abstract": ""}, {"id": 49575037, "score": 0, "vote": 0, "content": "You can call Number object and then call toString(). Number.call(null, n).toString() You may use this trick for another javascript native objects.", "abstract": ""}, {"id": 49351493, "score": 48, "vote": 0, "content": "Other answers already covered other options, but I prefer this one: Short, succinct, already used in many other places (if you're using a modern framework / ES version) so it's a safe bet any programmer will understand it. Not that it (usually) matters much, but it also seems to be among the fastest compared to other methods.", "abstract": ""}, {"id": 49270372, "score": 1, "vote": 0, "content": "Method toFixed() will also solves the purpose.", "abstract": ""}, {"id": 48617227, "score": 0, "vote": 0, "content": "We can also use the String constructor. According to this benchmark it's the fastest way to convert a Number to String in Firefox 58 even though it's slower than \n\" + num in the popular browser Google Chrome.", "abstract": ""}, {"id": 45499690, "score": 0, "vote": 0, "content": "If you are curious as to which is the most performant check this out where I compare all the different Number -> String conversions. Looks like 2+'' or 2+\"\" are the fastest. https://jsperf.com/int-2-string", "abstract": ""}, {"id": 5765401, "score": 735, "vote": 0, "content": "like this: Actually, even though I typically do it like this for simple convenience, over 1,000s of iterations it appears for raw speed there is an advantage for .toString() See Performance tests here (not by me, but found when I went to write my own):\nhttp://jsben.ch/#/ghQYR Fastest based on the JSPerf test above: str = num.toString(); It should be noted that the difference in speed is not overly significant when you consider that it can do the conversion any way 1 Million times in 0.1 seconds. Update: The speed seems to differ greatly by browser.  In Chrome num + '' seems to be fastest based on this test http://jsben.ch/#/ghQYR Update 2: Again based on my test above it should be noted that Firefox 20.0.1 executes the .toString() about 100 times slower than the '' + num sample.", "abstract": ""}, {"id": 5765415, "score": 2, "vote": 0, "content": "I think it depends on the situation but anyway you can use the .toString() method as it is very clear to understand.", "abstract": ""}, {"id": 5765406, "score": 497, "vote": 0, "content": "In my opinion n.toString() takes the prize for its clarity, and I don't think it carries any extra overhead. ", "abstract": ""}, {"id": 30823033, "score": 21, "vote": 0, "content": "Tongue-in-cheek obviously: Or in ES6 you could simply use template strings:", "abstract": ""}, {"id": 5765413, "score": 2, "vote": 0, "content": "I like the first two since they're easier to read. I tend to use String(n) but it is just a matter of style than anything else. That is unless you have a line as which is very self explanatory", "abstract": ""}, {"id": 5765477, "score": 1, "vote": 0, "content": "If I had to take everything into consideration, I will suggest following    IMHO, its the fastest way to convert to string. Correct me if I am wrong.", "abstract": ""}, {"id": 5765443, "score": 114, "vote": 0, "content": "Explicit conversions are very clear to someone that's new to the language.  Using type coercion, as others have suggested, leads to ambiguity if a developer is not aware of the coercion rules.  Ultimately developer time is more costly than CPU time, so I'd optimize for the former at the cost of the latter.  That being said, in this case the difference is likely negligible, but if not I'm sure there are some decent JavaScript compressors that will optimize this sort of thing. So, for the above reasons I'd go with: n.toString() or String(n).  String(n) is probably a better choice because it won't fail if n is null or undefined.", "abstract": ""}, {"id": 5765414, "score": 12, "vote": 0, "content": "The simplest way to convert any variable to a string is to add an empty string to that variable.  ", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/75037901/how-to-convert-number-to-string-in-javascript", "keywords": [], "tags": ["javascript", "type-conversion"], "question": {"id": 75037901, "title": "how to convert number to string in JavaScript?", "content": "I want to convert a number to string in JS, which is the best and recommaded way to do that? I have tried the method shared on W3school so far. but want to know the recommaded methods from experts", "abstract": ""}, "answers": [{"id": 75037957, "score": 0, "vote": 0, "content": "I recommend using .toLocaleString if you want pretty formatting, like commas or periods for grouping. However if you know you don't want pretty formatting you should use .toString", "abstract": ""}, {"id": 75037949, "score": 0, "vote": 0, "content": "All of these will work:", "abstract": ""}, {"id": 75037948, "score": 0, "vote": 0, "content": "You can use the built in function: toString():  Example:\nlet number = 3 \nlet stringed_number = number.toString()", "abstract": ""}, {"id": 75037910, "score": 0, "vote": 0, "content": "Seems that var str = '' + num  is the fastest way to convert a number to a string (num being the number variable). (results based on this benchmark: http://jsben.ch/#/ghQYR)", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/1035634/converting-an-integer-to-a-string-in-php", "keywords": [], "tags": ["php", "string", "casting", "type-conversion", "integer"], "question": {"id": 1035634, "title": "Converting an integer to a string in PHP", "content": "Is there a way to convert an integer to a string in PHP?", "abstract": ""}, "answers": [{"id": 14721022, "score": 12, "vote": 0, "content": "Use: Or it could be: Or:", "abstract": ""}, {"id": 29565898, "score": 10, "vote": 0, "content": "Warning: the below answer is based on the wrong premise. Casting 0 number to string always returns string \"0\", making the code provided redundant. All these answers are great, but they all return you an empty string if the value is zero. Try the following:", "abstract": ""}, {"id": 71017430, "score": 0, "vote": 0, "content": "My situation : I'm working ...", "abstract": ""}, {"id": 71436490, "score": -1, "vote": 0, "content": "I tried all the methods above yet I got \"array to string conversion\" error when I embedded the value in another string. If you have the same problem with me try the implode() function.\nexample:", "abstract": ""}, {"id": 1035658, "score": 955, "vote": 0, "content": "You can use the strval() function to convert a number to a string. From a maintenance perspective its obvious what you are trying to do rather than some of the other more esoteric answers.  Of course, it depends on your context.", "abstract": ""}, {"id": 54325809, "score": 0, "vote": 0, "content": "So the echo will be return string.", "abstract": ""}, {"id": 1035671, "score": 12, "vote": 0, "content": "There are a number of ways to \"convert\" an integer to a string in PHP. The traditional computer science way would be to cast the variable as a string: You could also take advantage of PHP's implicit type conversion and string interpolation: Finally, similar to the above, any function that accepts and returns a string could be used to convert and integer. Consider the following: I wouldn't recommend the final option, but I've seen code in the wild that relied on this behavior, so thought I'd pass it along.", "abstract": ""}, {"id": 1035664, "score": 0, "vote": 0, "content": "I would say it depends on the context. strval() or the casting operator (string) could be used. However, in most cases PHP will decide what's good for you if, for example, you use it with echo or printf... One small note: die() needs a string and won't show any int :)", "abstract": ""}, {"id": 1035654, "score": 4, "vote": 0, "content": "You can either use the period operator and concatenate a string to it (and it will be type casted to a string): Or, more correctly, you can just type cast the integer to a string:", "abstract": ""}, {"id": 1035638, "score": 55, "vote": 0, "content": "Now $foo is a string. But, you may want to get used to casting. As casting is the proper way to accomplish something of that sort: Another way is to encapsulate in quotes:", "abstract": ""}, {"id": 15662264, "score": 5, "vote": 0, "content": "There are many possible conversion ways:", "abstract": ""}, {"id": 33625547, "score": -3, "vote": 0, "content": "You can simply use the following:", "abstract": ""}, {"id": 4759370, "score": -5, "vote": 0, "content": "is faster than ", "abstract": ""}, {"id": 1037492, "score": 2, "vote": 0, "content": "As the answers here demonstrates nicely, yes, there are several ways. However, in PHP you rarely actually need to do that. The \"dogmatic way\" to write PHP is to rely on the language's loose typing system, which will transparently coerce the type as needed. For integer values, this is usually without trouble. You should be very careful with floating point values, though.", "abstract": ""}, {"id": 1035651, "score": 113, "vote": 0, "content": "There's many ways to do this. Two examples: See the PHP Manual on Types Juggling for more.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/68529079/how-to-convert-number-to-string", "keywords": [], "tags": ["elm"], "question": {"id": 68529079, "title": "How to convert number to String", "content": "Is there a function like number -> String in Elm which formats number to String? Not looking for specific Int or Float type but a general converting function for \"typeclass\" number.", "abstract": ""}, "answers": [{"id": 70561740, "score": 10, "vote": 0, "content": "Posting this here because this comes up when you google \"elm int to string\". The correct answer for converting an int to a string is super simple: String.fromInt https://package.elm-lang.org/packages/elm/core/latest/String#fromInt", "abstract": ""}, {"id": 68534758, "score": 3, "vote": 0, "content": "While individual methods exist to convert from float/int to string, there is no common method to do so since version 0.19 of elm. As of today, you can use the Debug.toString method to do so. But the debug module does not work for production builds. So, if your end goal is to make a production ready code, you will have to make your own code to typecast, else Debug.toString should work for you.", "abstract": ""}, {"id": 68530990, "score": 5, "vote": 0, "content": "No. Generally the number typeclass exists mostly so that mathematical operators work for both Int and Float. I would recommend not trying to program generically against number in your own code, but just pick the appropriate one (that's usually Float, unless you're counting).", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/61716230/convert-v-model-value-from-number-to-string", "keywords": [], "tags": ["javascript", "vue.js"], "question": {"id": 61716230, "title": "Convert v-model value from number to string", "content": "I am using <q-select> component and inside that i'm sending options that i fetch from API, as value I set id of object, but problem is that it expects string to get and ID is a number and because of that I'm getting error.\nIs it possible to change type of data inside v-model. I've tried to put data.id.toString() inside v-model but then I got error. How can i resolve this?", "abstract": ""}, "answers": [{"id": 61723697, "score": 2, "vote": 0, "content": "You can use a computed method with a getter/setter defined. And then use the computed method as the model You can also consider converting data.id to a string when getting it.", "abstract": ""}, {"id": 61716564, "score": 0, "vote": 0, "content": "I suggest using a computed property for that Your template will be cleaner and stays reactive", "abstract": ""}, {"id": 61716311, "score": 0, "vote": 0, "content": "", "abstract": ""}, {"id": 61716287, "score": 0, "vote": 0, "content": "You cannot apply the method to v-model. One solution would be converting the id to string directly after fetching the data as follows:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/58047748/how-to-convert-number-start-with-0-to-string-equivalent-of-the-value", "keywords": [], "tags": ["javascript"], "question": {"id": 58047748, "title": "How to convert number start with 0 to string equivalent of the value?", "content": "I want to convert a number start with 0 to string equivalent of the value. If I run it logs 12 as expected but if I apply the toString() to a number start with 0 like, it logs 10, why?", "abstract": ""}, "answers": [{"id": 58048022, "score": 3, "vote": 0, "content": "In sloppy mode (the default) numbers starting with 0 are interpreted as being written in octal (base 8) instead of decimal (base 10). If has been like that from the first released version of Javascript, and has this syntax in common with other programming languages. It is confusing, and have lead to many hard to detect buggs. You can enable strict mode by adding \"use strict\" as the first non-comment in your script or function. It removes some of the quirks. It is still possible to write octal numbers in strict mode, but you have to use the same scheme as with hexadecimal and binary: 0o20 is the octal representation of 16 decimal. The same problem can be found with the function paseInt, that takes up to two parameters, where the second is the radix. If not specified, numbers starting with 0 will be treated as octal up to ECMAScript 5, where it was changed to decimal. So if you use parseInt, specify the radix to be sure that you get what you expected. \n\n\"use strict\";\r\n\r\n// Diffrent ways to write the same number:\r\nconst values = [\r\n  0b10000, // binary\r\n  0o20, // octal\r\n  16, // decimal,\r\n  0x10 // hexadecimal\r\n];\r\n\r\nconsole.log(\"As binary:\", values.map( value => value.toString(2)).join());\r\nconsole.log(\"As decimal:\", values.join());\r\nconsole.log(\"As ocal\", values.map( value => value.toString(8)).join());\r\nconsole.log(\"As hexadecimal:\", values.map( value => value.toString(16)).join());\r\nconsole.log(\"As base36:\", values.map( value => value.toString(36)).join());\n\n\n", "abstract": ""}, {"id": 58047967, "score": 1, "vote": 0, "content": "All you have to do is add String to the front of the number that is And if you want it to look like this 0012 all you have to do is", "abstract": ""}, {"id": 58047810, "score": 5, "vote": 0, "content": "Number starting with 0 is interpreted as octal (base-8).", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/7123490/how-compiler-is-converting-integer-to-string-and-vice-versa", "keywords": [], "tags": ["string", "algorithm", "integer"], "question": {"id": 7123490, "title": "How compiler is converting integer to string and vice versa", "content": "Many languages have functions for converting string to integer and vice versa. So what happens there? What algorithm is being executed during conversion? I don't ask in specific language because I think it should be similar in all of them.", "abstract": ""}, "answers": [{"id": 7123710, "score": 17, "vote": 0, "content": "To convert a string to an integer, take each character in turn and if it's in the range '0' through '9', convert it to its decimal equivalent. Usually that's simply subtracting the character value of '0'. Now multiply any previous results by 10 and add the new value. Repeat until there are no digits left. If there was a leading '-' minus sign, invert the result. To convert an integer to a string, start by inverting the number if it is negative. Divide the integer by 10 and save the remainder. Convert the remainder to a character by adding the character value of '0'. Push this to the beginning of the string; now repeat with the value that you obtained from the division. Repeat until the divided value is zero. Put out a leading '-' minus sign if the number started out negative. Here are concrete implementations in Python, which in my opinion is the language closest to pseudo-code.", "abstract": ""}, {"id": 7123674, "score": 1, "vote": 0, "content": "String to integer: Many (most) languages represent strings, on some level or another, as an array (or list) of characters, which are also short integers.  Map the ones corresponding to number characters to their number value.  For example, '0' in ascii is represented by 48.  So you map 48 to 0, 49 to 1, and so on to 9. Starting from the left, you multiply your current total by 10, add the next character's value, and move on.  (You can make a larger or smaller map, change the number you multiply by at each step, and convert strings of any base you like.) Integer to string is a longer process involving base conversion to 10.  I suppose that since most integers have limited bits (32 or 64, usually), you know that it will come to a certain number of characters at most in a string (20?).  So you can set up your own adder and iterate through each place for each bit after calculating its value (2^place).", "abstract": ""}, {"id": 7123602, "score": 1, "vote": 0, "content": "I wouldn't call it an algorithm per se, but depending on the language it will involve the conversion of characters into their integral equivalent. Many languages will either stop on the first character that cannot be represented as an integer (e.g. the letter a), will blindly convert all characters into their ASCII value (e.g. the letter a becomes 97), or will ignore characters that cannot be represented as integers and only convert the ones that can - or return 0 / empty. You have to get more specific on the framework/language to provide more information.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/47811344/best-way-convert-number-to-string-javascript", "keywords": [], "tags": ["javascript", "ecmascript-6"], "question": {"id": 47811344, "title": "Best way convert number to string javascript?", "content": "What is the best way to convert a number to string in javascript?\nI am familiar with these four possibilities:  Example 1: Example 2 Example 3 Example 4 All examples giving the same result, but what is the best option to choose based on Performance? Or is it personal preference?  Thanks for answering.", "abstract": ""}, "answers": [{"id": 47811406, "score": 4, "vote": 0, "content": "The problem with approach #2 is that it doesn\u2019t work if the value is null or undefined.  1st , 3rd and 4th  which are basically equivalent.\n\"\"+value: The plus operator is fine for converting a value when it is surrounded by non-empty strings. As a way for converting a value to string, I find it less descriptive of one\u2019s intentions. But that is a matter of taste, some people prefer this approach to String(value).\nString(value): This approach is nicely explicit: Apply the function String() to value. The only problem is that this function call will confuse some people, especially those coming from Java, because String is also a constructor. ", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/39710778/how-to-implement-tostring-to-convert-a-number-to-a-string", "keywords": [], "tags": ["javascript", "string", "numbers", "tostring"], "question": {"id": 39710778, "title": "How to implement toString to convert a number to a string?", "content": "I was asked during an interview to implement toString() to convert a number into a string.  toString()\nn => s\n123 => \"123\"\n Aside from: How else could toString() be implemented in javascript?", "abstract": ""}, "answers": [{"id": 39711337, "score": 1, "vote": 0, "content": "You can use it as the property name of an object. \n\nfunction toString(value) {\r\n  // Coerces value to a primitive string (or symbol)\r\n  var obj = {};\r\n  obj[value] = true;\r\n  return Object.getOwnPropertyNames(obj)[0];\r\n}\r\nconsole.log(toString(123));  // 123      -> \"123\"\r\nconsole.log(toString(1.23)); // 1.23     -> \"1.23\"\r\nconsole.log(toString(NaN));  // NaN      -> \"NaN\"\r\nconsole.log(Infinity);       // Infinity -> \"Infinity\"\r\nconsole.log(toString(-0));   // -0       -> \"0\"\r\nconsole.log(toString(1e99)); // 1e99     -> \"1e+99\"\n\n\n You can also use DOM attributes: Or join an array And a big etcetera. There are lots of things which internally use the ToString abstract operation.", "abstract": ""}, {"id": 39711201, "score": 0, "vote": 0, "content": "The trick here is to consider a number as a series of digits. This is not an inherent property of numbers, since the base-10 representation that we use is quite arbitrary. But once a number is represented as a series of digits, it is quite easy to convert each digit individually to a string, and concatenate all such strings. EDIT: As pointed out, this only takes integers into consideration (which is probably acceptable for an interview question). Usage:", "abstract": ""}, {"id": 39711349, "score": 0, "vote": 0, "content": "This works for integers. It takes the number modulo 10 and divides it by 10 repeatedly, then adds 48 to the digits and uses String.fromCharCode to get a string value of the digits, then joins everything. \n\nfunction toString(n){\r\n  var minus = (n < 0\r\n      ? \"-\"\r\n      : \"\"),\r\n    result = [];\r\n  n = Math.abs(n);\r\n  while(n > 0){\r\n    result.unshift(n % 10);\r\n    n = Math.floor(n / 10);\r\n  }\r\n  return minus + (result.map(function(d){\r\n    return String.fromCharCode(d + 48);\r\n  })\r\n    .join(\"\") || \"0\");\r\n}\r\n\r\nconsole.log(toString(123123));\r\nconsole.log(toString(999));\r\nconsole.log(toString(0));\r\nconsole.log(toString(-1));\n\n\n", "abstract": ""}, {"id": 39710962, "score": -1, "vote": 0, "content": "If you're using ES6 you could use template literals.", "abstract": ""}]}]