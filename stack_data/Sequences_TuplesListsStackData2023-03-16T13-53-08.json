[{"link": "https://stackoverflow.com/questions/6667201/how-to-define-a-two-dimensional-array", "keywords": [], "tags": ["python", "list", "multidimensional-array"], "question": {"id": 6667201, "title": "How to define a two-dimensional array?", "content": "I want to define a two-dimensional array without an initialized length like this: But this gives an error: IndexError: list index out of range", "abstract": ""}, "answers": [{"id": 51217597, "score": 32, "vote": 0, "content": "Here's the code for a beginner whose coming from C, CPP and Java background Why such a long code, that too in Python you ask? Long back when I was not comfortable with Python, I saw the single line answers for writing 2D matrix and told myself I am not going to use 2-D matrix in Python again. (Those single lines were pretty scary and It didn't give me any information on what Python was doing. Also note that I am not aware of these shorthands.)", "abstract": ""}, {"id": 72668871, "score": -2, "vote": 0, "content": "If you want to create a 2d matrix which dimension is defined by two variables and initialise it with a default value for all its elements. You can use this simple syntax", "abstract": ""}, {"id": 70266624, "score": 2, "vote": 0, "content": "Usually, the go-to module is NumPy:", "abstract": ""}, {"id": 6667288, "score": 1220, "vote": 0, "content": "You're technically trying to index an uninitialized array. You have to first initialize the outer list with lists before adding items; Python calls this\n\"list comprehension\". #You can now add items to the list: Note that the matrix is \"y\" address major, in other words, the \"y index\" comes before the \"x index\". Although you can name them as you wish, I look at it this way to avoid some confusion that could arise with the indexing, if you use \"x\" for both the inner and outer lists, and want a non-square Matrix.", "abstract": ""}, {"id": 67671405, "score": 1, "vote": 0, "content": "User Define function to input Matrix and print", "abstract": ""}, {"id": 57337145, "score": 12, "vote": 0, "content": "You can create an empty two dimensional list by nesting two or more square bracing or third bracket ([], separated by comma) with a square bracing, just like below: Now suppose you want to append 1 to Matrix[0][0] then you type: Now, type Matrix and hit Enter. The output will be: If you entered the following statement instead then the Matrix would be", "abstract": ""}, {"id": 6667361, "score": 466, "vote": 0, "content": "If you really want a matrix, you might be better off using numpy. Matrix operations in numpy most often use an array type with two dimensions. There are many ways to create a new array; one of the most useful is the zeros function, which takes a shape parameter and returns an array of the given shape, with the values initialized to zero: Here are some other ways to create 2-d arrays and matrices (with output removed for compactness): numpy provides a matrix type as well, but it is no longer recommended for any use, and may be removed from numpy in the future.", "abstract": ""}, {"id": 59249350, "score": 2, "vote": 0, "content": "Here is the code snippet for creating a matrix in python: Please suggest if I have missed something.", "abstract": ""}, {"id": 53361725, "score": 6, "vote": 0, "content": "Will be faster than:", "abstract": ""}, {"id": 50668058, "score": 15, "vote": 0, "content": "This is how I usually create 2D arrays in python. I find this syntax easy to remember compared to using two for loops in a list comprehension.", "abstract": ""}, {"id": 45521605, "score": 5, "vote": 0, "content": "If you don't have size information before start then create two one-dimensional lists. Store the entire row in the 1st list. Once done, append list 1 into list 2: Output:", "abstract": ""}, {"id": 54294857, "score": 1, "vote": 0, "content": "In case if you need a matrix with predefined numbers you can use the following code:", "abstract": ""}, {"id": 53955772, "score": 1, "vote": 0, "content": "Try this:", "abstract": ""}, {"id": 48615882, "score": 4, "vote": 0, "content": "by using list :  by using dict:\nyou can also store this info in the hash table for fast searching like  matrix['1'] will give you  result in O(1) time  *nb: you need to deal with a collision in the hash table ", "abstract": ""}, {"id": 46237890, "score": 10, "vote": 0, "content": "Using NumPy you can initialize empty matrix like this: And later append data like this:", "abstract": ""}, {"id": 38369736, "score": 7, "vote": 0, "content": "If you want to be able to think it as a 2D array rather than being forced to think in term of a list of lists (much more natural in my opinion), you can do the following: The result is a list (not a NumPy array), and you can overwrite the individual positions with numbers, strings, whatever.", "abstract": ""}, {"id": 33460217, "score": 7, "vote": 0, "content": "Use: I do think NumPy is the way to go. The above is a generic one if you don't want to use NumPy.", "abstract": ""}, {"id": 31821855, "score": 15, "vote": 0, "content": "Use: The *5 for the first dimension works because at this level the data is immutable.", "abstract": ""}, {"id": 23927979, "score": 91, "vote": 0, "content": "If all you want is a two dimensional container to hold some elements, you could conveniently use a dictionary instead: Then you can do: This works because 1,2 is a tuple, and you're using it as a key to index the dictionary. The result is similar to a dumb sparse matrix. As indicated by osa and Josap Valls, you can also use Matrix = collections.defaultdict(lambda:0) so that the missing elements have a default value of 0. Vatsal further points that this method is probably not very efficient for large matrices and should only be used in non performance-critical parts of the code.", "abstract": ""}, {"id": 22709860, "score": 11, "vote": 0, "content": "I'm on my first Python script, and I was a little confused by the square matrix example so I hope the below example will help you save some time: so that", "abstract": ""}, {"id": 41670727, "score": 7, "vote": 0, "content": "You can define keys and values in two ways: or Result:", "abstract": ""}, {"id": 6667308, "score": 25, "vote": 0, "content": "You should make a list of lists, and the best way is to use nested comprehensions: On your [5][5] example, you are creating a list with an integer \"5\" inside, and try to access its 5th item, and that naturally raises an IndexError because there is no 5th item:", "abstract": ""}, {"id": 38159679, "score": 14, "vote": 0, "content": "A rewrite for easy reading:", "abstract": ""}, {"id": 34090329, "score": 25, "vote": 0, "content": "The accepted answer is good and correct, but it took me a while to understand that I could also use it to create a completely empty array. results in", "abstract": ""}, {"id": 21644823, "score": 2, "vote": 0, "content": "Be careful about this short expression, see full explanation down in @F.J's answer", "abstract": ""}, {"id": 20446414, "score": 13, "vote": 0, "content": "To declare a matrix of zeros (ones): e.g. or\n    numpy.ones((x, y))\ne.g. Even three dimensions are possible.\n(http://www.astro.ufl.edu/~warner/prog/python.html see --> Multi-dimensional arrays)", "abstract": ""}, {"id": 18622403, "score": 8, "vote": 0, "content": "I read in comma separated files like this: The list \"data\" is then a list of lists with index data[row][col]", "abstract": ""}, {"id": 6667529, "score": 392, "vote": 0, "content": "Here is a shorter notation for initializing a list of lists: Unfortunately shortening this to something like 5*[5*[0]] doesn't really work because you end up with 5 copies of the same list, so when you modify one of them they all change, for example:", "abstract": ""}, {"id": 6667352, "score": 49, "vote": 0, "content": "In Python you will be creating a list of lists.  You do not have to declare the dimensions ahead of time, but you can.  For example: Now matrix[0][0] == 2 and matrix[1][0] == 3.  You can also use the list comprehension syntax.  This example uses it twice over to build a \"two-dimensional list\":", "abstract": ""}, {"id": 6667306, "score": 141, "vote": 0, "content": "If you want to create an empty matrix, the correct syntax is And if you want to generate a matrix of size 5 filled with 0, ", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/71875601/how-to-create-a-multidimensional-list-of-a-variable-amount-of-dimensions-in-pyth", "keywords": [], "tags": ["python", "list", "recursion", "multidimensional-array"], "question": {"id": 71875601, "title": "How to create a multidimensional list of a variable amount of dimensions in python?", "content": "I am trying to create a function that will make a multidimensional list taking an input number to choose the amount of dimensions the list will be. This is my code so far: I think this isn't working because the recursion is just putting in the single dimensional list, but I am not sure on that.", "abstract": ""}, "answers": [{"id": 71875657, "score": 3, "vote": 0, "content": "You're overcomplicating it IMO.  The general idea behind recursion is to solve the easiest case first, and then return the result of the more difficult case in terms of an incrementally easier case. For this function, the \"easy case\" is that a 1-dimensional list is [].  The incrementally easier case is that an n-dimensional list is an n-1-dimensional list inside a list.  Hence: If you wanted to complicate it a bit to make it a more interesting example of recursion, you could define a filler value for the 1-dimensional lists and the length of each list:", "abstract": ""}, {"id": 71875671, "score": 1, "vote": 0, "content": "as @Samwise wisely said, you have simpled awesome approuch like his, specifically for your issue,\nyou need to send down nested list instead of appending item and returning it:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/69834922/indexing-and-slicing-a-multi-dimensional-list", "keywords": [], "tags": ["python", "list", "indexing"], "question": {"id": 69834922, "title": "Indexing and slicing a multi-dimensional list", "content": "Suppose I have a nested list (ndlist) similar to an N-D array of arbitrary dimensions (let ndim be the number of dimensions) and a tuple indexes with len(indexes) == ndim. If ndlist was an N-D array I could do the following: What is the equivalent for a list? Note that ndim is arbitrary so I can't hardcode it like this: Here's an example for ndim == 3: ndlist = [[[10, 10], [10, 10]],[[10, 10], [10, 10]]] % 3-D (2x2x2) list with all elements equal to 10 When I know ndim beforehand I can edit the (0,0,0) element of ndlist like this: ndlist[0][0][0] = 11  %changing from 10 to 11 requires 3 [0]s in sequence Now suppose ndims == 4 (4-dimensional list). Editing the the (0,0,0,0) element of ndlist would require something like this: ndlist[0][0][0][0] = 11  %change to 11 requires 4 [0]s in sequence And for arbitrary ndims: ndlist[0][0][0]...[0] = 11  %change to 11 requires ndim [0]s in sequence As you see, I can't index the list that way for the general case where ndim is not known in advance, as it requires to type as many [0] as ndim. If instead of the list I had an array like this: ndarray = np.array(ndlist) Accessing the (0, 0, 0, ... ,0) would not be an issue since I can using a tuple to index all dimensions simultaneously like that: % 3d case indexes = (0,0,0) ndarray[indexes] % 4d case indexes = (0,0,0,0) ndarray[indexes] % n-d case indexes = (0, 0, 0, ... ,0) % I can generate this with code ndarray[indexes] = 11 Is there a way to index a list with a single tuple like that? Even better, can the tuple hold slices instead of indexes? For instance arrays also allow this: ndarray[0:2, 0, 0] = np.array([0, 0]) The only solution have found to my problem is to use recursion to index one dimension at a time. Is there a better solution? Thanks!", "abstract": ""}, "answers": [{"id": 69843533, "score": 0, "vote": 0, "content": "Now I understood the problem. If you are willing to have a function donig that for you it will be easy. Otherwise you'll need to  create your own list type. You will need a function which takes a list and n (unknown) number of elements. The n means you will need *argv The function will get the list and get the ith element in n (argv). Note: The function copies the original list to make sure it's not changed. Note: You will need to handle the index out of range error too. Right now it will raise an error of TypeError: 'blabla' object is not subscriptable. Here you will create a class with any name (let's sat TypedList) which inherits from list and override the __getitem__ method. Here you will need handle the index out of range error too. You are very right that I actually did not answer the question. And Since you already accepted my answer I am going to find a way to do it. My implementation has a small (Actually huge) problem in it. If you use just an integer as the index it will fail. So the code must change as: Now. I must clarify that Python doesn't copy objects you pass during a function call ever. What does that mean? IF you modify the passed object to a function, the object itself will change. Notice how I copied lists first then worked on them. See: https://stackoverflow.com/a/575337/2681662 We are going to get advantage of this with writing a function that actually modifies the passed object: Now the only thing to do is, to somehow manage to make this function a method of our class and use it from __setitem__ Here we have a private method called __set and will be called by __setitem__ to modify self which is a type of list.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/69546932/how-do-i-access-a-multi-dimensional-list-of-tuples", "keywords": [], "tags": ["python", "arrays", "list", "tuples"], "question": {"id": 69546932, "title": "How do I access a multi-dimensional list of tuples?", "content": "I am populating a multi-dimensional (2D) list of NamedTuple structures, like this: I declare an empty 2D list: I then populate the list with the above individual structures in a loop: I am able to fill this 2D list with the tuple structure, and access individual elements: e.g. but I want to be able to access the entire array of IDs (or any other array of the tuple): e.g. so that I can put that entire 2D array as a dataset into an hdf5 file: e.g. Yet, I get this error: AttributeError: 'list' object has no attribute 'ID' I'm at a loss here, and may not be using the optimal structure.", "abstract": ""}, "answers": [{"id": 69547386, "score": 1, "vote": 0, "content": "Accessing an individual property inside that list of lists would require a more explicit expression of how to access the tuples depending on what you need as output.  For example using list comprehensions: The first one (flat list) is equivalent to: The second one (2D) is equivalent to:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/68779250/python-enumerate-a-multidimensional-list", "keywords": [], "tags": ["python", "multidimensional-array", "enumeration"], "question": {"id": 68779250, "title": "Python - enumerate a multidimensional list", "content": "Let's say I have a multidimensional array, foobar: Note that foobar is jagged. The thing I need to do is replace each number in foobar with a tuple containing that number and its exact position in foobar. I also need to be able to do this when the number of dimensions and whether or not foobar is jagged is unknown. Here is something similar, except it only works for 2 dimensions: Is there a user-defined function that can do what I said above?", "abstract": ""}, "answers": [{"id": 68785884, "score": 0, "vote": 0, "content": "So, I saw DarryIG's answer and modified it to fit my style: Credit will go to him. Thanks so much!", "abstract": ""}, {"id": 68779679, "score": 2, "vote": 0, "content": "Recursive generator for an arbitrary number of dimensions Code Test", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/68337075/multiple-lists-or-one-multidimensional-list-for-calculations", "keywords": [], "tags": ["python", "arrays", "physics"], "question": {"id": 68337075, "title": "multiple lists or one multidimensional list for calculations", "content": "Say I have some calculations for physics. I was wondering what the best practice is for initializing arrays to store, for instance, position and velocity data, to which I append values in loops. My question is, should I initialize individual lists/numpy array for each of the information (position, velocity, acceleration) or should I initialize one multidimensional list/numpy array or pandas dataframe to store these data and label the columns. OR Any advice on the best practice of this would be appreciated.", "abstract": ""}, "answers": [{"id": 68337593, "score": 2, "vote": 0, "content": "The most important thing is that you are not allocating space for new numpy arrays on every iteration, since this could result in very poor performance. If you're using your option #2 then note that the size of your array at the start is (3, 0), allowing space for zero elements. A new array would need to be created with enough space to hold your first results. This would repeat on every iteration, becoming more and more costly as the array grows. I recommend one of the two following solutions: Either: Preallocate a numpy array with all the space it will need, and fill it one row at a time Or: Store a series of values in 3 lists and then construct numpy arrays from them after the loop. These can then be concatenated if desired. Perhaps the first is better.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/67795885/saving-a-multi-dimensional-list-in-a-file-python", "keywords": [], "tags": ["python", "numpy", "save", "pickle"], "question": {"id": 67795885, "title": "Saving a multi-dimensional list in a file Python", "content": "I have this list bhs created this way: I need to save the result in a text file. I have tried numpy.savetxt, pickle.dump and open(): open() numpy.savetxt() pickle I am unable to get back the original array/list from all these saved files. When I try to use any of these loaded lists, I get some kind of error: np.loadtxt open() Sample of bhs as a list How can I say my multidimensional list so that I can get back exactly what I started with? Extra: mass_array1 file https://drive.google.com/file/d/1Kdmv1fcbDelEzGmi4BOE4HjUbM7Cg23b/view?usp=sharing And this is how I import it into python: You need to unzip the file into a folder first.", "abstract": ""}, "answers": [{"id": 67796081, "score": 2, "vote": 0, "content": "Use csv module Update: use joblib", "abstract": ""}, {"id": 67797062, "score": 1, "vote": 0, "content": "First, understand what you created: It's a list, with mostly 0s, and one or more 1d arrays. The csv file format is intended for a \"table\", many rows all with the same number of columns. savetxt writes an array, preferably 2d, but it can work with 1d.  But you gave it a list.  So it had to make an array first: The result of saving that with %s is: That array element was been written as the str display.  Such a file is hard, though not impossible, to load with a csv tool.  It is not a proper csv file. pickle can handle almost any python object, including a list of various stuff: The array version of the list in Out[98] can also be saved as an array (with embedded pickling): I question whether you really want or should be creating a list of arrays like this.  In any, case make sure you understand what you've created before trying to save it randomly selected formats.", "abstract": ""}, {"id": 67796066, "score": 0, "vote": 0, "content": "You have better to save it in a .csv (comma separe file so you can easly upload or take it.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/63580114/append-multidimensional-list-in-for-loop-where-indices-vary-with-loop-iteration", "keywords": [], "tags": ["python", "arrays", "list", "for-loop", "indexing"], "question": {"id": 63580114, "title": "Append multidimensional list in for loop where indices vary with loop iteration", "content": "I would like to create a list into which a new value is placed every iteration. The list should have dimensions 3x4 (3 rows, 4 columns). I want to iterate x, and for each x, the list should be filled vertically with three values. (Thus, when x = 1, I would like to fill the first index position [1, 1] of the list with the value percentage_a. percentage_b should then fill column 1 (as x is still 1) and row 2. The same for percentage_c for column 1, row 3). Then x goes up by one, and the second column of the list should be filled and so on.\nI have code as follows: I would wish for output like this: I am open to do this any way (list, numpy)", "abstract": ""}, "answers": [{"id": 63580756, "score": 1, "vote": 0, "content": "Using nested lists: Each inner list is one row. In Python and most other programming languages, the index of arrays/lists/etc. starts with 0, not 1. The result of l will then be:", "abstract": ""}, {"id": 63580522, "score": 1, "vote": 0, "content": "You can do something like this This returns a 2D numpy array Note, you can convert it to a list of lists using l.tolist() or flatten your output to a single list using l.flatten() depending on what you actually need.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/61871681/how-to-create-dynamic-multidimensional-list-in-python", "keywords": [], "tags": ["python", "arrays", "python-3.x", "list"], "question": {"id": 61871681, "title": "How to create dynamic multidimensional list in python", "content": "I know there are a lot of questions like this one, but I haven't found my answer so far. I am trying to dynamically fill a list with other lists, but I don't know why my code doesn't do what I want. My code: What I get: What I realy want: My goal would be, to dynamically add more dimensions arranged like this. Can somebody tell me, what I'm doing wrong? Thanks a lot.", "abstract": ""}, "answers": [{"id": 61871933, "score": 0, "vote": 0, "content": "", "abstract": ""}, {"id": 61871888, "score": 0, "vote": 0, "content": "In your example, x is a list containing three elements (integers).\nWith append, you add a new element. By appending y, you are adding a list as a fourth element (3 integers, one list). If you want to create a list of lists, tread x and y as elements for that, and combine them in a list: list_of_lists will then be [[1, 2, 3], [4, 5, 6]]. You can add another list by appending them: ... which will result in list_of_lists being [[1, 2, 3], [4, 5, 6], [7, 8, 9]].", "abstract": ""}, {"id": 61871886, "score": 0, "vote": 0, "content": "What you want is create a list of lists. You can do:  Actually, if you want to deal with multi-dimensional arrays, you should probably look at the numpy library (https://numpy.org/) ", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/45765223/update-value-in-multidimensional-list-in-python", "keywords": [], "tags": ["python"], "question": {"id": 45765223, "title": "Update value in Multidimensional list in Python", "content": "I have an list like the following When I print line_37_data[0][0] , the value 0 is printed. When I update the list as line_37_data[0][0] = 5, the list gets modified like below How can I can update the value in the list based on the index ? Note :- I don't use NumPy. This is pure plain Python without any libraries. I am using 2.7 and not Python 3", "abstract": ""}, "answers": [{"id": 45765352, "score": 3, "vote": 0, "content": "If you pass in the same list as each element of your outer list, manipulating it will show in each place it appears. If you're just looking to fill a 2d list with zeros, list comprehension would be easy:", "abstract": ""}]}]