[{"link": "https://stackoverflow.com/questions/74448113/testing-python-methods-call-sequence-in-a-multithreaded-context", "keywords": [], "tags": ["python", "multithreading", "unit-testing", "mocking", "tdd"], "question": {"id": 74448113, "title": "Testing Python methods call sequence in a multithreaded context", "content": "I need to check the sequence of calling of some methods of a class.\nI had this need while I was developing using TDD (test driven development), so when I was writing the test for method_1() I would like to be sure that it calls some methods in an precise order. I suppose that my production class A is stored in the following file class_a.py: The __lock attribute is an instance of class threading.Lock and is use to reach a thread safe execution of __atomic_method_1(). I need to write a unit test that checks the sequence of calling of the methods of the class A when it is invoked the method_1(). The check must verify that method_1() calls: My need comes from wanting to make sure that the __atomic_method_1() method runs in a multithreaded context without being interrupted. This is a very useful link, but it doesn't solve my problem. The solution provided by the link is perfect to verify the calling order of a sequence of functions invoked by an other function. The link shows an example where the function under test and the functions called are all contained in a file called module_under_test.\nIn my case, however, I have to verify the calling sequence of methods of a class and this difference prevents to use the solution provided by the link. However I have tried to develop the unit test referring to the link and in this way I have prepared a trace of the test file that I can show below: But I'm not able to complete the method test_call_order(). Thanks", "abstract": ""}, "answers": [{"id": 74472438, "score": 1, "vote": 0, "content": "The solution of @Lenormju is obviously rich of concepts about Mocking and, in my opinion, is preferable than this. In fact I have accepted it.\nHowever I propose an other answer that can be used to solve some testing problem and my specific test case. The test method that I have written is based on the following ideas: The complete test file is the following: One of the problem of this test is that it doesn't create an instance of class A and so it invokes method_1() in a different way respect of the production code. On the other hand this is a specific test that I have to use to check the static structure of the method_1() code so, in my opinion and only in this specific case, the trick could be acceptable.", "abstract": ""}, {"id": 74463473, "score": 1, "vote": 0, "content": "In the question's comments they said that it is not what unit tests are for. Yes, that makes for a brittle tests. But they serve a real use : do I correctly implement locking. You may want to refactor your class so that it is easier to test (and that would be another interesting question). But if you really want to test it, as is, I have a solution for you. What we need is to spy on the three methods self.__lock.acquire, self.__lock.release and self.__atomic_method_1. One way to do it is to wrap a Mock around them, and record the behavior. But just knowing they were called is not sufficient, you want the order between them. So you need multiple spies, which collectively log the actions that took place. To explain better what I did, here is a schema of how things are connected without mocks :  Your SUT has two references : What we want is to observe the calls made to __lock.acquire, __lock.release, __atomic_method_1 and their relative order. The simpler way to do that I could think of is to replace each of these three by \"spy functions\", which records they were being called (simply by appending in a list) then forward the call to the actual function. But then we need these functions to be called, so we will have to mock things. Because they are not \"importable\", we can't mock.patch them. But we have the actual object we want to mock things of, and that is exactly what mock.patch.object is for ! While in the with, the sut.something will get replaced by a mock. So we need two mocks, one for the __atomic_method_1, the other for __lock. As far as I can tell, we won't use __atomic_method_1 in any other way than calling it. So we just want our mock to call our spy method instead. To do that, we can configure it to call a function when it gets called, indicated by \"side_effect\". But there are many other ways we can use our __lock besides acquire-ing and release-ing it. We don't know what the __aotmic_method_1 will do with it. So to be sure, we will set the mock to forward everything to the actual object, which means it wraps it. Which gives us this :  The calls to __lock.acquire and __lock.release are sort of diverted (thanks to mocking) through our spy, while any other still gets through ordinarily. (We could have done without creating a Mock for __aotmic_method_1, and mock.patch.object with the spy function)", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/50872410/how-to-apply-sequence-of-functions-to-an-object", "keywords": [], "tags": ["python", "python-3.x", "class", "scope"], "question": {"id": 50872410, "title": "How to apply sequence of functions to an object?", "content": "Based on a set of instructions in the form of a string, I have to apply certain instructions (fxns) on an object, one after the other. This is a part of a larger system. I've arrived at this point. I need a way to iterate, and return the object's condition at the end of the instructions. I came across this reference, but over there, functions are being applied to a constant initial data to get a list of outputs. In my case however, the object is changing with the iteration. hence the while statement, but I also need an iterate to apply my ith function.  I tried to make a recursive function as well (it was inside a for statement, and it didn't feel right at all), with the base condition being length of instructions reaching 0, (each recursive call carrying out an instruction, till no more left, hence it is also decreasing in complexity), it looks like a good candidate for recursion, and I will appreciate a solution in that manner, if anyone is interested.  fun_args is a list and a list is not callable, actually need something like - fun_args[i](intermediate)", "abstract": ""}, "answers": [{"id": 69120426, "score": 0, "vote": 0, "content": "I think you were pretty close with the idea of a recursion: But why not decode the instruction set outside of the function and pass in the initial object plus the list of transformations? It can turn into a one-liner:", "abstract": ""}, {"id": 50872560, "score": 0, "vote": 0, "content": "The solution is quite simple:", "abstract": ""}, {"id": 50872556, "score": 0, "vote": 0, "content": "If you have a list of functions, you can then apply them one by one:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/72340656/calling-multiple-methods-of-an-object-in-sequence", "keywords": [], "tags": ["python"], "question": {"id": 72340656, "title": "Calling multiple methods of an object in sequence", "content": "I need to do something like this: Is there a way to shorten this? Like: or something?", "abstract": ""}, "answers": [{"id": 72341124, "score": 1, "vote": 0, "content": "For a systematic approach and keeping the integrity of the methods use methodcaller. Compatible with arguments, see doc.", "abstract": ""}, {"id": 72340759, "score": 2, "vote": 0, "content": "You can do this by ensuring that the instance functions (methods) each return a reference to the instance in which they are running (self) Output: Observation: Whilst it can be done, I offer this merely as an answer to the original question. I do not condone the practice", "abstract": ""}, {"id": 72340714, "score": 3, "vote": 0, "content": "You can call a objects method by string using the getattr() function build into python.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/69046518/clean-way-to-run-multiple-sequential-functions-on-the-same-dataset", "keywords": [], "tags": ["python", "function"], "question": {"id": 69046518, "title": "Clean way to run multiple sequential functions on the same dataset", "content": "Using Python, I am running a series of preprocessing functions on a list, like this: Is there a more sophisticated way of laying this out?\nIt gets the job done but it feels like it could be more elegant? Thank you!", "abstract": ""}, "answers": [{"id": 69046706, "score": 2, "vote": 0, "content": "So this reminds a pipeline design pattern. You can use a simple wrapper methods to help with that: And then you can  use:", "abstract": ""}, {"id": 69046616, "score": 1, "vote": 0, "content": "If all functions take the same parameter(s) you can write it:", "abstract": ""}, {"id": 69046575, "score": 1, "vote": 0, "content": "", "abstract": ""}, {"id": 69046557, "score": 1, "vote": 0, "content": "Yes, you can put the function names into a list and iterate over them: This way, if you only need to maintain the list of functions (add, remove, reorder) without changing the code which iterates through them.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/57854621/python-function-execution-order", "keywords": [], "tags": ["python", "python-3.x"], "question": {"id": 57854621, "title": "Python function execution order", "content": "I couldn't find any question related to this subject. But does python execute a function after the previous called function is finished or is there in any way parallel execution? For example: So in this example I would like to know if I can always be sure that function b is called after function a is finished, even if function a is a very long script? And what is the defenition of this, so I can look up documentation regarding this matter. Thanks!!", "abstract": ""}, "answers": [{"id": 63376132, "score": 0, "vote": 0, "content": "In python functions are by default executed in the order they appear.\nHowever if you call them in a different order they will execute as such.\nSo in your example then b() will execute before a()", "abstract": ""}, {"id": 57855668, "score": 3, "vote": 0, "content": "TLDR: b will only ever run after a is exited. Each Python thread will only ever execute one thing at a time and respect ordering of expressions and statements. For the most part, this means executing \"top-to-bottom\", though function definitions, control flow and other elements can affect execution order. Ordering is preserved in any case, however. Strictly speaking, the Python language only defines the execution order of expressions. Python evaluates expressions from left to right. Notice that while\n  evaluating an assignment, the right-hand side is evaluated before the\n  left-hand side. Neither simple statements nor compound statements define an evaluation order. However, Python is defined based on a byte code interpreting virtual machine, and the reference implementation is based on a stackbased bytecode evaluation loop. All major implementations of Python preserve the observable behaviour of executing one statement after the other.", "abstract": ""}, {"id": 57854808, "score": 0, "vote": 0, "content": "There is no parallel execution of functions in python.\nThe above functions will be executed in the same sequence that they were called in regardless of the amount of computation workload of either of the functions.", "abstract": ""}, {"id": 57854714, "score": 2, "vote": 0, "content": "Defining the function doesn't mean its execution.\nSince you defined a first, the function object for a will be created first, so as for there calls. You can take it as execution timeline starting from top to bottom.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/55388288/how-to-ensure-functions-are-run-in-specific-order", "keywords": [], "tags": ["python", "function", "class", "design-patterns"], "question": {"id": 55388288, "title": "How to ensure functions are run in specific order?", "content": "Im relatively new to python design patterns but I want to ensure my code is as understandable and flexible as possible. Here is an example: Each function must run in this order. In this particular example the order should be very obvious. But in more complex modules there can be branching paths and it can be unclear without extensive documentation which order the functions should be run in. It is simple enough to just wrap the module in another function that applies the functions in order but that seems to make a needlessly complex function with many arguments that violates single responsibility.  I've also tried to wrap each function in a class that returns the next class in the sequence which has the appropriate branching methods. This has the advantage that the order of the code is implied in the design of module and methods are only callable at appropriate times. This leads to many many classes, most with just one method where there are no branches. Ive been warned that this is a bad design pattern. Is there a best way to ensure that code runs in a specific order and that that order is obvious from the design of the code?", "abstract": ""}, "answers": [{"id": 55406669, "score": 0, "vote": 0, "content": "You are already using the common method to deal with call of functions order: pass a token from a function to another: Usually, tokens are also useful results. In your example: you won't call transform_data if you don't have data to give to it: data is the token0. Thus, transform_data will be called after query_data. But I think the real problem you are dealing with is different: you fear that the user gives the wrong input to the next function, and that the function might accept it and return a wrong result: Im just concerned that in a confusing process it would be difficult to trace whether or not you have a valid input... The sparse matrix is an invalid input to one model type but valid for another (comments) In statically typed languages, it won't (generally) happen, because the program won't compile if you give a rabbit when a cat is expected. In python, with the duck typing, it's not so easy. Let's see how you can enforce this: This by far the best solution. Every one is a grown-up here. Don't worry too much. You can use Python typing abilities for human information. This is a variation on Defensive programming. If needed, wrap functions you don't own: Use exceptions and avoid try... except block since a fail fast is better here. This won't be enough sometimes. Imagine you have a square matrix: how do you check if it was transposed before the next function call? It is simple enough to just wrap the module in another function that applies the functions in order but that seems to make a needlessly complex function with many arguments that violates single responsibility.  You get something like that: As you stated, the full_process method has a lot of mixed parameters. The usual way to deal with this in Python is to use default values: It becomes readable, unless you have different parameters each time: This will solve the transposed matrix example above if the transpose function is one of the functions. Beware: just group the parts without branches. Do not write something like that: It's very hard to read, to maintain, and this can lead to a combinatorial explosion! I add this for the record, but I don't think this is a good pratice except in some specific cases. This is similar to what you've tried with classes, but with functions. I focus on the two lines:  If you want to ensure that the user will call transform_data with the return value of query_data, you can return a function: The code is now: Obviously, if you try to generalize this, you'll need a wrapper by step and you limit the branching possibilities. Is there a best way to ensure that code runs in a specific order and that that order is obvious from the design of the code? Remember that Python foster every programmer to be responsible. Use methods that enforce the order of function calls only if needed.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/55401522/calling-class-object-methods-in-sequence", "keywords": [], "tags": ["python"], "question": {"id": 55401522, "title": "Calling class/ object methods in sequence", "content": "Is there a way to call class/ object methods in a sequence without writing every time the \"class.method\" or \"object.method\"?  ", "abstract": ""}, "answers": [{"id": 55401653, "score": 1, "vote": 0, "content": "You can store the function objects in a list so that you can iterate through the list to call the function objects instead:", "abstract": ""}, {"id": 55401642, "score": 0, "vote": 0, "content": "One way would be to make it a fluid design, and return the class from each classmethod: Now, you can chain the function calls: Will this design meet your need, and go along your work is highly dependent on your code.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/46293228/enforce-a-sequence-for-calling-methods-in-a-class", "keywords": [], "tags": ["python"], "question": {"id": 46293228, "title": "Enforce a sequence for calling methods in a class", "content": "Lets say we want to implement a functionality using a class What's the best way to make sure that generate_query() has been called before send_query(), ofcourse vice versa doesn't make sense. It's important because simply mentioning in the API documentation to call another method before you've called send_query() is another thing, but checking it explicitly in the code in send_query() that generate_query() has been called before is a good practice IMO. I am expecting a solution like if generate_query() has not been called, we raise an exception or so. There was a nice pythonic way to do this, I had read somewhere, but I forgot the source and the solution both. Help is appreciated!", "abstract": ""}, "answers": [{"id": 51708475, "score": 1, "vote": 0, "content": "I've come up with a base class you can inherit from to enforce method call order (tested in Python 2.7 and 3.6): Be warned, I don't fully understand how this works (I've managed to stop __getattribute__ from causing infinite recursion, but I don't understand what caused it in the first place, and I don't understand why I have to use FunctionType in one place and MethodType in another). It passed my minimal testing (Python 2.7 and 3.6), but you'll want to make sure you test it as well. All you need to do with your class is make it inherit from Sequenced, and modify its __init__ method like so: The base class allows your class to contain other methods (sequencing is only enforced on methods within the _method_sequence list). _method_sequence can contain duplicates if you want methods to be called more than once. In the case of a sequenced method being called out of sequence, or attempting to use a sequenced method after already having gone through the list, RuntimeError is raised. It's possible to modify the base class so that sequence methods can be called repeatedly once available, but I'll leave that as an exercise to the reader.", "abstract": ""}, {"id": 46293360, "score": 0, "vote": 0, "content": "One option could be to use boolean flags. This approach is simple, but not very clean. I would advice you to try to reconstruct the class and methods. Requiring methods to run in a particular order is prone for errors, especially if it is not documented.", "abstract": ""}, {"id": 46293285, "score": 0, "vote": 0, "content": "My idea would be to keep a instance variable name flag which will be True,if the generate_query is called, and if flag is false, it means that generate_query is not called and so, you will call the generate_query inside send_query or show a message.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/45025005/python-function-calling-order", "keywords": [], "tags": ["python", "call", "interpreter"], "question": {"id": 45025005, "title": "Python function calling order", "content": "How does Python \"read in\" a program when you run it? For example, I don't understand why there wouldn't be a NameError: name 'cough' is not defined in the below code: Basically, my question can also be stated as why do the above and below programs output the same thing:", "abstract": ""}, "answers": [{"id": 45025059, "score": 11, "vote": 0, "content": "Python is an interpreted language which is executed statement by statement \n(thanks to viraptor's tip: when compiling to bytecode it happens on whole file + per function) In this case below the program reads line by line and knows that the function cough() and main() are defined. and later when main() is called Python knows what it is and when main() calls cough() Python knows what it is as well. In this other case (below) it is the same thing. just that Python learns what main() function is before cough(). Here you might wonder: \"why won't python throw an error since it doesn't know what caugh() is inside main() ? \" Good question my friend. But as long as your function is defined before you call it everything is fine. Because remember Python won't \"check\" if a function is defined until you call it. so in this case even tho cough() is not defined when python is reading function main() it is ok because we didn't call main() until after cough() is defined below. Hope this helps you understand Python better.", "abstract": ""}, {"id": 45025122, "score": 1, "vote": 0, "content": "When Python encounters a function while executing your source code, it does not immediately run the function. Rather, it compiles the function into an executable code object, and waits until you actually call the function.  This means the only time Python checks that cough() is really defined, is when you call main(). And since Python does find a cough function when main is called, it does not raise an error. In other-words: Python does not verify the names used in function actually exist until run-time, so you so allowed to use currently undefined variable names. This is the same reason a function such as this doesn't raise an error when defined, but it does during run-time: Also note that if you try to call main before cough has been defined, you will get an error: This shows that Python relies on every name in your function to have already been defined whether globally or locally, before you attempt to use them.", "abstract": ""}, {"id": 45025133, "score": 0, "vote": 0, "content": "That's because the real execution code is here if name == 'main':\n    main() when main() is called, both main and cough have been defined", "abstract": ""}, {"id": 45025114, "score": 2, "vote": 0, "content": "The piece of code preventing the error to happen is this one: because you are putting it at the end of the code, after python read all the code above. \nIf you try to write something like  All you are going to get is this:", "abstract": ""}, {"id": 45025042, "score": 0, "vote": 0, "content": "Python reads from the top of your script to the bottom. In both examples, the cough() function is called after it has been defined. When you defined main() with cough() inside, the cough() function is not actually run. It is not run until the last line - that is after they have already been defined. ", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/23434852/how-can-i-call-a-sequence-of-functions-until-the-return-value-meets-some-conditi", "keywords": [], "tags": ["python", "design-patterns"], "question": {"id": 23434852, "title": "How can I call a sequence of functions until the return value meets some condition?", "content": "Sometimes I find myself writing code like this: That's pretty ugly. Of course, some people like to leave off some of that syntax: But that's not much of an improvement; there's still a ton of duplicated code here, and it's still ugly.   I looked into using the built-in iter() with a sentinel value, but in this case the None value is being used to signal that the loop should keep going, as opposed to a sentinel which is used to signal that the loop should terminate. Are there any other (sane) techniques in Python for implementing this sort of \"keep trying until you find something that works\" pattern? I should clarify that \"return value meets some condition\" is not limited to cases where the condition is if bool(result) is True as in the example. It could be that the list of possible analysis functions each produce some coefficient measuring the degree of success (e.g. an R-squared value), and you want to set a minimum threshold for acceptance. Therefore, a general solution should not inherently rely on the truth value of the result.", "abstract": ""}, "answers": [{"id": 23435432, "score": 8, "vote": 0, "content": "When the number of total functions is a) known, and b) small, and the test condition is based entirely on the truth value of the return, it's possible to simply use or as Grapsus suggested: Because Python's boolean operators short-circuit, the functions are executed from right to left until one of them produces a return value evaluated as True, at which point the assignment is made to result and the remaining functions are not evaluated; or until you run out of functions, and result is assigned False. When the number of total functions is a) unknown, or b) very large, a one-liner generator comprehension method works, as Bitwise suggested: This has the additional advantage over option #1 that you can use any <test-condition> you wish, instead of relying only on truth value. Each time .next() is called: A weakness of this method is that nested comprehensions can be less intuitive than their multi-line equivalents. Also, if the inner generator is exhausted without ever satisfying the test condition, .next() raises a StopIteration which must be handled (in a try-except block) or prevented (by ensuring the last function will always \"succeed\"). Since we can place callable functions in a list, one option is to explicitly list the functions you want to \"try\" in the order they should be used, and then iterate through that list: Advantages: Fixes the problem of repeated code, it's more clear that you're engaged in an iterative process, and it short-circuits (doesn't continue executing functions after it finds a \"good\" result). This could also be written with Python's for ... else syntax:*  The advantage here is that the different ways to exit the function are identified, which could be useful if you want complete failure of the analyse() function to return something other than None, or to raise an exception. Otherwise, it's just longer and more esoteric. *As described in \"Transforming Code into Beautiful, Idiomatic Python\", starting @15:50.", "abstract": ""}, {"id": 23435485, "score": 3, "vote": 0, "content": "This is pretty pythonic: The idea is to use generators so you do lazy evaluation instead of evaluating all functions. Note that you can change the condition/funcs to be whatever you like, so this is more robust than the or solution proposed by Grapsus. This is a good example why generators are powerful in Python. A more detailed description of how this works: We ask this generator for a single element. The outer generator then asks the inner generator (f(d) for f in funcs) for a single element, and evaluates it. If it passes the condition then we are done and it exits, otherwise it continues asking the inner generator for elements.", "abstract": ""}, {"id": 23435243, "score": 6, "vote": 0, "content": "If the number of functions is not too high, why not use the or operator ? It will only apply the functions until one of them returns something not False.", "abstract": ""}]}]