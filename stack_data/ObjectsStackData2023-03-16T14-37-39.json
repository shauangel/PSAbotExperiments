[{"link": "https://stackoverflow.com/questions/2709821/what-is-the-purpose-of-the-self-parameter-why-is-it-needed", "keywords": [], "tags": ["python", "class", "oop", "self"], "question": {"id": 2709821, "title": "What is the purpose of the `self` parameter? Why is it needed?", "content": "Consider this example: I know that self refers to the specific instance of MyClass. But why must func explicitly include self as a parameter? Why do we need to use self in the method's code? Some other languages make this implicit, or use special syntax instead. For a language-agnostic consideration of the design decision, see What is the advantage of having this/self pointer mandatory explicit?. To close debugging questions where OP omitted a self parameter for a method and got a TypeError, use TypeError: method() takes 1 positional argument but 2 were given instead. If OP omitted self. in the body of the method and got a NameError, consider How can I call a function within a class?.", "abstract": ""}, "answers": [{"id": 21366809, "score": 604, "vote": 0, "content": "Let's say you have a class ClassA which contains a method methodA defined as: and objectA is an instance of this class. Now when objectA.methodA(arg1, arg2) is called, python internally converts it for you as: The self variable refers to the object itself.", "abstract": ""}, {"id": 2709832, "score": 776, "vote": 0, "content": "The reason you need to use self. is because Python does not use special syntax to refer to instance attributes. Python decided to do methods in a way that makes the instance to which the method belongs be passed automatically, but not received automatically: the first parameter of methods is the instance the method is called on. That makes methods entirely the same as functions, and leaves the actual name to use up to you (although self is the convention, and people will generally frown at you when you use something else.) self is not special to the code, it's just another object. Python could have done something else to distinguish normal names from attributes -- special syntax like Ruby has, or requiring declarations like C++ and Java do, or perhaps something  yet more different -- but it didn't. Python's all for making things explicit, making it obvious what's what, and although it doesn't do it entirely everywhere, it does do it for instance attributes. That's why assigning to an instance attribute needs to know what instance to assign to, and that's why it needs self..", "abstract": ""}, {"id": 67015236, "score": 1, "vote": 0, "content": "The word 'self' refers to instance of a class", "abstract": ""}, {"id": 65461903, "score": 0, "vote": 0, "content": "my little 2 cents In this class Person, we defined out init method with the self and interesting thing to notice here is the memory location of both the self and instance variable p is same <__main__.Person object at 0x106a78fd0> so as explained in above, both self and instance variable are same object.", "abstract": ""}, {"id": 63320527, "score": 2, "vote": 0, "content": "\"self\" keyword holds the reference of class and it is upto you if you want to use it or not but if you notice, whenever you create a new method in python, python automatically write self keyword for you. If you do some R&D, you will notice that if you create say two methods in a class and try to call one inside another, it does not recognize method unless you add self (reference of class). Below code throws unresolvable reference error. Now let see below example Now when you create object of class testA, you can call method m1() using class object like this as method m1() has included self keyword But if you want to call method m2(), because is has no self reference so you can call m2() directly using class name like below But keep in practice to live with self keyword as there are other benefits too of it like creating global variable inside and so on.", "abstract": ""}, {"id": 62536337, "score": 0, "vote": 0, "content": "I would say for Python at least, the self parameter can be thought of as a placeholder.\nTake a look at this: Self in this case and a lot of others was used as a method to say store the name value. However, after that, we use the p1 to assign it to the class we're using. Then when we print it we use the same p1 keyword. Hope this helps for Python!", "abstract": ""}, {"id": 26943812, "score": 8, "vote": 0, "content": "Take a look at the following example, which clearly explains the purpose of self self is used/needed to distinguish between instances. Source: self variable in python explained - Pythontips", "abstract": ""}, {"id": 60412005, "score": 0, "vote": 0, "content": "from the docs,  the special thing about methods is that the instance object is passed as the first argument of the function. In our example, the call x.f() is exactly equivalent to MyClass.f(x). In general, calling a method with a list of n arguments is equivalent to calling the corresponding function with an argument list that is created by inserting the method\u2019s instance object before the first argument. preceding this the related snippet, x = MyClass()\n", "abstract": ""}, {"id": 58585068, "score": 3, "vote": 0, "content": "self is acting as like current object name or instance of class .", "abstract": ""}, {"id": 56279547, "score": 1, "vote": 0, "content": "There was just a question should self be implicit or explicit.\nGuido van Rossum resolved this question saying self has to stay. If we would just stick to functional programming we would not need self.\nOnce we enter the Python OOP we find self there. Here is the typical use case class C with the method m1 This program will output: So self holds the memory address of the class instance.\nThe purpose of self would be to hold the reference for instance methods and for us to have explicit access to that reference.      Note there are three different types of class methods: ", "abstract": ""}, {"id": 51631485, "score": 8, "vote": 0, "content": "The use of the argument, conventionally called self isn't as hard to understand, as is why is it necessary? Or as to why explicitly mention it? That, I suppose, is a bigger question for most users who look up this question, or if it is not, they will certainly have the same question as they move forward learning python. I recommend them to read these couple of blogs: 1: Use of self explained Note that it is not a keyword. The first argument of every class method, including init, is always a reference to the current instance of the class. By convention, this argument is always named self. In the init method, self refers to the newly created object; in other class methods, it refers to the instance whose method was called. For example the below code is the same as the above code. 2: Why do we have it this way and why can we not eliminate it as an argument, like Java, and have a keyword instead Another thing I would like to add is, an optional self argument allows me to declare static methods inside a class, by not writing self. Code examples: PS:This works only in Python 3.x. In previous versions, you have to explicitly add @staticmethod decorator, otherwise self argument is obligatory. ", "abstract": ""}, {"id": 48219699, "score": 13, "vote": 0, "content": "First of all, self is a conventional name, you could put anything else (being coherent) in its stead. It refers to the object itself, so when you are using it, you are declaring that .name and .age are properties of the Student objects (note, not of the Student class) you are going to create. Code is here ", "abstract": ""}, {"id": 30442095, "score": 14, "vote": 0, "content": "Python is not a language built for Object Oriented Programming unlike Java or C++.  When calling a static method in Python, one simply writes a method with regular arguments inside it.  However, an object method, which requires you to make a variable, which is an Animal, in this case, needs the self argument The self method is also used to refer to a variable field within the class.  In this case, self is referring to the animalName variable of the entire class. REMEMBER: If you have a variable within a method, self will not work. That variable is simply existent only while that method is running. For defining fields (the variables of the entire class), you have to define them OUTSIDE the class methods.  If you don't understand a single word of what I am saying, then Google \"Object Oriented Programming.\" Once you understand this, you won't even need to ask that question :).", "abstract": ""}, {"id": 2725996, "score": 440, "vote": 0, "content": "Let\u2019s take a simple vector class: We want to have a method which calculates the length. What would it look like if we wanted to define it inside the class? What should it look like when we were to define it as a global method/function? So the whole structure stays the same. How can me make use of this? If we assume for a moment that we hadn\u2019t written a length method for our Vector class, we could do this: This works because the first parameter of length_global, can be re-used as the self parameter in length_new. This would not be possible without an explicit self. Another way of understanding the need for the explicit self is to see where Python adds some syntactical sugar. When you keep in mind, that basically, a call like is internally transformed to it is easy to see where the self fits in. You don't actually write instance methods in Python; what you write is class methods which must take an instance as a first parameter. And therefore, you\u2019ll have to place the instance parameter somewhere explicitly.", "abstract": ""}, {"id": 12201574, "score": 18, "vote": 0, "content": "Its use is similar to the use of this keyword in Java, i.e. to give a reference to the current object.", "abstract": ""}, {"id": 34750920, "score": 8, "vote": 0, "content": "I'm surprised nobody has brought up Lua. Lua also uses the 'self' variable however it can be omitted but still used. C++ does the same with 'this'. I don't see any reason to have to declare 'self' in each function but you should still be able to use it just like you can with lua and C++. For a language that prides itself on being brief it's odd that it requires you to declare the self variable.", "abstract": ""}, {"id": 32243243, "score": 5, "vote": 0, "content": "Is because by the way python is designed the alternatives would hardly work. Python is designed to allow methods or functions to be defined in a context where both implicit this (a-la Java/C++) or explicit @ (a-la ruby) wouldn't work. Let's have an example with the explicit approach with python conventions: Now the fubar function wouldn't work since it would assume that self is a global variable (and in frob as well). The alternative would be to execute method's with a replaced global scope (where self is the object). The implicit approach would be This would mean that myX would be interpreted as a local variable in fubar (and in frob as well). The alternative here would be to execute methods with a replaced local scope which is retained between calls, but that would remove the posibility of method local variables. However the current situation works out well: here when called as a method frob will receive the object on which it's called via the self parameter, and fubar can still be called with an object as parameter and work the same (it is the same as C.frob I think).", "abstract": ""}, {"id": 31096552, "score": 248, "vote": 0, "content": "When objects are instantiated, the object itself is passed into the self parameter.   Because of this, the object\u2019s data is bound to the object. Below is an example of how you might like to visualize what each object\u2019s data might look. Notice how \u2018self\u2019 is replaced with the objects name. I'm not saying this example diagram below is wholly accurate but it hopefully with serve a purpose in visualizing the use of self.   The Object is passed into the self parameter so that the object can keep hold of its own data. Although this may not be wholly accurate, think of the process of instantiating an object like this: When an object is made it uses the class as a template for its own data and methods. Without passing it's own name into the self parameter, the attributes and methods in the class would remain as a general template and would not be referenced to (belong to) the object. So by passing the object's name into the self parameter it means that if 100 objects are instantiated from the one class, they can all keep track of their own data and methods. See the illustration below: ", "abstract": ""}, {"id": 21367245, "score": 3, "vote": 0, "content": "In the __init__ method, self refers to the newly created object; in other class methods, it refers to the instance whose method was called. self, as a name, is just a convention, call it as you want ! but when using it, for example to delete the object, you have to use the same name: __del__(var), where var was used in the __init__(var,[...]) You should take a look at cls too, to have the bigger picture. This post could be helpful.", "abstract": ""}, {"id": 18278904, "score": 11, "vote": 0, "content": "It\u2019s there to follow the Python zen \u201cexplicit is better than implicit\u201d. It\u2019s indeed a reference to your class object. In Java and PHP, for example, it's called this. If user_type_name is a field on your model you access it by self.user_type_name.", "abstract": ""}, {"id": 2709857, "score": 22, "vote": 0, "content": "As well as all the other reasons already stated, it allows for easier access to overridden methods; you can call Class.some_method(inst). An example of where it\u2019s useful:", "abstract": ""}, {"id": 6433556, "score": 46, "vote": 0, "content": "I will demonstrate with code that does not use classes: Classes are just a way to avoid passing in this \"state\" thing all the time (and other nice things like initializing, class composition, the rarely-needed metaclasses, and supporting custom methods to override operators). Now let's demonstrate the above code using the built-in python class machinery, to show how it's basically the same thing. [migrated my answer from duplicate closed question]", "abstract": ""}, {"id": 2714920, "score": 86, "vote": 0, "content": "I like this example:", "abstract": ""}, {"id": 2709847, "score": 23, "vote": 0, "content": "The following excerpts are from the Python documentation about self: As in Modula-3, there are no shorthands [in Python] for referencing the object\u2019s members from its methods: the method function is declared with an explicit first argument representing the object, which is provided implicitly by the call. Often, the first argument of a method is called self. This is nothing more than a convention: the name self has absolutely no special meaning to Python. Note, however, that by not following the convention your code may be less readable to other Python programmers, and it is also conceivable that a class browser program might be written that relies upon such a convention. For more information, see the Python documentation tutorial on classes.", "abstract": ""}, {"id": 2709836, "score": 11, "vote": 0, "content": "self is an object reference to the object itself, therefore, they are same.\nPython methods are not called in the context of the object itself.\nself in Python may be used to deal with custom object models or something.", "abstract": ""}, {"id": 2709828, "score": 0, "vote": 0, "content": "it's an explicit reference to the class instance object. ", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/73696678/usage-of-self-in-python-leetcode-problem", "keywords": [], "tags": ["python"], "question": {"id": 73696678, "title": "Usage of &quot;self&quot; in Python leetcode problem", "content": "I was working on 109. Convert Sorted List to Binary Search Tree on leetcode, and I came across a solution that I mostly understand, aside from the use of self. The solution: I get confused on the use of self.head = head. I understand self is used to indicate or specify the current instance of a class, and is used to access variables of said class. My current understanding of how this is working is that self.head is being defined as a global variable (outside the scope of recursion(start,end)) that points to the object head. I don't understand why self needs to be used, and why we can't just say something like copyOfHead = head instead of self.copyOfHead = head. I'm sure I'm getting some things wrong here - can somebody help me better understand the what and why of using self. in this instance?", "abstract": ""}, "answers": [{"id": 73697061, "score": 0, "vote": 0, "content": "It's just providing a global variable so that recursion (which will be called many times) can use it to store state between calls. Leetcode is designed so that you have to use the class wrapper, but for this algorithm you could have easily written: Which I think makes it clear that the object-oriented stuff doesn't matter, it's more about being a global variable. However, in your example, recursion is inside sortedListToBST, so I think it could have actually accessed head already. So I think using self was unnecessary and the author didn't realize it. In functional programming terms self.head allows recursion to have side-effects. You could also eliminate the need for this global variable by just passing head in the arguments of recursion.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/65639571/what-is-the-actual-use-of-self-in-init-in-python", "keywords": [], "tags": ["python"], "question": {"id": 65639571, "title": "What is the actual use of self in init in python?", "content": "", "abstract": ""}, "answers": [{"id": 65639640, "score": 1, "vote": 0, "content": "Imagine you have: When you create a class like this, the self points to an instance. Doing print(instance1.print_1() will print \"hello\", and print(instance2.print_1() will print \"bye\" So, self is a way to differentiate and manage multiple instances of the same class. And different instances will have its own set of different variables.", "abstract": ""}, {"id": 65639617, "score": -1, "vote": 0, "content": "init is the instance of your class. When a class is called this method will be invoked first with the relevant arguments needs to be passed. self.minutes = minutes you are storing the minutes parameter to a new class variable reference called self.minutes. By convention we use self as the first parameter.", "abstract": ""}, {"id": 65639599, "score": 4, "vote": 0, "content": "self represents the instance of the class. Therefore, using self.hours and self.minutes you can set the instance attributes of the object of class Time.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/73242723/variables-inside-constructor-without-self-python", "keywords": [], "tags": ["python", "oop", "constructor", "self"], "question": {"id": 73242723, "title": "Variables inside constructor without &quot;self&quot; - Python", "content": "I am trying to understand whether declaring variables inside constructors is an ok practice. I only need these variables inside the constructor. I am asking this because most of the times I've seen constructors they only contained self variables. I've tried to find an answer on the internet but had no luck. Here is an example code Is there anything wrong with the above code? If yes, what?\nThank you!", "abstract": ""}, "answers": [{"id": 73243066, "score": 1, "vote": 0, "content": "From a design standpoint, Patient.__init__ is doing too much. I would keep __init__ as simple as possible: The caller of __init__ is responsible for producing that list of Image values. However, that doesn't mean your user is the one calling __init__. You can define a class method to handle the messy details of extracting images from a path, and calling __init__. (Note it gets less messy if you use the pathlib module.) Note that Image itself seems to take this approach: you aren't constructing an instance of Image directly, but using a class method to extract the image data from a file.", "abstract": ""}, {"id": 73242747, "score": 2, "vote": 0, "content": "__init__ is just a normal function that has a special purpose (initializing the newly created object). You can do (almost) whatever you like in there. You typically see lines like self.name = arg because assignments like these are often required to set up the internal state of the object. It's perfectly fine to have local variables though, and if you find they make your code cleaner, use them.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/70935905/how-does-the-self-work-in-this-python-code", "keywords": [], "tags": ["python", "self"], "question": {"id": 70935905, "title": "How does the &quot;self&quot; work in this python code", "content": "Have two simple python codes, both are working. But no sure what is the \"self\" in there that makes the difference. When to use and when not to use \"self\"?", "abstract": ""}, "answers": [{"id": 70935921, "score": 0, "vote": 0, "content": "In the first snippet, myCar refers to the class car, and method1 appears to be being used as a static method of that class. In the second snippet, myCar refers to an instance of the class car, and method1 is an instance method -- the typical usage. Instance methods receive as a first argument the instance calling the method. Conceptually, the difference is that in the second snippet you're referring to a car and in the first snippet you're referring to the concept of cars in general.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/69937416/passing-in-self-as-a-parameter-in-function-call-in-a-class-python", "keywords": [], "tags": ["python", "class"], "question": {"id": 69937416, "title": "Passing in &quot;self&quot; as a parameter in function call in a class (Python)", "content": "I defined a class and within that class, created some methods. In one of the methods I wish to call another method. What is the reason that I cannot call the method by placing \"self\" into the argument? For example, method2(self).", "abstract": ""}, "answers": [{"id": 69939065, "score": 0, "vote": 0, "content": "You can call a method with self as an argument, but in this case the method should be called as the method of the class, not the instance.", "abstract": ""}, {"id": 69939000, "score": 2, "vote": 0, "content": "There are languages that let you write method2() as a shorthand for (what in Python would be) self.method2(), but you can't in Python. Python doesn't treat the self argument as special inside the function (except when calling super()). In Python, method2(self) first of all looks up method2 in the current scope. It seems like it should be in scope, but it actually isn't because of Python's weird scoping rules. Nothing in any class scope is ever visible in nested scopes: Even if method2 was in scope, calling it directly would call the method from the class currently being defined, not the overridden method appropriate to the dynamic type of self. To call that, you must write self.method2().", "abstract": ""}, {"id": 69937433, "score": 1, "vote": 0, "content": "The self parameter is automatically passed in as the object you are calling the method from. So if I said self.method2(), it automatically figures out that it is calling self.method2(self)", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/66012667/using-self-in-init-part-of-a-class-in-python", "keywords": [], "tags": ["python-3.x", "class", "neural-network", "pytorch", "self"], "question": {"id": 66012667, "title": "Using self in init part of a class in Python", "content": "Is there any difference between the following two codes related to initializing a class in Python? If there exists any difference, what is that, and which code is preferable? Edit: I am going to write an artificial neural network with Python (and Pytorch). In fact, the above two codes are just some examples. In the actual case, I have seen in various resources that when there exists self.input = input in the initialization of a class, in other parts it is used as self.input, not input. My questions: What are the differences between these two approaches? Why is the use of self.input preferable, in my case? Example: (from https://docs.dgl.ai/en/latest/tutorials/models/1_gnn/4_rgcn.html#sphx-glr-tutorials-models-1-gnn-4-rgcn-py)", "abstract": ""}, "answers": [{"id": 66013317, "score": 2, "vote": 0, "content": "No. there is no difference between these two approaches in your case with this level of information. but could they? Yes. they could. if they have some modifications in their setters or getters. later in my answer I'll show you how. First of all, I prefer using this one: the above implementation calculates the summation on demand. so when you change self.first or self.second, summ will be calculated automatically. you can access the sum as you did before. let's implements them as follows. in setters I doubled the inputs to show you how setters can affect the results. it's just an imaginary example and is not exactly what you wrote. now let's take a look at the outputs: so, if you are not sure what to choose between those two, maybe the first approach is what you need.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/65804367/why-does-python-think-self-is-a-argument", "keywords": [], "tags": ["python", "oop"], "question": {"id": 65804367, "title": "Why does python think &quot;self&quot; is a argument", "content": "so, I am building a python project with some oop, but when I try to run my program, it gives me this: but I have given the program the type argument, so, I removed the type argument and tried it again, and this time it gave me this: that means python is taking self as an argument, how can I fix that? also, I am doing this in vs code, the code for the class is :", "abstract": ""}, "answers": [{"id": 65804921, "score": 0, "vote": 0, "content": "In python, basically for calling a function of class, you have first create an object of that class and then inside the function, self is the keyword used to refer to the current object and hence you have to have it as a requried parameter/argument.\nSo, you have call the method take_query as self.take_query() or take_query() inside the class definition.\nNow, outside the class these are steps to be followed. If your method has other arguments you can add it along with your instance.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/65184615/what-is-the-use-of-the-keyword-self-in-python-object-oriented-programming", "keywords": [], "tags": ["python", "class", "self"], "question": {"id": 65184615, "title": "What is the use of the keyword &quot;self&quot; in Python Object Oriented Programming?", "content": "I just started learning Python, and I'm starting to get into Object-Oriented Programming. I wrote the following code which simply draws shapes using the turtle module, but I still don't quite understand the use of the \"self\" keyword:", "abstract": ""}, "answers": [{"id": 65184652, "score": 1, "vote": 0, "content": "self refers to the instance of the class from inside the class.\nhttps://www.programiz.com/article/python-self-why Here is the content of the link: If you have been programming in Python (object-oriented programming) for some time, then you have definitely come across methods that have self as their first parameter. Let us first try to understand what this recurring self parameter is.\nWhat is self in Python? In object-oriented programming, whenever we define methods for a class, we use self as the first parameter in each case. Let's look at the definition of a class called Cat. In this case all the methods, including init, have the first parameter as self. We know that class is a blueprint for the objects. This blueprint can be used to create multiple numbers of objects. Let's create two different objects from the above class. The self keyword is used to represent an instance (object) of the given class. In this case, the two Cat objects cat1 and cat2 have their own name and age attributes. If there was no self argument, the same class couldn't hold the information for both these objects. However, since the class is just a blueprint, self allows access to the attributes and methods of each object in python. This allows each object to have its own attributes and methods. Thus, even long before creating these objects, we reference the objects as self while defining the class.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/54555141/what-is-self-in-python", "keywords": [], "tags": ["python", "self"], "question": {"id": 54555141, "title": "What is self() in python?", "content": "I thought I understood self on some pretty decent level. But I came across this: What does self(...) do?", "abstract": ""}, "answers": []}]