[{"link": "https://stackoverflow.com/questions/74564703/python-return-true-if-all-statements-are-true", "keywords": [], "tags": ["python", "boolean", "boolean-logic", "xor", "boolean-operations"], "question": {"id": 74564703, "title": "Python- Return true if all statements are true", "content": "I have a method and I want it to return true if all 3 statements are true. In case any of them is false the method should return false. I am using xor to validate if all statements have the same value but if all statements are false then the method will return true, which is not the intended behavior. In order to fix this I am thinking in adding a true to the return statement like this: But I don't think that it is the best approach.\nIs there a cleaner/better way to do this?", "abstract": ""}, "answers": [{"id": 74564775, "score": 2, "vote": 0, "content": "This way would be a better approach and much more readable:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/73485251/python-return-if-statement", "keywords": [], "tags": ["python", "function", "if-statement", "syntax"], "question": {"id": 73485251, "title": "Python return if statement", "content": "Unclear on how to frame the following function correctly: Creating a function that will take in a string and return the string in camel case without spaces (or pascal case if the first letter was already capital), removing special characters the \"if\" statement at the end isn't working out, and I wrote this somewhat experimentally, but with a syntax fix, could the logic work?", "abstract": ""}, "answers": [{"id": 73487257, "score": 0, "vote": 0, "content": "Here is a short solution using regex. First it uses title() as you did, then the regex finds non-alphanumeric-characters and removes them, and finally we take the first character to handle pascal / camel case.", "abstract": ""}, {"id": 73486649, "score": 0, "vote": 0, "content": "Providing the input string does not contain any spaces then you could do this: Output:", "abstract": ""}, {"id": 73485532, "score": -1, "vote": 0, "content": "use the split function to split between anything that is not a letter or a whitespace and the function .capitalize() to capitalize single words", "abstract": ""}, {"id": 73485529, "score": -1, "vote": 0, "content": "The below should work for your example. Splitting apart your example by anything that isn's alphanumeric or a space. Then capitalizing each word. Finally, returning the re-joined string.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/73449241/return-statement-from-a-method-function", "keywords": [], "tags": ["python", "oop", "data-structures", "methods", "linked-list"], "question": {"id": 73449241, "title": "Return Statement from a method/function", "content": "I feel a little bit silly asking this, but I'm practicing some DSA. I'm watching a Youtube video, and I find odd that in some methods of the class the return method is left without returning a value. I know that it'll return None but I don't understand how the code works. Here's the code snippet: Can someone please explain to me, what is this code doing, because as I understand the prepend method is working with two None values from the 2 empty returns.", "abstract": ""}, "answers": [{"id": 73449312, "score": 3, "vote": 0, "content": "A return is used when you want to stop a function from executing further. The first one is necessary in order to not have the statements after the if self.head is None block be executed. The second one is unnecessary, as it's at the end of the function, so the function will return regardless. It's just a more explicit way of saying \"I am returning here, but am not returning anything\". That's the default behavior of any function that you don't explicitly put a return into. It's very common in programming languages to have explicit, blank returns. For instance in C, any function whose return type is void has to have any returns be empty. In Python there's tons of built-in functions that don't need to return anything, let alone all the custom ones one might create. For instance, list.append() returns None; which is what any function in Python returns by default when there's not anything explicitly being returned.", "abstract": ""}, {"id": 73449506, "score": 0, "vote": 0, "content": "It is just a matter of style, whether one just lets the function-body end returning None implicitly, writes a naked return statement or even writes return None explicitly. These are all functions which return None: However the first method does not allow you to return early. This is why an explicit return is needed in the if branch of the method. Otherwise control flow would continue and prepend the same value twice. The second return statement at the end is redundant.", "abstract": ""}, {"id": 73449331, "score": 2, "vote": 0, "content": "The first return in prepend is an early return and this is the only way of returning from this point in the function as it is currently written. The second return is entirely redundant and can be removed.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/57518639/can-you-return-a-return-statement-in-python", "keywords": [], "tags": ["python", "return"], "question": {"id": 57518639, "title": "Can you return a return statement in Python?", "content": "I'm working on a web application and I'm creating a login & authentication form. Some pages should be off-limits if you are logged in (e.g. the login form), and I'm trying to create a systematic way of doing this. To do this, I was trying to create a function which would return a return statement. See the code below. I was hoping that the function would return a return statement, so that the login and register pages would return a redirect. Instead I got an error.", "abstract": ""}, "answers": [{"id": 57519048, "score": 2, "vote": 0, "content": "No, you cannot return a return statement as such. A common arrangement is to refactor the code so that the caller takes care of what you return, and relays that back to its caller. Another approach is via callbacks. Something like this: Here, the return value from bar is a function object foo. This requires the caller of bar to know this and agree to call foo() at some later point in time when the value is actually required. (You could often also use a lambda in these circumstances; Python predictably calls this type of value a \"callable\".) As noted by @Dair in a comment already, what you are actually trying to accomplish is probably already covered by a completely different mechanism by whichever web framework you are probably already using. Here's Flask and here's Django.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/69472685/return-with-format-in-python", "keywords": [], "tags": ["python", "python-3.x", "return"], "question": {"id": 69472685, "title": "return with format() in python", "content": "I want to return in this format => \"HH:MM:SS\" (in a clock format and the HH, MM, SS change depend on the question)\nI know how to print it but I don't know how to return it.", "abstract": ""}, "answers": [{"id": 69472753, "score": 2, "vote": 0, "content": "As you can do You can If you prefer to use format it would be", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/52209825/python-function-return-value", "keywords": [], "tags": ["python", "python-3.x", "return", "boolean"], "question": {"id": 52209825, "title": "Python - Function Return Value", "content": "This example is just a basic program - I'm a new Coder - learning and experimenting whilst messing about .. Currently testing on Python 3.6 IDE and PyCharm - apologies for double spacing code - but looks a mess without. Looking for guidance for returning a value from a function. Have tried dozens of different methods / searched the forum, but closest answer this layman could understand stated I needed to use the return value otherwise it will be forgotten .. So added print(age_verification, \" example test value .. \") at various locations - but nothing gets returned outside the function .. Have tried returning Boolean / integer / string values and adapting - nothing with each variant .. Added a default age_verification = False variable before the function // or // referenced within function for 1st time .. Doesn't effect the return value except IDE doesn't state \"unresolved reference\" Tried a line-by-line python visualizer - but again - age_verification value disappears instantly after exiting the function . :-( ================================================================== Using 1 Single Function ================================================================== Same Example - Using 2 Functions ============================================================== Any advice is appreciated - wasted most of today hitting my head against the wall .. And apologies in advance .. Know it'll be something really basic - but appear to be using same formatting as others :-) THANK YOU", "abstract": ""}, "answers": [{"id": 52209968, "score": 1, "vote": 0, "content": "print doesn't return values, it will just display the value to stdout or the console. If you want to return a value with conditions, understanding scope is helpful. Your comment regarding returning variables otherwise they will be \"forgotten\" is correct. Variables defined and not returned by the function will go away when the function executes: The print statement will throw a NameError because var2 isn't defined outside of the function, nor is it returned. For your example, you'd want something like this: This way you are saving the returned value as the variable age_verification EDIT: To further expand on the scope concept, using the same definition for my_func: We assign the returned var3 to a variable like so: As noted, the name var3 isn't actually returned, just the value. If I were to run I would get a NameError. The way to get around that would be to do: because now var3 is defined in global scope. Otherwise, I would have to edit my function to make var3 global: Hopefully this is a bit clearer than my original answer", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/52132779/incorrect-return-value-not-getting-a-true-return-python", "keywords": [], "tags": ["python", "return-value", "palindrome"], "question": {"id": 52132779, "title": "Incorrect return value, not getting a &#39;True&#39; return, Python", "content": "I am expecting a return of True, but is getting a return of None.  I have put some print statement in the code to help debug. It shows that the 'print(\"Got True\")' statement ran, so I know the code ended up in the right branch of the code just before 'return True' but for some reason I am getting 'None'. However 'return False' works perfectly when I put in a word that isn't a palindrome. Thanks for the help. Output:", "abstract": ""}, "answers": [{"id": 52132874, "score": 0, "vote": 0, "content": "You should return the result in every possible conditional branches. You can use directly return statement or capture the result of the is_palindrome function in some variable and return that if it is confusing.", "abstract": ""}, {"id": 52132860, "score": 1, "vote": 0, "content": "You need to return in every branch of your function, e.g.: But you can simplify the structure because if you return then you don't need the else: clause because it can't be reached, so this can be written:", "abstract": ""}, {"id": 52132858, "score": 1, "vote": 0, "content": "Even in a recursive function, you have to use a return statement to return a value:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/50421958/returning-values-of-function-in-python", "keywords": [], "tags": ["python", "function"], "question": {"id": 50421958, "title": "returning values of function in python", "content": "Why do I have to return function in the else case? Can't I just apply the defined function because I have to only return the value of b and store it?", "abstract": ""}, "answers": [{"id": 50421982, "score": 1, "vote": 0, "content": "In the else block, if you don't return the function call, the outer function returns None because python interpreter just runs whatever is returned by the gcd function.  Let's assume the following code: In that function, it just runs 10, but it doesn't mean that there is some return from the function.", "abstract": ""}, {"id": 50422212, "score": 1, "vote": 0, "content": "IMHO, the problem is in the way you are thinking about function which has to be cleared. The fact that you are having this doubt in a recursive function call is incidental because you are calling the same function again and again with different arguments causing different branches to be executed. How will a function that doesn't return anything in any of its branches be helpful to its caller? In your case, what would happen if your function's caller calls it with an argument that hits your else block? It will return nothing and this won't help the caller! Now in your recursive case, if your caller calls the function with an argument that hits the if block, then it would work as expected. However, if it hits the else block, then it would become a caller and call the same function again. For simplicity, let us assume that this time it hits the if condition and returns something to its caller. However, will that reach the original caller that initiated everything? The answer is no because you are not returning it to him! Most of the times you would need a return for every branch in a function \n unless you are doing it on purpose for a side effect.", "abstract": ""}, {"id": 50422120, "score": 3, "vote": 0, "content": "I think the main concept you are missing is that in order to get the result of a recursive function (or any function for that matter), the function that you access the result of must return the value* Right now, when you call gcd_a, a recursive call to gcd_a will eventually return a value, however it will be lost, since the function that you are accessing the result of does not return a value. To show you this is true, let's add in a log statement that prints when the function is returning: Now if we call: We get the following output: Somewhere, a recursive call to gcd_a found your condition to be True, and returned 1, however, this result is not printed, because it is not returned by your call to gcd_a * Unless you do something strange like updating a global variable, etc...", "abstract": ""}, {"id": 50422282, "score": 1, "vote": 0, "content": "If your function finishes without returning anything, it will implicitly return None.  Which is fine, except it doesn't have a return statement, and so all you get is None The same applies to recursive functions: you can do all the recursive function calls you want, but if you don't actually return the result of the function, then it'll return None.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/33329069/return-statement-in-method-that-modifies-in-place", "keywords": [], "tags": ["python", "return", "in-place"], "question": {"id": 33329069, "title": "Return statement in method that modifies in-place", "content": "Say I wanted a simple method that takes a list and modifies it in-place by appending 5 to it.  Below are two methods that do this, but ret(l) returns while no_ret(l) does not.   Which method is more pythonic?  I'm guessing no_ret() because if the method is for in-place modification, then there is no need to return since we already have a reference to the object being modified. And how do they compare in terms of time and space efficiency?   I noticed that Python provides both the in-place non-returning instance method sort() and non-in-place returning static method sorted().  However I can't make my in-place methods to be instance methods of default classes like list.  ", "abstract": ""}, "answers": [{"id": 33330192, "score": 0, "vote": 0, "content": "When evaluating how pythonic some code is we should look to the standard library. Two mutable objects are: list with in-place method append: dict with in-place method update: We can conclude that in-place methods should return None  Performance considerations: test.py In IPython with %timeit: The not-returning method is not faster than the returning in C-Python. edit to comment You can make any method a instance method of a class in python: IPython:", "abstract": ""}, {"id": 33329244, "score": 2, "vote": 0, "content": "The first thing you should not be doing, is replicating existing functionality with your own methods - however, I assume you are just giving an example and this isn't actual code that you are planning to run. All methods in Python return a value. If a method doesn't have a return statement, it returns None. Any function that modifies in-place and does not return; should not return a value. This makes sense because it is how the \"normal\" in-place methods work. The correct implementation would be: A blank return is the same as return None, but remember - explicit is better than implicit. As far as your other question regarding space and time efficiencies, this will depend entirely on the implementation of the method that is actually doing the replacement. As you are writing a proxy to a built-in method in your example, the \"speed penalty\" is negligible.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/21696310/what-does-return-mean-in-python", "keywords": [], "tags": ["python", "return"], "question": {"id": 21696310, "title": "What does return mean in Python?", "content": "I searched the whole internet for the meaning of the return statement. I know it ends the define statement, but I know it still does something else! What else does it do?", "abstract": ""}, "answers": [{"id": 21696331, "score": 9, "vote": 0, "content": "It returns the flow of control to the calling function. It also returns output/results to the calling function. Consider the function below: You have multiple returns. So return doesn't simply end the function definition. It instead is the point at which the function returns the result to the caller. If answer is equal to 'yes' then anything after the if statement (after if and else) is never run because the function has already returned.", "abstract": ""}, {"id": 21696457, "score": 2, "vote": 0, "content": "The docs explain fully how a return function works. Its also the first answer in the google query python return...", "abstract": ""}]}]