[{"link": "https://stackoverflow.com/questions/9440600/python-string-in-place-modification", "keywords": [], "tags": ["python", "string"], "question": {"id": 9440600, "title": "python string in-place modification", "content": "Suppose I want to change 'abc' to 'bac' in Python. What would be the best way to do it? I am thinking of the following", "abstract": ""}, "answers": [{"id": 9440615, "score": 2, "vote": 0, "content": "You are never editing a string \"in place\", strings are immutable.  You could do it with a list but that is wasting code and memory.  Why not just do:  or (personal fav) This might be cheating, but if you really want to edit in place, and are using 2.6 or older,  then use MutableString(this was deprecated in 3.0). With that being said, solutions are generally not as simple as 'abc' = 'bac'  You might want to give us more details on how you need to split up your string.  Is it always just swapping first digits?  ", "abstract": ""}, {"id": 9440735, "score": 1, "vote": 0, "content": "You cannot modify strings in place, they are immutable.  If you want to modify a list in place, you can do it like in your example, or you could use slice assignment if the elements you want to replace can be accessed with a slice:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/3463746/in-place-string-modifications-in-python", "keywords": [], "tags": ["python", "string"], "question": {"id": 3463746, "title": "&#39;in-place&#39; string modifications in Python", "content": "In Python, strings are immutable. What is the standard idiom to walk through a string character-by-character and modify it? The only methods I can think of are some genuinely stanky hacks related to joining against a result string. -- In C: This is super expressive and says exactly what I am doing. That is what I am looking for. ", "abstract": ""}, "answers": [{"id": 68846773, "score": -1, "vote": 0, "content": "Here's my pythonic solution for In-place string reversal. Accounts for white spaces too. Note: It won't match any special characters if included in input_string except for underscore ( '_' ) i/p - \"Hello World\" => o/p - \"olleH dlroW\"", "abstract": ""}, {"id": 58006030, "score": 0, "vote": 0, "content": "I did that like this:", "abstract": ""}, {"id": 53449710, "score": 5, "vote": 0, "content": "The question first states that strings are immutable and then asks for a way to change them in place. This is kind of contradictory. Anyway, as this question pops up at the top of the list when you search for \"python string in-place modification\", I'm adding the answer for a real in place change. Strings seem to be immutable when you look at the methods of the string class. But no language with an interface to C can really provide immutable data types. The only question is whether you have to write C code in order to achieve the desired modification. Here python ctypes is your friend. As it supports getting pointers and includes C-like memory copy functions, a python string can be modified in place like this: Results in: (Of course, you can calculate the replacement string at runtime by applying a function F to every character of the original string. Different ways how to do this have been shown in the previous answers.) Note that I do not in any way encourage doing this. However, I had to write a replacement for a class that was mapped from C++ to python and included a method: (The caller is supposed to provide memory with length bytes and the method then writes the available data -- up to length -- into that memory, returning the number of bytes written.) While this is a perfectly sensible API in C/C++, it should not have been made available as method of a python class or at least the users of the API should be made aware that they may only pass mutable byte arrays as parameter.  As you might expect, \"common usage\" of the method is as shown in my example (create a string and pass it together with its length as arguments). As I did not really want to write a C/C++ extension I had to come up with a solution for implementing the behavior in my replacement class using python only.", "abstract": ""}, {"id": 3463830, "score": 0, "vote": 0, "content": "You can use StringIO class to receive file-like mutable interface of string. ", "abstract": ""}, {"id": 3464238, "score": 7, "vote": 0, "content": "I'd say the most Pythonic way is to use map(): This is the equivalent of writing:", "abstract": ""}, {"id": 3463769, "score": 3, "vote": 0, "content": "string.translate is probably the closest function to what you're after.", "abstract": ""}, {"id": 3463789, "score": 25, "vote": 0, "content": "Don't use a string, use something mutable like bytearray: Results in: Edit: Since this is a bytearray, you aren't (necessarily) working with characters. You're working with bytes. So this works too: gives: If you want to modify characters in a Unicode string, you'd maybe want to work with memoryview, though that doesn't support Unicode directly.", "abstract": ""}, {"id": 3463868, "score": 19, "vote": 0, "content": "The Python analog of your C: would be: which is also very expressive.  It says exactly what is happening, but in a functional style rather than a procedural style.", "abstract": ""}, {"id": 3463853, "score": 1, "vote": 0, "content": "Here is an example using translate to switch \"-\" with \".\" and uppercase \"a\"s This is much more efficient that flipping to byte array and back if you just need to do single char replacements", "abstract": ""}, {"id": 3463847, "score": 11, "vote": 0, "content": "you can use the UserString module:", "abstract": ""}, {"id": 3463821, "score": 1, "vote": 0, "content": "If I ever need to do something like that I just convert it to a mutable list For example... (though it would be easier to use sort (see second example) )", "abstract": ""}, {"id": 3463797, "score": 2, "vote": 0, "content": "Assigning a particular character to a particular index in a string is not a particularly common operation, so if you find yourself needing to do it, think about whether there may be a better way to accomplish the task. But if you do need to, probably the most standard way would be to convert the string to a list, make your modifications, and then convert it back to a string. EDIT: As posted in bstpierre's answer, bytearray is probably even better for this task than list, as long as you're not working with Unicode strings.", "abstract": ""}, {"id": 3463795, "score": 0, "vote": 0, "content": "", "abstract": ""}, {"id": 3463768, "score": 1, "vote": 0, "content": "If you want to store this new string you'll have to mystring = mystring.replace(\"1\", \"i\"). This is because in Python strings are immutable.", "abstract": ""}, {"id": 3463767, "score": 2, "vote": 0, "content": "Strings are iterable and can be walked through like lists.  Strings also have a number of basic methods such as .replace() that might be what you're looking for.  All string methods return a new string. So instead of modifying the string in place you can simply replace its existing value.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/68175827/how-to-edit-a-string-to-add-a-variable-at-a-particular-place-in-python", "keywords": [], "tags": ["python", "python-3.x", "string", "indices"], "question": {"id": 68175827, "title": "How to edit a string to add a variable at a particular place in python?", "content": "I have a variable: a = 2 and I have this string: \"//media.boohooman.com/i/boohooman/mzz11035_black_xl/mens-black-man-signature-embroidered-t-shirt?$product_page_main_magic_zoom$&fmt=webp\" I want edit this string so I can add variable, a, at a specific place in this string, after \"mzz11035_black_xl\", to make the whole string look like: \"//media.boohooman.com/i/boohooman/mzz11035_black_xl_2/mens-black-man-signature-embroidered-t-shirt?$product_page_main_magic_zoom$&fmt=webp\" What options do I have to achieve this goal. I know that there are some hard coded ways where I can count the characters before and after a specific place and do slicing, but I am looking for some more general method so that it would work even if the strings change a bit. eg. \"//media.boohooman.com/i/boohooman/mzz11035_blue_xl/mens-black-man-signature-embroidered-t-shirt?$product_page_main_magic_zoom$&fmt=webp\" or \"//media.boohooman.com/i/boohooman/mzz11035_blue_s/mens-black-man-signature-embroidered-t-shirt?$product_page_main_magic_zoom$&fmt=webp\" Thanks.", "abstract": ""}, "answers": [{"id": 68176728, "score": 0, "vote": 0, "content": "you can use replace() function. Syntax: Parameters: Return Value: It returns a copy of the string where all occurrences of a substring are replaced with another substring. Code sample:", "abstract": ""}, {"id": 68175948, "score": 2, "vote": 0, "content": "You need to use f string or the format() function: or if the position of the \"mzz11035_black_xl\" is changing you can do this: but in this case, you need to make sure that you have only one \"mzz11035_black_xl\" in your string. If the string is changing but the link structure doesn't change you can try splitting with \"/\" (not elegant now but can be optimized) Output:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/68151743/is-there-a-way-to-update-a-string-in-place-in-rust", "keywords": [], "tags": ["string", "replace", "rust"], "question": {"id": 68151743, "title": "Is there a way to update a string in place in rust?", "content": "You can also consider this as, is it possible to URLify a string in place in rust? For example, I know there are ways to do this if we don't have to do this \"in place\". I am solving a problem that explicitly states that you have to update in place. If there isn't any safe way to do this, is there any particular reason behind that? [Edit] I was able to solve this using unsafe approach, but would appreciate a better approach than this. More idiomatic approach if there is.", "abstract": ""}, "answers": [{"id": 68156621, "score": 2, "vote": 0, "content": "An O(n) solution that neither uses unsafe nor allocates (provided that the string has enough capacity), using std::mem::take: (playground) Basically, it calculates the final length of the string, sets up a reading pointer and a writing pointer, and translates the string from right to left.  Since \"%20\" has more characters than \" \", the writing pointer never catches up with the reading pointer.", "abstract": ""}, {"id": 68153571, "score": 0, "vote": 0, "content": "Is it possible to do this without unsafe? Yes like this: Here is the Playground. But should you do it? As discussed for example here on Reddit this is almost always not the recommended way of doing this, because both remove and insert are O(n) operations as noted in the documentation. A slightly better version: and the corresponding Playground.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/63869708/modifying-a-string-in-place-without-creating-a-copy", "keywords": [], "tags": ["c"], "question": {"id": 63869708, "title": "modifying a string in-place without creating a copy", "content": "I'm trying to complete an assignment. What is meant by the term \"modifying in-place without creating a copy\" and \"return value is the same value that was passed into the function\"? How do I check if my code satisfies both condition? I'm assuming that I had violated the conditions as when I was using this function in another part of my program, it gave me the errors: said code fragment that uses the uppercase function: *edit (making a copy)", "abstract": ""}, "answers": [{"id": 63870105, "score": 1, "vote": 0, "content": "To \"modify in place\" in this context means that the function changes the data referenced by its parameter. If you pass a string in the form of a char *, then the caller's copy of the string is modified. An alternative way of processing the string would be to return a modified copy of the string, while leaving the original unchanged. If the function does not change the original, and it's designed that way, it's helpful to define the parameter as const. This is both more expressive, because it's clear that the data is not modified, and it allows the compiler to spot careless errors that might, in fact, modify the data. If a function \"returns the same value\" it means exactly that -- that the return is exactly the argument. In principle, there's no reason that a function should ever return the value of a specific argument, since the caller always knows what the value is -- otherwise it wouldn't have been able to supply it to the function in the first place. However, many long-standing functions (e.g., strcpy) do, in fact, return one of their arguments.", "abstract": ""}, {"id": 63869885, "score": -1, "vote": 0, "content": "Modifying a string in-place without creating a copy: First, since the function changes the input string in-place, it does not need to return anything. Second, since the function changes the input string in-place, it cannot take a constant string as input. For example, you can do this: But you cannot do this: Here is how you can implement this function:", "abstract": ""}, {"id": 63869908, "score": -1, "vote": 0, "content": "When you declare function parameter as const and you try to modify using tricks and hacks - it is an Undefined Behaviour and that program is wrong. When you need to modify something never declare it contst and never pass the const data to it. In your case compiler is warning about it.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/13475581/the-replace-method-does-change-the-string-in-place", "keywords": [], "tags": ["javascript", "jquery"], "question": {"id": 13475581, "title": "The .replace() method does change the string in place", "content": "I simply try to use the .replace() method. And it does not work. HTML:     JS: Result: I get 'r', while I would like to get 't' Any idea on why it doesn't work?", "abstract": ""}, "answers": [{"id": 13475612, "score": 5, "vote": 0, "content": "First off replace is not a jQuery method - it's plain javascript. Second, it returns a new instance of the string so you need:", "abstract": ""}, {"id": 13475605, "score": 7, "vote": 0, "content": "You need to save the variable after it has been replaced", "abstract": ""}, {"id": 13475598, "score": 14, "vote": 0, "content": "replace() (a JavaScript function, not jQuery) returns a string, try this : Docs for .replace() are here", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/46850850/python-function-to-modify-string", "keywords": [], "tags": ["python", "string", "python-2.7"], "question": {"id": 46850850, "title": "Python function to modify string", "content": "I was asked once to create a function that given a string, remove a few characters from the string. Is it possible to do this in Python? This can be done for lists, for example: What I want is to do this function for strings.\nThe only way I can think of doing this is to convert the string to a list, remove the characters and then join it back to a string. But then I would have to return the result.\nFor example: I understand why this function doesn't work. The question is more if it is possible to do this in Python or not? If it is, can I do it without copying the string?", "abstract": ""}, "answers": [{"id": 46850991, "score": 1, "vote": 0, "content": "You could use bytearray instead: Caveats:  By the way, perhaps it is an instance of the XY problem. Do you really need to mute strings in the first place?", "abstract": ""}, {"id": 46850944, "score": 4, "vote": 0, "content": "Strings are immutable, so your only main option is to create a new string by  slicing and assign it back. Another easy to go method maybe to use list and then join the elements in it to create your string. Ofcourse, it all depends on your preference. Incase you are looking to remove char at a certain index given by pos (index 0 here), you can slice the string as :", "abstract": ""}, {"id": 46850969, "score": 0, "vote": 0, "content": "You wont do that.. you can still concatenate but you wont pop until its converted into a list.. But still You can play with Slicing", "abstract": ""}, {"id": 46850957, "score": 0, "vote": 0, "content": "You can remove parts of a strings and assign it to another string:", "abstract": ""}, {"id": 46850949, "score": 6, "vote": 0, "content": "Strings are immutable, that means you can not alter the str object. You can of course construct a new string that is some modification of the old string. But you can thus not alter the s object in your code. A workaround could be to use a container: And then the popstring thus is given a contain, it inspect the container, and puts something else into it: But again: you did not change the string object itself, you only have put a new string into the container. You can not perform call by reference in Python, so you can not call a function: and then alter the variable x: the reference of x is copied, so you can not alter the variable x itself.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/19671770/replacing-a-string-in-place", "keywords": [], "tags": ["java", "string", "reverse"], "question": {"id": 19671770, "title": "Replacing a string in place", "content": "I am having an issue with a problem from my Intro Java class and this problem is a bit more than I can wrap my head around. The problem is asking for a user to enter in a string and output the same string reversed in place Example input: \" How are you doing today? \"\nExample output : \" today? doing you are How \" I am at a loss and not even sure how to start solving this problem...any tips would be greatly appreciated. I have tried reversing string but it just reads backwards. } Should i use some sort of an array?\nThank you in advance!!!", "abstract": ""}, "answers": [{"id": 20385485, "score": 0, "vote": 0, "content": "Thank you all for the input. I messed around a bit and got something like this as part of my own solution and it does the trick.", "abstract": ""}, {"id": 19672165, "score": 0, "vote": 0, "content": "If word delimiter is a space or tab. You have to import Collections and Arrays classes.", "abstract": ""}, {"id": 19671779, "score": 2, "vote": 0, "content": "Take a look at the String API. You can use the split() method to get an array of all the words. Then you can iterate through the array in reverse order to recreate a new String with the words in reverse order. You would probably want to use the StringBuilder class to create your new string.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/27202553/replace-characters-in-a-string-in-place", "keywords": [], "tags": ["c", "string", "performance", "memory-management", "replace"], "question": {"id": 27202553, "title": "Replace characters in a string in-place", "content": "I have a function to replace characters in a string, and it works perfectly!\nThe only problem, however, is that it requires another string to act as buffer to which the modified text will be placed. This is a disaster to me, because most of my work is about I/O handling. So if I allocate 1024 bytes as a maximum using calloc to contain a line, I'll have to duplicate it to have a modified version with the same size (yes, 1024 bytes wasted on string replacement). Here is the function: Having the same string as buffer would result in:\n - Faster code (calls to calloc would be unneeded)\n - Memory-efficient code (again, calls to calloc would be unneeded)\n - Neater code. Because one line of code is much neater than three (one for allocation, one for function invokation, one for freeing) My question as you might have guessed is: How can I use the same string as buffer ?", "abstract": ""}, "answers": [{"id": 30064135, "score": 1, "vote": 0, "content": "Unless you can guarantee that the replacement string, rep, is always exactly the same size of the search string, needle, then you'll likely make your situation much worse and far more complicated to seek an in-place replacement of the original string, since algorithmically you'll have to shuffle the contents of the entire string around. You'll then replace constant-time O(1) appends to an output buffer with O(N) linear complexity swapping of bytes in the original buffer. In-place replacement algorithms work well when you are simply overwriting fixed-sized elements in a range, or if you have an algorithm that involves a write pointer that trails behind the read pointer yielding a final result that is less than or equal to the size of the original. In your case, you're dealing with variable-sized replacements and reading and writing at the same overlapping position which could result in a larger result, and that's when you really want a separate place in memory to output results for efficiency because otherwise you'll be dealing with a large amount of overhead shuffling around the same memory to try to reuse it. Your function signature is fine as is by accepting a pointer to an output buffer. Naturally if the calling code callocs and frees the buffer every time prior to calling it, that's obviously going to lead to bottleneck-prone code. The calling code should be reusing the same buffer for each thread and passing it down the call stack to avoid recreating it. Now if you want to optimize the calling code to avoid excessive callocs and frees, then this could be tricky if you cannot effectively determine an upper bound for the size of the output buffer in advance. In such a case, reuse the same buffer but also keep track of its size and realloc when you run into a new input case where it needs to be larger (or simply use realloc every time). Then keep on reusing it and rinse and repeat and free when done.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/27318076/edit-string-in-place-with-a-function", "keywords": [], "tags": ["rust", "lifetime"], "question": {"id": 27318076, "title": "Edit string in place with a function", "content": "I am trying to edit a string in place by passing it to mutate(), see below.  Simplified example: But I get the following compilation error: Why do I get this error and how can I achieve what I want?", "abstract": ""}, "answers": [{"id": 27320653, "score": 13, "vote": 0, "content": "You can't change a string slice at all. &mut &str is not an appropriate type anyway, because it literally is a mutable pointer to an immutable slice. And all string slices are immutable. In Rust strings are valid UTF-8 sequences, and UTF-8 is a variable-width encoding. Consequently, in general changing a character may change the length of the string in bytes. This can't be done with slices (because they always have fixed length) and it may cause reallocation for owned strings. Moreover, in 99% of cases changing a character inside a string is not what you really want. In order to do what you want with unicode code points you need to do something like this: However, this has O(n) efficiency because it has to iterate through the original slice, and it also won't work correctly with complex characters - it may replace a letter but leave an accent or vice versa. More correct way for text processing is to iterate through grapheme clusters, it will take diacritics and other similar things correctly (mostly): There is also some support for pure ASCII strings in std::ascii module, but it is likely to be reformed soon. Anyway, that's how it could be used: It will panic if either s contains non-ASCII characters or c is not an ASCII character.", "abstract": ""}]}]