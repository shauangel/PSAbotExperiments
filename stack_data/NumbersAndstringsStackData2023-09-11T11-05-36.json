[{"link": "https://stackoverflow.com/questions/72774703/why-does-this-program-crash-when-i-enter-big-numbers-like-10-5000000", "keywords": [], "tags": ["c++", "function", "crash"], "question": {"id": 72774703, "title": "why does this program crash when I enter big numbers like 10 5000000?", "content": "why does this program crash when I pass to the function\ncount_primes arguments like 10 and 5000000. when I pass arguments like 10 and 50 it works well.", "abstract": ""}, "answers": [{"id": 72775793, "score": 0, "vote": 0, "content": "It is nice that you try to solve it in a functional manner. There are two points where you can improve it: The code that works for 10, 5000000 on my machine looks like:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/68453217/using-nsexec-to-installing-inf-file-log-shows-return-value-10", "keywords": [], "tags": ["nsis"], "question": {"id": 68453217, "title": "Using nsExec to installing INF file. Log shows return value -10", "content": "I'm working on an installer that installs an inf file. I'm using the nsExec plugin. My log is giving Return value: -10. What does a -10 error mean here? IF I enter the wrong path I can an expected value like \"error\" but I don't understand this -10 return value. If I do the example given in the nsExec plugin page, I get a return value of 0. So I assume -10 is an error of some kind, but not one I've encountered thus far. The exe and inf files are custom to org.", "abstract": ""}, "answers": [{"id": 68459902, "score": 0, "vote": 0, "content": "Any number is the exit code from the process. -10 is the exit code of My.exe. Only My.exe knows what -10 means. A negative number might be a HRESULT error code.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/64726719/why-does-the-user-always-get-a-return-true-in-java", "keywords": [], "tags": ["java", "while-loop", "return", "population"], "question": {"id": 64726719, "title": "why does the user always get a return true in Java?", "content": "I want to ask from the user what the bigger population is from two random countries in a quiz. Every time the user uses an a or b to fill the answers in, it gets a true in return. I don't know how to fix it. I also used the return statement in the if and else.", "abstract": ""}, "answers": [{"id": 64726880, "score": 1, "vote": 0, "content": "Here is the fixed code. Your code had a logic flaw in it and it always returned true no matter what. You were also checking for the condition in the while loop, which would have never run if the user inputted a or b the first time.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/57373338/random-times-232-1-always-returns-even-last-digit", "keywords": [], "tags": ["c#", "random", "precision"], "question": {"id": 57373338, "title": "Random() times 2^32 - 1 always returns even last digit", "content": "I have encountered this weird behaviour, which is probably best described by a small example: Now, the last digit of d before the decimal mark is always even, i.e. int r = (int) (d % 10) is always 0, 2, 4, 6, or 8. There are odd digits on either side, though. I suspected that multiplying with uint.MaxValue (2^32 - 1) could force some rounding error in the last digits, but since double has more than 50 bits of precision, this should beat uint with about 20 bits to spare after the separator. This behaviour also occurs if I explicitly store uint.MaxValue as a double before the multiplication and use that instead. Can someone shed any light on this?", "abstract": ""}, "answers": [{"id": 57373588, "score": 4, "vote": 0, "content": "This is a deficiency in the .Net Random class. If you inspect the source code you will see the following comment in the implementation of the private method GetSampleForLargeRange(): This is used in the implementation of Next(): But it is NOT used for the values returned from NextDouble() (which just returns the value returned from Sample(). So the answer is that NextDouble() is not well-distributed. You can use RNGCryptoServiceProvider to generate better random numbers, but it's a bit of a fiddle to create the double. From this answer:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/53699434/javascripts-built-in-number-method-seems-to-return-an-incorrect-value", "keywords": [], "tags": ["javascript", "numbers", "built-in"], "question": {"id": 53699434, "title": "JavaScript&#39;s Built-in Number() method seems to return an incorrect value", "content": "I've made a program to convert bases of numbers. I thought that, in the event that there are no characters A-F in the output, it would be convenient to return the number as a Number instead of a String (even though I'd be returning base 2 numbers as regular decimal numbers, whatever).  For some reason, when I converted A3B232 to Binary (which should be 10100001101011001002 [Wolfram|Alpha source]), I got 1010000110101100200. There's a two in there, that isn't binary! The final line of code which returns the value is: This worked properly for basically all tests, until I decided to use that base-32 number above. I thought my program was doing the division/remainder step incorrect, so I had it print out the result just before it returns the value. It was correctly giving out 1010000110101100100. So, I tested the Number() method directly in Chrome's console. This is what happened: Am I misunderstanding what the Number() method does? Why is it converting a string made up of all Ones and Zeroes to a number with Ones, Zeroes, and Twos?", "abstract": ""}, "answers": [{"id": 53699858, "score": 0, "vote": 0, "content": "@AnonymusSB said is right. i want add few details to it. So when you Number(value) it internally calls ToNumber to calculate the value. when you supply a string. it have a two step process to change it number. \n\nconsole.log(Number(\"9007199254740996\"))\r\nconsole.log(Number(\"9007199254740997\"), \"rounded down\")\r\nconsole.log(Number(\"9007199254740998\"))\r\nconsole.log(Number(\"9007199254740999\") ,\"rounded up\")\n\n\n EcmaScript", "abstract": ""}, {"id": 53699646, "score": 6, "vote": 0, "content": "What you're doing when calling Number(\"1010000110101100100\") is passing a string, which it is trying to turn it into a number, but that number is higher than JavaScript can count, which is 9,007,199,254,740,991 (also known as Number.MAX_SAFE_INTEGER) Basically, any number over 9,007,199,254,740,991 can't reliably be used because JavaScript uses double-precision floating-point format numbers as specified in IEEE 754  Here's some examples, the following input numbers \"should\" be the same as the output, but aren't because they've gone over the MAX_SAFE_INTEGER. Some are, but it's not reliable as demonstrated in the Bonus Fun With LARGE Numbers section below. If you still want to convert hex to binary, you need to use parseInt and Number.prototype.toString and keep it as a string. \n\nconst hex = \"A3B2\";\r\nconst binary = parseInt(hex, 16).toString(2);\r\nconsole.log(binary);\n\n\n The following is true!\n\n\nconsole.log(9007199254740992 === 9007199254740993);\r\nconsole.log(1010000110101100200 === 1010000110101100100)\n\n\n https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/48226799/why-tostring2-is-going-to-n-2-and-return-the-divisor-remainder", "keywords": [], "tags": ["javascript"], "question": {"id": 48226799, "title": "Why toString(2) is going to n % 2 and return the divisor remainder?", "content": "In this case when n is a number parameter in the function.\nWhy is toString(2) going to n % 2 and return the divisor remainder?\nI thought that toString just return a number into a string. \n\nfunction toBinary(n) {\r\n\r\n  var toBinary2 = +n.toString(2)\r\n\r\n  return toBinary2\r\n\r\n}\r\nconsole.log(toBinary(2))\n\n\n", "abstract": ""}, "answers": [{"id": 48226883, "score": 0, "vote": 0, "content": "Why is toString(2) going to n % 2 and return the divisor remainder? toString takes radix as parameter and toString(2) converts the number into binary equivalent string. +Number(2).toString(2) converts the binary equivalent to the number again, but doesn't do binary to decimal conversion. So, +Number(2).toString(2) => +\"10\" => 10", "abstract": ""}, {"id": 48226865, "score": 0, "vote": 0, "content": "The parameter to Number#toString is a base.  Calling .toString(2) on a number will return that number in binary. 2 in binary is 10, so that is why (2).toString(2) returns 10.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/42200281/why-does-math-pow10e-int-returns-float64-rather-than-int64", "keywords": [], "tags": ["math", "go"], "question": {"id": 42200281, "title": "Why does math.Pow10(e int) returns float64 rather than int64?", "content": "Since parameter e is int, why not just return an int64? Is there any special reason for this?", "abstract": ""}, "answers": [{"id": 42200364, "score": 7, "vote": 0, "content": "2 reasons: First, the parameter may be negative too, in which case the result is a fraction number between 0 and 1, so a float64 return value is not just justified but needed. Output (try it on the Go Playground): Second, almost* every function of the math package returns value(s) of type float64, adding one that doesn't would break \"consistency\". [*] Few exceptions include functions like Float32frombits() and llogb() where the deviation is justified.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/33465022/why-does-my-code-return-1-when-the-given-number-has-more-zeroes", "keywords": [], "tags": ["python"], "question": {"id": 33465022, "title": "Why does my code return 1 when the given number has more zeroes?", "content": "If you have another method that can help me I will appreciate your help, I tried my best to write a code that calculates the number of zeroes in a given number. Here's the code I tried: it just gives 1 as output of the code, while it must print 2, but for numbers like 36, it gives 0 as output, what is the problem? I know there must be a problem with that while...", "abstract": ""}, "answers": [{"id": 33465079, "score": 0, "vote": 0, "content": "See the above lines. If the condition in the while loop is true, n=n%10 line will be executed. This line will make your n=0 no matter what. For example, So, there is no chance that your loop condition will be True during the second iteration, so no chance of increment count variable more than once. So, no matter what is your n is, you always get the output 1. In your code, Change this: To this: An alternative way, might help you. ", "abstract": ""}, {"id": 33465085, "score": 0, "vote": 0, "content": "If n%10 is zero, n is zero in the next step, so the condition is always fulfilled after the first loop. You probably want to use // instead of %:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/30085018/why-does-10-0xa-evaluate-to-true-but-10-012-doesnt", "keywords": [], "tags": ["php"], "question": {"id": 30085018, "title": "Why does &quot;10&quot; == &quot;0xa&quot; evaluate to true, but &quot;10&quot; == &quot;012&quot; doesn&#39;t?", "content": "These days I discovered this weird code fragment \"10\" == \"0xa\" which evaluates to true. The best which I was able to find in the documentation was about Type Juggling: a variable's type is determined by the context in which the variable is used But I don't see any integer context in that code fragment. While asking around people seem to accept that as a feature. One explanation I'm hearing is that PHP will compare them as numbers. So I did some number comparison for some valid expressions of 10 (with PHP-5.6.5): Where is this behaviour documented in the manual? Edit: Please understand that question in the context of the example code. This should emphasize the inconsistency between the binary and octal representation vs. the rest.", "abstract": ""}, "answers": [{"id": 30085053, "score": 5, "vote": 0, "content": "PHP Docs reference If you compare a number with a string or the comparison involves numerical strings, then each string is converted to a number and the comparison performed numerically. (my emphasis) EDIT A numeric sting is one that will return a Boolean true from the is_numeric() function Finds whether the given variable is numeric. Numeric strings consist of optional sign, any number of digits, optional decimal part and optional exponential part. Thus +0123.45e6 is a valid numeric value. Hexadecimal (e.g. 0xf4c3b00c), Binary (e.g. 0b10100111001), Octal (e.g. 0777) notation is allowed too but only without sign, decimal and exponential part. ", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/25474351/why-does-gcc-compiler-output-pow10-2-as-99-not-100", "keywords": [], "tags": ["c++", "gcc"], "question": {"id": 25474351, "title": "Why does gcc compiler output pow(10,2) as 99 not 100?", "content": "I wrote above code to gcc 12 compiler and got the output 99 instead 100. I don't get the valid reason while searching on various sites. Is there any compiler problem?", "abstract": ""}, "answers": [{"id": 25474373, "score": 8, "vote": 0, "content": "Because of integer truncation. pow() returns a floating point value, and due to floating point arithmetic, it is probably ~ 99.999...; however, due to integer truncation, even 99.999... gets truncated down to 99.", "abstract": ""}]}]