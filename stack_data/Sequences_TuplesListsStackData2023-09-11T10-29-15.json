[{"link": "https://stackoverflow.com/questions/8081545/how-to-convert-list-of-tuples-to-multiple-lists", "keywords": [], "tags": ["python", "list", "tuples"], "question": {"id": 8081545, "title": "How to convert list of tuples to multiple lists?", "content": "Suppose I have a list of tuples and I want to convert to multiple lists. For example, the list of tuples is  Is there any built-in function in Python that convert it to: This can be a simple program. But I am just curious about the existence of such built-in function in Python.", "abstract": ""}, "answers": [{"id": 8081593, "score": 9, "vote": 0, "content": "", "abstract": ""}, {"id": 8081580, "score": 219, "vote": 0, "content": "The built-in function zip() will almost do what you want: The only difference is that you get tuples instead of lists.  You can convert them to lists using", "abstract": ""}, {"id": 56313226, "score": 3, "vote": 0, "content": "In addition to Claudiu's answer, you can use: Edited according to @Peyman mohseni kiasari", "abstract": ""}, {"id": 48331780, "score": 7, "vote": 0, "content": "franklsf95 goes for performance in his answer and opts for list.append(), but they are not optimal. Adding list comprehensions, I ended up with the following: This gave the result: So if you are after performance, you should probably use zip() although list comprehensions are not too far behind.  The performance of append is actually pretty poor in comparison.", "abstract": ""}, {"id": 47148258, "score": 6, "vote": 0, "content": "Despite *zip being more Pythonic, the following code has much better performance: Also, when the original list zs is empty, *zip will raise, but this code can properly handle. I just ran a quick experiment, and here is the result: Running it multiple times, append is 3x - 4x faster than zip! The test script is here: My Python Version:", "abstract": ""}, {"id": 44157777, "score": 0, "vote": 0, "content": "Adding to Claudiu's and Claudiu's answer and since map needs to be imported from itertools in python 3, you also use a list comprehension like:", "abstract": ""}, {"id": 8081590, "score": 53, "vote": 0, "content": "From the python docs: zip() in conjunction with the * operator can be used to unzip a list: Specific example: Or, if you really want lists:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/10941229/convert-list-of-tuples-to-list", "keywords": [], "tags": ["python"], "question": {"id": 10941229, "title": "Convert list of tuples to list?", "content": "How do I convert  to", "abstract": ""}, "answers": [{"id": 74532044, "score": 0, "vote": 0, "content": "If it is already a numpy array, use ravel() method which is more faster than list comprehension. If it is already a list, list comprehension is better. Most of the answers above only prints the first element not all the elements\n For numpy arrays For list", "abstract": ""}, {"id": 47751598, "score": 4, "vote": 0, "content": "Using operator or sum (OR) If in python > 3 please do the import of reduce from functools \nlike from functools import reduce https://docs.python.org/3/library/functools.html#functools.reduce", "abstract": ""}, {"id": 45400682, "score": 7, "vote": 0, "content": "With python3, you have to put the list(..) function to the output of map(..), i.e.  This is the best solution in one line using python built-in functions.", "abstract": ""}, {"id": 51201904, "score": 0, "vote": 0, "content": "In these situations I like to do: This works even if your tuples have more than one element. This is equivalent to doing this:", "abstract": ""}, {"id": 33952331, "score": 2, "vote": 0, "content": "One Liner yo! ", "abstract": ""}, {"id": 18408559, "score": 6, "vote": 0, "content": "You can also use sum function as follows: And it also works with list of lists to convert it into a single list, but you will need to use it as follow: This will give you [1, 2, 3, 4, 5, 6]", "abstract": ""}, {"id": 13950418, "score": 4, "vote": 0, "content": "There's always a way to extract a list from another list by ...for...in.... In this case it would be: [i[0] for i in e]", "abstract": ""}, {"id": 11041047, "score": 3, "vote": 0, "content": "You can also unpack the tuple in the list comprehension: will still give:", "abstract": ""}, {"id": 10941261, "score": 69, "vote": 0, "content": "@Levon's solution works perfectly for your case. As a side note, if you have variable number of elements in the tuples, you can also use chain from itertools.", "abstract": ""}, {"id": 10941335, "score": 34, "vote": 0, "content": "Here is another alternative if you can have a variable number of elements in the tuples: This is basically just a shortened form of the following loops:", "abstract": ""}, {"id": 10941237, "score": 97, "vote": 0, "content": "Using simple list comprehension: will give you:", "abstract": ""}, {"id": 10941308, "score": 7, "vote": 0, "content": "For a list:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/74519459/how-to-convert-a-tuple-in-a-list-to-a-normal-list", "keywords": [], "tags": ["python", "mysql", "database", "list", "tuples"], "question": {"id": 74519459, "title": "How to convert a tuple in a list to a normal list?", "content": "language: Python 3.7.0\nmysql-connector-python==8.0.31 I'm working on a website and have just implemented a database. The response I'm getting from the database looks like this: How do I extract the two values from the tuple in a list and convert it to a list only? Expected output: Thanks, indigo", "abstract": ""}, "answers": [{"id": 74519535, "score": 1, "vote": 0, "content": "You can use: Output", "abstract": ""}, {"id": 74519499, "score": 1, "vote": 0, "content": "For this very specific example you can just access the first element of the list a = [('indigo', 'admin')] via your_tuple = a[0] which returns your_tuple = ('indigo', 'admin'). Then this tuple can be converted to a list via list(your_tuple). In general it is better not to do these steps in between. I just put them to be more pedagogical. You get the desired result with:", "abstract": ""}, {"id": 74519529, "score": 1, "vote": 0, "content": "you can access the first elem of the origin list [('indigo', 'admin')] (it has only one elem) to get the tuple. then use list function to convert the tuple into list.", "abstract": ""}, {"id": 74519481, "score": 2, "vote": 0, "content": "Use tuple unpacking Output: ['indigo', 'admin']", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/16296643/convert-tuple-to-list-and-back", "keywords": [], "tags": ["python", "list", "tuples"], "question": {"id": 16296643, "title": "Convert tuple to list and back", "content": "I'm currently working on a map editor for a game in pygame, using tile maps.\nThe level is built up out of blocks in the following structure (though much larger): where \"1\" is a block that's a wall and \"0\" is a block that's empty air. The following code is basically the one handling the change of block type: But since the level is stored in a tuple, I'm unable to change the values of the different blocks. How do I go about changing the different values in the level in an easy manner?", "abstract": ""}, "answers": [{"id": 74207660, "score": 1, "vote": 0, "content": "In my case, I wanted to merge rows/ lists:", "abstract": ""}, {"id": 66065962, "score": 2, "vote": 0, "content": "Just using the command list did not work for me. if you have a tuple just iterate until you have the elements there are necessary and after that append to a list. And if you go to the element level you can change it easily. input: output:", "abstract": ""}, {"id": 63192001, "score": 24, "vote": 0, "content": "Since Python 3.5 (PEP 448 -- Additional Unpacking Generalizations) one can use the following literal syntax to convert a tuple to a list: A list comprehension can be use to convert a tuple of tuples to a list of lists:", "abstract": ""}, {"id": 53889456, "score": 5, "vote": 0, "content": "List to Tuple and back can be done as below", "abstract": ""}, {"id": 30949608, "score": 20, "vote": 0, "content": "To convert tuples to list  (Commas were missing between the tuples in the given question, it was added to prevent error message) Method 1:  Method 2: Method 1 took --- 0.0019991397857666016 seconds --- Method 2 took --- 0.0010001659393310547 seconds ---", "abstract": ""}, {"id": 30549155, "score": 16, "vote": 0, "content": "Why don't you try converting its type from a tuple to a list and vice versa.", "abstract": ""}, {"id": 16296703, "score": 89, "vote": 0, "content": "You have a tuple of tuples.\nTo convert every tuple to a list: --- OR --- And after you are done editing, just convert them back: --- OR --- (Thanks @jamylak) You can also use a numpy array: For manipulating:", "abstract": ""}, {"id": 23497549, "score": 376, "vote": 0, "content": "Convert tuple to list: Convert list to tuple:", "abstract": ""}, {"id": 16296969, "score": 5, "vote": 0, "content": "Both the answers are good, but a little advice: Tuples are immutable, which implies that they cannot be changed. So if you need to manipulate data, it is better to store data in a list, it will reduce unnecessary overhead. In your case extract the data to a list, as shown by eumiro, and after modifying create a similar tuple of similar structure as answer given by Schoolboy. Also as suggested using numpy array is a better option", "abstract": ""}, {"id": 16297196, "score": 2, "vote": 0, "content": "You could dramatically speed up your stuff if you used just one list instead of a list of lists.  This is possible of course only if all your inner lists are of the same size (which is true in your example, so I just assume this). And you could be even faster if you used a bitfield instead of a list: with But that's working only if your fields just contain 0 or 1 of course.  If you need more values, you'd have to combine several bits which would make the issue much more complicated.", "abstract": ""}, {"id": 16296668, "score": 27, "vote": 0, "content": "You can have a list of lists. Convert your tuple of tuples to a list of lists using: or and modify them accordingly. But a numpy array is cooler.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/72307264/convert-tuple-of-list-to-list", "keywords": [], "tags": ["python", "list", "tuples"], "question": {"id": 72307264, "title": "Convert tuple of list to list", "content": "Below is the tuple I'm using: I want it to convert into a single list of dict which would look like this - what is the best approach to convert this tuple?", "abstract": ""}, "answers": [{"id": 72307419, "score": 1, "vote": 0, "content": "Here it looks like you want the element inside the tuple, so if you do this: You'll get the list inside the tuple", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/66833359/should-lists-always-be-converted-to-tuples", "keywords": [], "tags": ["python", "python-3.x", "list", "tuples"], "question": {"id": 66833359, "title": "Should lists always be converted to tuples?", "content": "I'm trying to beef up my \"best practices,\" and I'm reading more about lists vs. tuples and memory allocation, and how you should use tuples if the list is not going to be changed as the program runs. That being said, should you (almost) always convert from a list into a tuple if this is the case? For example, let's say I have this code, and I'm looking at 100 colors input from users: I'm not planning on mutating the list. Does that mean I should follow with: and work off of tup? I realize this is a pretty small example, and converting to a tuple only takes 1 line, but is this the best practice? It just feels a little clunky since it's new to me. Thanks!", "abstract": ""}, "answers": [{"id": 66836819, "score": 0, "vote": 0, "content": "I do not agree that a tuple is better. Perhaps in older Python the answer is different however for Python 3.8.5 it depends on what 'better' means. Take the following. The output is: For speed numpy is the winner, however the speed increase comes at the cost of fixed length math overflow and an incorrect answer. So take care. For lists and tuples, the speed is often close to identical. The cost of creating a tuple from a list might have an impact depending on your use case however for speed, let's call them roughly equivalent. So, numpy - take care, lists or tuples? Which is more Beautiful, more Explicit, Simpler, Flatter (see PEP20)? For my money the extra tuple(...) is less Zen. I do not find the argument that a tuple is immutable compelling. Given the Python's general flexibility in typing use of caps indicating DONT_CHANGE_ME, feel_free_to_change as variable names is clearer. This suggestion comes from PEP8 https://www.python.org/dev/peps/pep-0008/#descriptive-naming-styles", "abstract": ""}, {"id": 66834396, "score": 1, "vote": 0, "content": "I suppose I'll answer, as requested by OP. First, \"best practice\" in cases where you do not plan to modify a collection generally means using a tuple, yes. You can skip the \"clunkiness\" of casting by simply avoiding creating a list in the first place: credit to @khelwood Or For more complicated expressions. As @snakecharmerb points out, using a tuple is also a good idea when the order of your elements is important. Since tuple objects are immutable, the order in which elements are placed in the tuple are \"set in stone\" if you will. This signifies to the reader that order is extremely important for your data. For times when order is NOT important and you want to enforce unique elements, a set is ideal as they are still iterable but also have constant time membership checking, which can be helpful in some situations.", "abstract": ""}, {"id": 66834393, "score": 1, "vote": 0, "content": "You can create a tuple directly instead of converting from a list; e.g. If you want to allow your sequence to be changed, use a list. If you want to ensure the sequence cannot be changed, use a tuple. If it doesn't matter either way, you can use either one.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/65260928/python-list-elements-vs-converting-to-tuple-for-string-formatting", "keywords": [], "tags": ["python", "performance", "optimization", "tuples"], "question": {"id": 65260928, "title": "Python list elements vs converting to tuple for string formatting", "content": "I came across a problem on codewars and am not sure what the difference is between these two possible solutions, one converting a list into a tuple and one specifying elements of the input list. Problem: convert a list of names (strings) to a statement similar to what Facebook uses to display likes: \"Alex likes this\", \"Alex and John like this\", \"Alex, John and 2 others like this\", etc. Using a if-elif-etc statement, this is pretty trivial: But in the longer lists of names, you have a choice: OR My hypothesis is that it's more computationally efficient to use names[0] etc, because you don't create a new object in memory for the tuple - is that right?", "abstract": ""}, "answers": [{"id": 65261029, "score": 0, "vote": 0, "content": "Take a look of your code visualization (shows memory units used by your code)  In your code, the type you stored in output_string is a string. Even though you wrote tuple(names) in memory there will be no memory allocation to a tuple. Consider the above visualization of your code in memory terms.", "abstract": ""}, {"id": 65260994, "score": 2, "vote": 0, "content": "Let's use the disassembler to see what bytecode Python generates for this: The fact that the disassembler shows there are a lot more instructions for the second approach doesn't necessarily mean it's slower. After all, a function call is just the opaque CALL_FUNCTION. So you have to use judgement and know what that's doing. But it seems you're building a tuple either way\u2026", "abstract": ""}, {"id": 65260977, "score": 6, "vote": 0, "content": "CPython optimization rules are usually based around how much work you push to the C layer (vs. the bytecode interpreter) and how complex the bytecode instructions are; for low levels of absolute work, the fixed overhead of the interpreter tends to swamp the real work, so intuition derived from experience in lower-level languages just doesn't apply. It's pretty easy to test though, especially with ipython's %timeit magic (timings done on Python 3.8.5 on Alpine Linux running under WSLv2): So in fact, the code example you gave made the correct decision for each size (assuming performance is all that counts); at two elements, indexing is faster than the alternatives, at three, converting to tuple in bulk saves enough over repeated indexing to win. Just for fun, I included an equivalent solution to tuple(l) up there that using the additional unpacking generalizations to build the tuple using dedicated bytecodes, which shows how something as small as replacing a generalized constructor call with dedicated optimized bytecode can make a surprisingly amount of difference in the fixed overhead. What's extra fun about this example: The faster (*l,) solution actually involves two temporaries; BUILD_TUPLE_UNPACK (the byte code that implements it) shares a code path with BUILD_LIST_UNPACK. Both of them actually build a list, and BUILD_TUPLE_UNPACK just converts it to tuple at the end. So (*l,) is hiding yet another copy to a temporary data structure, but because the specialized bytecode is so much more efficient than built-in lookup plus general purpose constructor code paths, it still wins.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/58354904/python-convert-list-of-tuples-into-a-list-of-objects", "keywords": [], "tags": ["python", "list", "tuples", "pack", "unpack"], "question": {"id": 58354904, "title": "Python: Convert list of tuples into a list of objects?", "content": "If I have a list of tuples like the following: Is there a clever way to convert this into a list of objects so that it would be like I did the following instead: I'm hoping for something like\nObjects = create( OBJECT, Data ) I think I managed to figure out how to convert one element at a time using a loop and tuple unpacking (new to me). So essentially, iterate the tuple list and construct one object at a time as I append them to a second list. Is that the best way to handle this? The reason: I'm trying to allow external code to send enum-like properties as a list of tuples, then use that to generate a list of class instances to represent enum-like data. The only reason I need classes at all is to allow external code to reference the data using named members, such as enum_ref.Ident (instead of enum_ref[2]). But maybe there is a better way to handle this type of situation? Really appreciate any advice. I'm inexperienced with Python, so you can safely assume I don't know all of the basics. Edit: Here is the definition of OBJECT. It is a custom class that can be changed however I need in order to make this work:", "abstract": ""}, "answers": [{"id": 58355103, "score": 5, "vote": 0, "content": "I think namedtuple is a nice minimal Python class for convenient access of attributes by name. Here how it would look like After that:  PS substituted your Op.GA for mere strings for the sake of instantly working example.", "abstract": ""}, {"id": 58354928, "score": 8, "vote": 0, "content": "I think you answered this to yourself already, instead of using a loop you can go with a list comprehension:  Although I see the tuples in your Data are missing one parameter for OBJECT construction (the one corresponding to desc).", "abstract": ""}, {"id": 58354976, "score": 1, "vote": 0, "content": "You can use a different approach with the builtin map function like this: Beaware, map only produces an Iterator the list call can not be omitted.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/53545175/converting-tuple-to-list", "keywords": [], "tags": ["python", "list", "tuples"], "question": {"id": 53545175, "title": "Converting tuple to list", "content": "I am trying to convert this tuple into a list, however when I run this code: I receive this error: The output should be:", "abstract": ""}, "answers": [{"id": 53545901, "score": 1, "vote": 0, "content": "I would use itertools.chain.from_iterable (which errs on the side of too much verbosity than too little): Somewhere between the two extremes would be", "abstract": ""}, {"id": 53545308, "score": 9, "vote": 0, "content": "this is what you are looking for", "abstract": ""}, {"id": 53545288, "score": 4, "vote": 0, "content": "If I understood correctly, this is want you want: Output", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/31265092/how-to-convert-a-tuple-of-tuples-to-a-list-of-lists", "keywords": [], "tags": ["python", "list", "tuples"], "question": {"id": 31265092, "title": "How to convert a tuple of tuples to a list of lists?", "content": "I would like to convert the tuple of tuples into a list of lists. I don't want to flatten it, unlike these questions, and I don't want to make it a numpy array like in this question. My only idea so far is to iterate the tuples with for loops and copy the values, but there must be something cleaner and more pythonic.", "abstract": ""}, "answers": [{"id": 31265174, "score": 18, "vote": 0, "content": "Is this what you want? - This is called list comprehension, and when you do list(x) where x is an iterable (which also includes tuples) it converts it into a list of same elements.", "abstract": ""}]}]