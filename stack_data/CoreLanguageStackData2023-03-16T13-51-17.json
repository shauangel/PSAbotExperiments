[
  {
    "link": "https://stackoverflow.com/questions/62328661/what-is-the-difference-between-higher-order-functions-and-decorators",
    "keywords": [],
    "tags": [
      "python"
    ],
    "question": {
      "id": 62328661,
      "title": "What is the difference between higher order functions and decorators?",
      "content": "I do understand that higher-order functions are functions that take functions as parameters or return functions. I also know that decorators are functions that add some functionality to other functions. What are they exactly? Are they the functions that are passed in as parameters or are they the higher-order functions themselves? Note: If you give an example, use python.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 62328997,
        "score": 4,
        "vote": 0,
        "content": "A higher-order function is a function that either takes a function as an argument or returns a function. Decorator syntax is a syntactic shortcut: is just a convenient shorthand for As such, a decorator really is simply a function that takes another function as an argument. It would be more accurate to talk about using f as a decorator than to say that f is a decorator.",
        "abstract": ""
      },
      {
        "id": 62328793,
        "score": 11,
        "vote": 0,
        "content": "A higher order function is a function that takes a function as an argument OR* returns a function. A decorator in Python is (typically) an example of a higher-order function, but there are decorators that aren't (class decorators**, and decorators that aren't functions), and there are higher-order functions that aren't decorators, for example those that take two required arguments that are functions. * Not XOR\n** Whether or not you consider class decorators to be higher-order functions, because classes are callable etc. is up for debate, I guess..",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/74854614/python-pass-function-with-parameters-as-parameter-to-higher-order-function",
    "keywords": [],
    "tags": [
      "python",
      "python-3.x"
    ],
    "question": {
      "id": 74854614,
      "title": "Python pass function with parameters as parameter to higher order function?",
      "content": "When ever I try to pass one function with parameter (test) to a function (await_char) the passod on function executes first skipping the runtime order of await_char? ` ` I tried args, kwargs but I don't know how to make this optional parameter",
      "abstract": ""
    },
    "answers": [
      {
        "id": 74854675,
        "score": 1,
        "vote": 0,
        "content": "Typically when you pass arguments to a function, those arguments are evaluated when the function is called. In your case, you want a pointer to a function that will be called later. There are a few ways to do this, but the simplest and first that comes to mind is via the lambda operator. It allows you to create a nameless function and then use that unnamed function later. But, more than that, when you define the unnamed function, you can pass whatever arguments you want to at the time of definition. So, simplest change to your code is to change: to: Also, as a side note, please be consistent with your argument order. You define: but then later call it via  await_char(param, msg, func) more or less... The order must be maintained, or you will get unexpected results. Also, as a matter of taste, func=\"\" is not the best default choice. Typically for a variable like func, None would be a more common default value. \"\" for msg is a fine choice.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/74483499/python-higher-order-function-with-varying-arguments",
    "keywords": [],
    "tags": [
      "python",
      "python-3.x",
      "higher-order-functions"
    ],
    "question": {
      "id": 74483499,
      "title": "Python Higher order-function with varying arguments",
      "content": "I am trying to write a higher-order function that takes a varying amount of arguments.\nFor instance something like this Is it possible to do this without changing the functions one_arg() or two_arg() ? I've looked into using *argv but I don't think I understand it well enough or see a way to use that without changing those two functions",
      "abstract": ""
    },
    "answers": [
      {
        "id": 74483522,
        "score": 1,
        "vote": 0,
        "content": "you can just use * to define multiple args. Also for more details regarding functions and object oriented programming in python you can refer to this link There are a lot more additional resources available online for you to learn",
        "abstract": ""
      },
      {
        "id": 74483521,
        "score": 0,
        "vote": 0,
        "content": "Define higher and call fnc like this: Within the body of higher, args is a tuple of the positional arguments passed after fnc.  Calling fnc(*args) spreads that tuple into individual positional arguments to fnc.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/73967166/python-simple-higher-order-function-questions",
    "keywords": [],
    "tags": [
      "python",
      "higher-order-functions"
    ],
    "question": {
      "id": 73967166,
      "title": "Python simple Higher Order Function questions",
      "content": "Could someone explain to me the following code and why it returns 4: Also this next code and why it returns 14:",
      "abstract": ""
    },
    "answers": []
  },
  {
    "link": "https://stackoverflow.com/questions/72341337/how-can-i-write-my-own-function-that-accepts-and-uses-a-function-as-a-parameter",
    "keywords": [],
    "tags": [
      "python",
      "functional-programming",
      "higher-order-functions"
    ],
    "question": {
      "id": 72341337,
      "title": "How can I write my own function that accepts and uses a function as a parameter?",
      "content": "I have seen several examples, in the standard library and major third-party libraries, of functions (and methods) that accept a function as input. For example, consider the apply method of Pandas DataFrames. The documentation of the method suggests you can pass another function like sum() or numpy.sqrt() into the function, like  apply(sum) or apply(numpy.sqrt). Similarly, the standard library sorted function explicitly documents that key specifies a function of one argument that is used to extract a comparison key from each element in iterable (for example, key=str.lower). How can I write my own function that works this way, accepting a function as one of the inputs?",
      "abstract": ""
    },
    "answers": [
      {
        "id": 72341442,
        "score": 2,
        "vote": 0,
        "content": "You do this the same way that you would write the function to accept anything else. Python's def statements don't require any type specification: You can pass any object; functions are objects; therefore, you can pass functions: To make it possible to pass the function as an argument, you do exactly nothing. The same applies, mutatis mutandis, to methods as well as ordinary functions: \"But how do I use it inside the function?\" Unless you are doing something really unusual (at a research level way beyond this question), the only really interesting thing to do with a function - aside from passing it around like this - is to call it. You call a function by getting the function, then writing the function-call syntax after it (the argument list between parentheses). Functions are objects; you get objects by evaluating an expression; therefore you get functions by evaluating an expression (as long as it actually does evaluate to a function). Normally, that expression is... the function's name, looked up in the global namespace (as in the above examples). But just as is the case with any other object, you can do it other ways. In particular, you can give the value other names - for example, by passing it as a parameter. That's what happens when you call a function: the function uses its parameter name as a name for whatever was passed as an argument. Including if that's another function. Inside the called function, then, you call the passed function by naming it - with the parameter name - and then using the normal function call syntax. Now the (misleading) message is printed. More complex expressions are possible. One common pattern is to look them up in a dictionary (although 3.10's match... case construct makes this slightly less useful). Another way is to compile code dynamically (there are a lot of approaches for this; all of them are at least somewhat dangerous, so I will not name or show them here. People with a legitimate use for this, also have the skill to do the necessary research.)",
        "abstract": ""
      },
      {
        "id": 72341776,
        "score": 2,
        "vote": 0,
        "content": "A function accepting other functions as argument or returning functions is called higher-order function. So Panda's apply() is a higher-order function. It accepts another function like e.g. sum and calls or invokes it internally as sum(args). To define a higher-order function that accepts a function as argument use a signature as with common functions. In the examples below this will be def md_heading(phrase):. See how to invoke the argument which is expected to be a function: Note: Now try what happens when passing a string literal like `'Hello World' as argument. The invocation of the string passed as argument will raise an error.\nIn exactly that statement return \"# \" + phrase() as: Now you should pass a function as argument, but just as reference (without parentheses): Prints: Hi Or you can pass a lambda as argument: Prints: 'Hello! Note: The lambda must not have a positional argument. This the closes to passing a constant, like the string from the beginning. When we define the lambda with a positional argument like lambda name: \"Hello \" + name here, it will raise: TypeError: <lambda>() missing 1 required positional argument: 'name' because in our higher-order function it is invoked without argument, just as phrase().",
        "abstract": ""
      },
      {
        "id": 72341506,
        "score": 1,
        "vote": 0,
        "content": "What's happening because you give in function apply only link in memory for function sum. And in your apply function this link wiil be called. This function returns you sum 28 and 79 (107).",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/70170618/higher-order-function-data-types-in-python",
    "keywords": [],
    "tags": [
      "python",
      "higher-order-functions",
      "callable"
    ],
    "question": {
      "id": 70170618,
      "title": "Higher-order function data types in python",
      "content": "I have to type hint this function\nI understand that it takes a list and a function f. This is clear.\nit takes the int in the list and does a \"something with the function f and it appends to the string. But what goes into f: as type hint? Callable and then what?",
      "abstract": ""
    },
    "answers": [
      {
        "id": 70170703,
        "score": 0,
        "vote": 0,
        "content": "I have found the solution",
        "abstract": ""
      },
      {
        "id": 70170666,
        "score": 1,
        "vote": 0,
        "content": "The first list should be the types of the arguments to f; the last element should be its return type. Ref: https://docs.python.org/3/library/typing.html#callable",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/70168737/higher-order-function-callable-in-python",
    "keywords": [],
    "tags": [
      "python",
      "higher-order-functions",
      "callable"
    ],
    "question": {
      "id": 70168737,
      "title": "higher-order function callable in python",
      "content": "I have the following code which I struggle to understand.\nIt defines 2 functions and then it assign the the function to h, but what are X and Y? more info\ndef func_max(f: Callable[[int], int], g: Callable[[int], int])-> Callable[[int], int]: that takes as parameters the functions f and g as above. It returns the function h(x) that is defined on integers x and the return value of h on an integer x is equal to the maximum of m and n, where m = f(x) and n = g(x). The exercise is asking to assemble the following in the correct order, which I will try but it does not work, here it goes: For example I don't understand how small x enters into play now...",
      "abstract": ""
    },
    "answers": [
      {
        "id": 70168970,
        "score": 1,
        "vote": 0,
        "content": "High order functional programming can get real weird real quickly. Since this seems to be a homework exercise, I won't give you the straight answer, but consider this: This defines a function that modifies the function it gets passed. I can use it like this: So, make_function_print_arg is a function which takes a function f as an argument. Within its body, it defines a new function. This new function takes a single argument, prints that argument out, then calls f with that single argument. Finally, make_function_print_arg returns the new function it just defined. Later on, we can call make_function_print_arg with a function that we've already defined, which returns a new function that's a lot like our old function, but with some modified behaviour. Now, in your case, you want to define a function which takes two functions as arguments, calls both of them, and returns whichever result is greater. I'm pretty certain that one of the lines you need to unscramble should read, return g(x), so I think either you or your teacher made a typo, but working around that, see if you can use the ideas in make_function_print_arg to manage it! For your own education, you might also want to read about how decorators work, which is quite similar to what you're learning about right now: https://book.pythontips.com/en/latest/decorators.html",
        "abstract": ""
      },
      {
        "id": 70168888,
        "score": 0,
        "vote": 0,
        "content": "In your code, you are calling only f(x) in both if and else statement. You can try:",
        "abstract": ""
      },
      {
        "id": 70168821,
        "score": 3,
        "vote": 0,
        "content": "max_func should return a function that takes an argument (x), applies it to f and g and then return the maximal value:",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/65891682/what-is-the-difference-between-a-higher-order-function-and-a-class",
    "keywords": [],
    "tags": [
      "python",
      "functional-programming",
      "higher-order-functions"
    ],
    "question": {
      "id": 65891682,
      "title": "What is the difference between a higher-order function and a class?",
      "content": "I was going through the basics of functional programming, and eventually came accross the concept of higher-order functions. I saw an example in this video by Corey Schafer (starts at 11:00), which shows a Python function that can wrap messages in arbitrary HTML tags: Output: I get that it gives you the flexibility of re-using the same function for different purposes (different tags, in this example). But you could achieve the same result using Python classes, too: Output: The higher-order function approach definitely looks cleaner, but apart from the aesthetics, are there any other reasons I might want to prefer a higher-order function over a class? E.g., regarding aspects like",
      "abstract": ""
    },
    "answers": [
      {
        "id": 65901747,
        "score": 0,
        "vote": 0,
        "content": "Higher order functions take and/or return functions. Let's look at both cases. Here, a HOF is definitely the way to go. The class version amounts to a HOF with extra steps. For the class version, you need to have pre-negotiated the key the function is callable on. It's really a useless wrapper around the meat of what you're trying to accomplish. In both versions here, what we're doing is creating an encapsulation of some value a, and a function that works over it. I think that a class is generally useful if you want more than one function to be defined over some data, when the encapsulated data can change (you're encoding a state machine), or when you expect operations to be specific to your class (ie. users of your class need to know the operations defined over the class). I would use a function that returns a function, when what I'm doing amounts to partial application, (I have a function that takes multiple parameters, and I want to preapply some, like 'add'). I would also use functools.partial to do this. Ultimately, whether it's best to use a HOF or a class will become clear from context.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/61810217/executing-higher-order-functions",
    "keywords": [],
    "tags": [
      "python",
      "python-3.x",
      "higher-order-functions",
      "first-class-functions"
    ],
    "question": {
      "id": 61810217,
      "title": "Executing higher-order functions",
      "content": "I'm learning the concepts of first class functions and closures in Python and I was curious to know: Given a higher-order function: 1. 2.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 61810298,
        "score": 1,
        "vote": 0,
        "content": "In the example you give, there's no difference in the result. The second way is less efficient, since you're creating an equivalent function multiple times, which is redundant. It becomes more relevant when you have functions that keep state between runs. Every time you call counting_tag() it will return a function with the counter reset back to 0. This will print But if you do it the second way: you'll get",
        "abstract": ""
      },
      {
        "id": 61810249,
        "score": 1,
        "vote": 0,
        "content": "The only advantage I can think of is that by assigning the return value of html_tag to a variable in the first example, you prevent the code from having to execute again and return a new function each time. Whereas in your second example, you are calling html_tag directly and it will produce a new function reference each time, which will result in a decrease in performance.  Depends on your usage, but if you're passing in the same argument to html_tag, then I would go with your first example. But if you need to use a different tag, then obviously you would have to re-call html_tag again with a different argument. In terms of the references to the function, this could be important, for example, if you were for some reason storing the function in a dict, so you wouldn't be able to lookup the function as a key unless you keep around a reference to the same function (as in your first example)",
        "abstract": ""
      },
      {
        "id": 61810300,
        "score": 1,
        "vote": 0,
        "content": "The reason you'd have a higher order function would typically be so that you could easily generate named helper functions like print_h1, as in your first example.  This has two benefits: If you were going to re-invoke html_tag each time, as in your second example, making a higher order function offers no benefit over simply doing:",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/50622857/get-the-input-of-an-higher-order-function-in-python",
    "keywords": [],
    "tags": [
      "python",
      "function",
      "input",
      "arguments",
      "higher-order-functions"
    ],
    "question": {
      "id": 50622857,
      "title": "Get the input of an Higher order function in python",
      "content": "Let's say I have a HOF  One of the input *args for HOF is ('add', another_hof), which require the HOF to add another HOF parameter and return a HOF with added parameter. example: Then, When I am doingx HOF the ('add,x2) for x1 function, is possible me to know the x2' input parameter [2,3,4] inside the function func(*args)?",
      "abstract": ""
    },
    "answers": [
      {
        "id": 50623708,
        "score": 2,
        "vote": 0,
        "content": "As I see it, the core of the problem is: given a reference to a func instance, you need to get the lst value that it contains. One way to do this is to add another mode to your conditional block that returns lst. Let's call it get_lst: Result: You could also assign lst to an attribute of the function object:",
        "abstract": ""
      }
    ]
  }
]