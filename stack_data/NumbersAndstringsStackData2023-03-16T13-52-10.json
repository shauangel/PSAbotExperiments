[{"link": "https://stackoverflow.com/questions/5676646/how-can-i-fill-out-a-python-string-with-spaces", "keywords": [], "tags": ["python", "string", "string-formatting", "pad"], "question": {"id": 5676646, "title": "How can I fill out a Python string with spaces?", "content": "I want to fill out a string with spaces. I know that the following works for zero's: But what should I do when I want this?: of course I can measure string length and do str+\" \"*leftover, but I'd like the shortest way.", "abstract": ""}, "answers": [{"id": 25293744, "score": 199, "vote": 0, "content": "The string format method lets you do some fun stuff with nested keyword arguments. The simplest case: If you want to pass in 16 as a variable: If you want to pass in variables for the whole kit and kaboodle: Which results in (you guessed it): And for all these, you can use python 3.6+ f-strings: And of course the result:", "abstract": ""}, {"id": 54428528, "score": 3, "vote": 0, "content": "A nice trick to use in place of the various print formats: (1) Pad with spaces to the right: (2) Pad with leading zeros on the left: This approach is not recommended in Python but the logic is useful for languages and macros that lack quality text formatting functions. :)", "abstract": ""}, {"id": 5676707, "score": 59, "vote": 0, "content": "Use str.ljust(): You should also consider string.zfill(), str.rjust() and str.center() for string formatting. These can be chained and have the 'fill' character specified, thus: These string formatting operations have the advantage of working in Python v2 and v3. Take a look at pydoc str sometime: there's a wealth of good stuff in there.", "abstract": ""}, {"id": 69220549, "score": 37, "vote": 0, "content": "Since Python3.6 you can use f-strings literal interpolation. Variable space: Constant space: If you want to padd with some other char then space, specify it at the beginning:", "abstract": ""}, {"id": 5676884, "score": 551, "vote": 0, "content": "For a flexible method that works even when formatting complicated string, you probably should use the string-formatting mini-language, using either f-strings or the str.format() method", "abstract": ""}, {"id": 53447710, "score": -3, "vote": 0, "content": "You could do it using list comprehension, this'd give you an idea about the number of spaces too and would be a one liner.", "abstract": ""}, {"id": 38505737, "score": 87, "vote": 0, "content": "Correct way of doing this would be to use Python's format syntax as described in the official documentation For this case it would simply be:\n'{:10}'.format('hi')\nwhich outputs:\n'hi        ' Explanation:   Pretty much all you need to know is there ^. Update: \nas of python 3.6 it's even more convenient with literal string interpolation!", "abstract": ""}, {"id": 38228621, "score": 39, "vote": 0, "content": "As of Python 3.6 you can just do with literal string interpolation. Or, if your padding size is in a variable, like this (thanks @Matt M.!):", "abstract": ""}, {"id": 32578849, "score": 5, "vote": 0, "content": "Wouldn't it be more pythonic to use slicing? For example, to pad a string with spaces on the right until it's 10 characters long: To pad it with spaces on the left until it's 15 characters long: It requires knowing how long you want to pad to, of course, but it doesn't require measuring the length of the string you're starting with.", "abstract": ""}, {"id": 30804390, "score": 7, "vote": 0, "content": "Just remove the 0 and it will add space instead:", "abstract": ""}, {"id": 11635057, "score": 21, "vote": 0, "content": "you can also center your string:", "abstract": ""}, {"id": 5677108, "score": 10, "vote": 0, "content": "Use Python 2.7's mini formatting for strings: This left aligns, and pads to 8 characters with the ' ' character.", "abstract": ""}, {"id": 5676676, "score": 944, "vote": 0, "content": "You can do this with str.ljust(width[, fillchar]): Return the string left justified in a string of length width. Padding is done using the specified fillchar (default is a space). The original string is returned if width is less than len(s).", "abstract": ""}, {"id": 5676673, "score": 87, "vote": 0, "content": "You can try this:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/5254445/how-to-add-a-string-in-a-certain-position", "keywords": [], "tags": ["python", "string"], "question": {"id": 5254445, "title": "How to add a string in a certain position?", "content": "Is there any function in Python that I can use to insert a value in a certain position of a string? Something like this: \"3655879ACB6\" then in position 4 add \"-\" to become \"3655-879ACB6\"", "abstract": ""}, "answers": [{"id": 75084967, "score": 0, "vote": 0, "content": "I'd like to add another simple one-liner-solution ;) '-'.join([_string[:4], _string[4:]]", "abstract": ""}, {"id": 35204678, "score": 7, "vote": 0, "content": "I have made a very useful method to add a string in a certain position in Python: for example: we will have as an output:", "abstract": ""}, {"id": 73115802, "score": 0, "vote": 0, "content": "If you need to insert a given char at multiple locations, always consider creating a list of substrings and then use .join() instead of + for string concatenation. This is because, since Python str are mutable, + string concatenation always adds an aditional overhead. More info can be found here.", "abstract": ""}, {"id": 61415829, "score": 7, "vote": 0, "content": "Python 3.6+ using f-string: gives", "abstract": ""}, {"id": 60106128, "score": 2, "vote": 0, "content": "I think the above answers are fine, but I would explain that there are some unexpected-but-good side effects to them... If the index pos_i is very small (too negative), the insert string gets prepended. If too long, the insert string gets appended. If pos_i is between -len(string_s) and +len(string_s) - 1, the insert string gets inserted into the correct place.", "abstract": ""}, {"id": 42831328, "score": 17, "vote": 0, "content": "Simple function to accomplish this:", "abstract": ""}, {"id": 5254455, "score": 403, "vote": 0, "content": "No. Python Strings are immutable.    It is, however, possible to create a new string that has the inserted character:", "abstract": ""}, {"id": 30559145, "score": -4, "vote": 0, "content": "If you want many inserts", "abstract": ""}, {"id": 5254523, "score": 38, "vote": 0, "content": "As strings are immutable another way to do this would be to turn the string into a list, which can then be indexed and modified without any slicing trickery.  However, to get the list back to a string you'd have to use .join() using an empty string.   I am not sure how this compares as far as performance, but I do feel it's easier on the eyes than the other solutions. ;-)", "abstract": ""}, {"id": 5254480, "score": 85, "vote": 0, "content": "This seems very easy: However if you like something like a function do as this:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/2294493/how-to-get-the-position-of-a-character-in-python", "keywords": [], "tags": ["python", "string"], "question": {"id": 2294493, "title": "How to get the position of a character in Python?", "content": "How can I get the position of a character inside a string in Python?", "abstract": ""}, "answers": [{"id": 2294502, "score": 897, "vote": 0, "content": "There are two string methods for this, find() and index().  The difference between the two is what happens when the search string isn't found.  find() returns -1  and index() raises a ValueError. string.find(s, sub[, start[, end]])\nReturn the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end]. Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices. And: string.index(s, sub[, start[, end]])\nLike find() but raise ValueError when the substring is not found.", "abstract": ""}, {"id": 69850542, "score": 1, "vote": 0, "content": "Most methods I found refer to finding the first substring in a string. To find all the substrings, you need to work around. For example: vars = 'iloveyoutosimidaandilikeyou'", "abstract": ""}, {"id": 48697094, "score": 4, "vote": 0, "content": "more_itertools.locate is a third-party tool that finds all indicies of items that satisfy a condition. Here we find all index locations of the letter \"i\". Given Code", "abstract": ""}, {"id": 65896123, "score": 5, "vote": 0, "content": "Python has a in-built string method that does the work: index(). Where: Let's say you need all the indexes where the character match is and not just the first one. The pythonic way would be to use enumerate(). Or even better with a list comprehension:", "abstract": ""}, {"id": 32794963, "score": 175, "vote": 0, "content": "Just for a sake of completeness, if you need to find all positions of a character in a string, you can do the following: which will print: [4, 9]", "abstract": ""}, {"id": 59759231, "score": 0, "vote": 0, "content": "A solution with numpy for quick access to all indexes:", "abstract": ""}, {"id": 52352779, "score": 8, "vote": 0, "content": "A character might appear multiple times in a string. For example in a string sentence, position of e is 1, 4, 7 (because indexing usually starts from zero). but what I find is both of the functions find() and index() returns first position of a character. So, this can be solved doing this: ", "abstract": ""}, {"id": 46462500, "score": 21, "vote": 0, "content": "Just for completion, in the case I want to find the extension in a file name in order to check it, I need to find the last '.', in this case use rfind: in my case, I use the following, which works whatever the complete file name is:", "abstract": ""}, {"id": 31161614, "score": 17, "vote": 0, "content": "What happens when the string contains a duplicate character?\nfrom my experience with index() I saw that for duplicate you get back the same index. For example: would return: In that case you can do something like that:", "abstract": ""}, {"id": 2294513, "score": 14, "vote": 0, "content": "Perhaps you'd like to have a look at the documentation to find out what the difference between the two is.", "abstract": ""}, {"id": 2294510, "score": 57, "vote": 0, "content": "\"Long winded\" way to get substring, ", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/9440600/python-string-in-place-modification", "keywords": [], "tags": ["python", "string"], "question": {"id": 9440600, "title": "python string in-place modification", "content": "Suppose I want to change 'abc' to 'bac' in Python. What would be the best way to do it? I am thinking of the following", "abstract": ""}, "answers": [{"id": 9440615, "score": 2, "vote": 0, "content": "You are never editing a string \"in place\", strings are immutable.  You could do it with a list but that is wasting code and memory.  Why not just do:  or (personal fav) This might be cheating, but if you really want to edit in place, and are using 2.6 or older,  then use MutableString(this was deprecated in 3.0). With that being said, solutions are generally not as simple as 'abc' = 'bac'  You might want to give us more details on how you need to split up your string.  Is it always just swapping first digits?  ", "abstract": ""}, {"id": 9440735, "score": 1, "vote": 0, "content": "You cannot modify strings in place, they are immutable.  If you want to modify a list in place, you can do it like in your example, or you could use slice assignment if the elements you want to replace can be accessed with a slice:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/72895845/string-formatting-in-place", "keywords": [], "tags": ["python"], "question": {"id": 72895845, "title": "String formatting &quot;in-place&quot;", "content": "I have strings (list of str) containing placeholders {} and want to include variable values into those placeholders. One example of such a string could be 'test_variable = {}'.\nI need to find the index within the list I want to deal with and replace the {} as described. Currently, the code looks like this with find_occurrence_in_str_list() being a simple function that returns the first occurrence of the search string in the list: This is totally fine. However, since I have a lot of such replacements, a better readability, especially a one-liner, would be desired instead of the last two lines. Currently, I just come up with this, which calls the search function twice and is not really more readable: Is there any way of formatting a string in-place instead of just returning the new string and needing to replacing it manually?", "abstract": ""}, "answers": [{"id": 72896175, "score": 1, "vote": 0, "content": "You could use a combination of str.replace() and your function Note: This will replace every {} in the string", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/3463746/in-place-string-modifications-in-python", "keywords": [], "tags": ["python", "string"], "question": {"id": 3463746, "title": "&#39;in-place&#39; string modifications in Python", "content": "In Python, strings are immutable. What is the standard idiom to walk through a string character-by-character and modify it? The only methods I can think of are some genuinely stanky hacks related to joining against a result string. -- In C: This is super expressive and says exactly what I am doing. That is what I am looking for. ", "abstract": ""}, "answers": [{"id": 68846773, "score": -1, "vote": 0, "content": "Here's my pythonic solution for In-place string reversal. Accounts for white spaces too. Note: It won't match any special characters if included in input_string except for underscore ( '_' ) i/p - \"Hello World\" => o/p - \"olleH dlroW\"", "abstract": ""}, {"id": 58006030, "score": 0, "vote": 0, "content": "I did that like this:", "abstract": ""}, {"id": 53449710, "score": 5, "vote": 0, "content": "The question first states that strings are immutable and then asks for a way to change them in place. This is kind of contradictory. Anyway, as this question pops up at the top of the list when you search for \"python string in-place modification\", I'm adding the answer for a real in place change. Strings seem to be immutable when you look at the methods of the string class. But no language with an interface to C can really provide immutable data types. The only question is whether you have to write C code in order to achieve the desired modification. Here python ctypes is your friend. As it supports getting pointers and includes C-like memory copy functions, a python string can be modified in place like this: Results in: (Of course, you can calculate the replacement string at runtime by applying a function F to every character of the original string. Different ways how to do this have been shown in the previous answers.) Note that I do not in any way encourage doing this. However, I had to write a replacement for a class that was mapped from C++ to python and included a method: (The caller is supposed to provide memory with length bytes and the method then writes the available data -- up to length -- into that memory, returning the number of bytes written.) While this is a perfectly sensible API in C/C++, it should not have been made available as method of a python class or at least the users of the API should be made aware that they may only pass mutable byte arrays as parameter.  As you might expect, \"common usage\" of the method is as shown in my example (create a string and pass it together with its length as arguments). As I did not really want to write a C/C++ extension I had to come up with a solution for implementing the behavior in my replacement class using python only.", "abstract": ""}, {"id": 3463830, "score": 0, "vote": 0, "content": "You can use StringIO class to receive file-like mutable interface of string. ", "abstract": ""}, {"id": 3464238, "score": 7, "vote": 0, "content": "I'd say the most Pythonic way is to use map(): This is the equivalent of writing:", "abstract": ""}, {"id": 3463769, "score": 3, "vote": 0, "content": "string.translate is probably the closest function to what you're after.", "abstract": ""}, {"id": 3463789, "score": 23, "vote": 0, "content": "Don't use a string, use something mutable like bytearray: Results in: Edit: Since this is a bytearray, you aren't (necessarily) working with characters. You're working with bytes. So this works too: gives: If you want to modify characters in a Unicode string, you'd maybe want to work with memoryview, though that doesn't support Unicode directly.", "abstract": ""}, {"id": 3463868, "score": 19, "vote": 0, "content": "The Python analog of your C: would be: which is also very expressive.  It says exactly what is happening, but in a functional style rather than a procedural style.", "abstract": ""}, {"id": 3463853, "score": 1, "vote": 0, "content": "Here is an example using translate to switch \"-\" with \".\" and uppercase \"a\"s This is much more efficient that flipping to byte array and back if you just need to do single char replacements", "abstract": ""}, {"id": 3463847, "score": 11, "vote": 0, "content": "you can use the UserString module:", "abstract": ""}, {"id": 3463821, "score": 1, "vote": 0, "content": "If I ever need to do something like that I just convert it to a mutable list For example... (though it would be easier to use sort (see second example) )", "abstract": ""}, {"id": 3463797, "score": 2, "vote": 0, "content": "Assigning a particular character to a particular index in a string is not a particularly common operation, so if you find yourself needing to do it, think about whether there may be a better way to accomplish the task. But if you do need to, probably the most standard way would be to convert the string to a list, make your modifications, and then convert it back to a string. EDIT: As posted in bstpierre's answer, bytearray is probably even better for this task than list, as long as you're not working with Unicode strings.", "abstract": ""}, {"id": 3463795, "score": 0, "vote": 0, "content": "", "abstract": ""}, {"id": 3463768, "score": 1, "vote": 0, "content": "If you want to store this new string you'll have to mystring = mystring.replace(\"1\", \"i\"). This is because in Python strings are immutable.", "abstract": ""}, {"id": 3463767, "score": 2, "vote": 0, "content": "Strings are iterable and can be walked through like lists.  Strings also have a number of basic methods such as .replace() that might be what you're looking for.  All string methods return a new string. So instead of modifying the string in place you can simply replace its existing value.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/71230406/how-to-format-print-string-to-2-decimal-places-as-well-as-right-aligning-each-se", "keywords": [], "tags": ["python", "pandas"], "question": {"id": 71230406, "title": "How to format print string to 2 decimal places as well as right aligning each set of values", "content": "Once the user selects a colchoice to view the statistics for a given column. I would like to print the output line by line, also to 2 decimal places and get each row to align properly. How can I go about this?", "abstract": ""}, "answers": [{"id": 71230718, "score": 0, "vote": 0, "content": "See the format documentation here -- https://docs.python.org/3/library/string.html#format-specification-mini-language There are examples for aligning and padding lines.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/56589536/reverse-the-string-in-place-in-python", "keywords": [], "tags": ["python", "in-place"], "question": {"id": 56589536, "title": "Reverse the string (IN PLACE) in python", "content": "I want to know how to reverse a string in python without creating a new one.  I can't seem to get it.", "abstract": ""}, "answers": [{"id": 56589595, "score": 1, "vote": 0, "content": "Python strings are immutable, which means you can't really change it. There's no way you could reverse it in-place. Obviously, you could reassign the same variable to it, but this is not an in-place change as you asked for:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/41563881/how-to-include-in-string-formats-in-python-2-7", "keywords": [], "tags": ["python", "python-2.7", "list", "string-formatting"], "question": {"id": 41563881, "title": "How to include % in string formats in Python 2.7?", "content": "I am trying to append % in a string using string formats. I am trying to get the below output:  Try 1 : Error : Try 2: Error : How do I include a % in my formatted string?", "abstract": ""}, "answers": [{"id": 41563963, "score": 10, "vote": 0, "content": "To include a percent % into a string which will be used for a printf style string format, simply escape the % by including a double percent %% (Docs)", "abstract": ""}, {"id": 41564104, "score": 6, "vote": 0, "content": "In your first try, the way you use \"%\" is wrong; the code below could work for your first try. Since the \"%\" is special in python string, so you need to add a \"%\" before the real \"%\" to escape. In your second try, there is nothing wrong in your print, you forgot a \")\" in your a.append line. ;-)", "abstract": ""}, {"id": 41564139, "score": 5, "vote": 0, "content": "just put the % there, no need to set the variable the output is a : [\" name like '%FTa0213' \"]", "abstract": ""}, {"id": 41564080, "score": 3, "vote": 0, "content": "You can escape the percent sign by doubling it. output However, I think it's clearer to use the format method:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/16689643/inserting-another-character-in-place-of-spaces-in-python", "keywords": [], "tags": ["python", "string"], "question": {"id": 16689643, "title": "Inserting another character in place of spaces in Python", "content": "Lets say I have a String: The Quick Brown Fox. I want to insert a character in place of the spaces. So that it becomes: The-Quick-Brown-Fox I could do that manually by iterating throughout the string checking for spaces. But I was wondering if there's a elegant way of doing that by using some python built-in functions?", "abstract": ""}, "answers": [{"id": 16689652, "score": 7, "vote": 0, "content": "Maybe you want to replace any whitespace, in which case: or using regex:", "abstract": ""}]}]