[{"link": "https://stackoverflow.com/questions/9189172/why-doesnt-calling-a-string-method-such-as-replace-or-strip-modify-mutate", "keywords": [], "tags": ["python", "string"], "question": {"id": 9189172, "title": "Why doesn&#39;t calling a string method (such as .replace or .strip) modify (mutate) the string?", "content": "I tried this code to do simple string replacement: Why doesn't X change, from \"hello world\" to \"goodbye world\"?", "abstract": ""}, "answers": [{"id": 65553355, "score": -2, "vote": 0, "content": "Example for String Methods Given a list of filenames, we want to rename all the files with extension hpp to the extension h. To do this, we would like to generate a new list called newfilenames, consisting of the new filenames.", "abstract": ""}, {"id": 9189193, "score": 251, "vote": 0, "content": "This is because strings are immutable in Python. Which means that X.replace(\"hello\",\"goodbye\") returns a copy of X with replacements made. Because of that you need replace this line: with this line: More broadly, this is true for all Python string methods that change a string's content \"in-place\", e.g. replace,strip,translate,lower/upper,join,... You must assign their output to something if you want to use it and not throw it away, e.g. and so on.", "abstract": ""}, {"id": 48431417, "score": 0, "vote": 0, "content": "All string functions as lower, upper, strip are returning a string without modifying the original. If you try to modify a string, as you might think well it is an iterable, it will fail.  There is a good reading about the importance of strings being immutable: Why are Python strings immutable? Best practices for using them", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/3061/calling-a-function-of-a-module-by-using-its-name-a-string", "keywords": [], "tags": ["python", "object", "reflection"], "question": {"id": 3061, "title": "Calling a function of a module by using its name (a string)", "content": "How do I call a function, using a string with the function's name? For example:", "abstract": ""}, "answers": [{"id": 4605, "score": 460, "vote": 0, "content": "Based on Patrick's solution, to get the module dynamically as well, import it using:", "abstract": ""}, {"id": 834451, "score": 736, "vote": 0, "content": "Using locals(), which returns a dictionary with the current local symbol table: Using globals(), which returns a dictionary with the global symbol table:", "abstract": ""}, {"id": 3071, "score": 2804, "vote": 0, "content": "Given a module foo with method bar: getattr can similarly be used on class instance bound methods, module-level methods, class methods... the list goes on.", "abstract": ""}, {"id": 70526558, "score": -2, "vote": 0, "content": "You means get the pointer to an inner function from a module This is not a better pythonic way indeed is possible for punctual cases", "abstract": ""}, {"id": 69249811, "score": 9, "vote": 0, "content": "Nobody mentioned operator.attrgetter yet:", "abstract": ""}, {"id": 68283436, "score": 16, "vote": 0, "content": "In python3, you can use the __getattribute__ method. See following example with a list method name string:", "abstract": ""}, {"id": 67982516, "score": 3, "vote": 0, "content": "i'm facing the similar problem before, which is to convert a string to a function. but i can't use eval() or ast.literal_eval(), because i don't want to execute this code immediately. e.g. i have a string \"foo.bar\", and i want to assign it to x as a function name instead of a string, which means i can call the function by x() ON DEMAND. here's my code: as for your question, you only need to add your module name foo and . before {} as follows: WARNING!!! either eval() or exec() is a dangerous method, you should confirm the safety.\nWARNING!!! either eval() or exec() is a dangerous method, you should confirm the safety.\nWARNING!!! either eval() or exec() is a dangerous method, you should confirm the safety.", "abstract": ""}, {"id": 62937980, "score": 17, "vote": 0, "content": "Although getattr() is elegant (and about 7x faster) method, you can get return value from the function (local, class method, module) with eval as elegant as x = eval('foo.bar')(). And when you implement some error handling then quite securely (the same principle can be used for getattr). Example with module import and class: When module or class does not exist (typo or anything better) then NameError is raised. When function does not exist, then AttributeError is raised. This can be used to handle errors:", "abstract": ""}, {"id": 62672406, "score": 8, "vote": 0, "content": "getattr calls method by name from an object.\nBut this object should be parent of calling class.\nThe parent class can be got by super(self.__class__, self)", "abstract": ""}, {"id": 57696855, "score": -14, "vote": 0, "content": "This is a simple answer, this will allow you to clear the screen for example. There are two examples below, with eval and exec, that will print 0 at the top after cleaning (if you're using Windows, change clear to cls, Linux and Mac users leave as is for example) or just execute it, respectively.", "abstract": ""}, {"id": 55363812, "score": 20, "vote": 0, "content": "As this question How to dynamically call methods within a class using method-name assignment to a variable [duplicate] marked as a duplicate as this one, I am posting a related answer here: The scenario is, a method in a class want to call another method on the same class dynamically, I have added some details to original example which offers some wider scenario and clarity: Output (Python 3.7.x) function1: 12  function2: 12", "abstract": ""}, {"id": 41024742, "score": 42, "vote": 0, "content": "Try this. While this still uses eval, it only uses it to summon the function from the current context. Then, you have the real function to use as you wish. The main benefit for me from this is that you will get any eval-related errors at the point of summoning the function. Then you will get only the function-related errors when you call.", "abstract": ""}, {"id": 40219576, "score": 88, "vote": 0, "content": "The best answer according to the Python programming FAQ would be: The primary advantage of this technique is that the strings do not need to match the names of the functions. This is also the primary technique used to emulate a case construct", "abstract": ""}, {"id": 12025554, "score": 158, "vote": 0, "content": "Just a simple contribution. If the class that we need to instance is in the same file, we can use something like this: For example: And, if not a class:", "abstract": ""}, {"id": 22959509, "score": 71, "vote": 0, "content": "The answer (I hope) no one ever wanted Eval like behavior Why not add auto-importing In case we have extra dictionaries we want to check We need to go deeper", "abstract": ""}, {"id": 19393328, "score": 154, "vote": 0, "content": "Given a string, with a complete python path to a function, this is how I went about getting the result of said function:", "abstract": ""}, {"id": 14072943, "score": 19, "vote": 0, "content": "none of what was suggested helped me. I did discover this though. I am using python 2.66  Hope this helps", "abstract": ""}, {"id": 9272378, "score": 43, "vote": 0, "content": "For what it's worth, if you needed to pass the function (or class) name and app name as a string, then you could do this:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/72196477/string-method-doesnt-work-in-function-python", "keywords": [], "tags": ["python"], "question": {"id": 72196477, "title": "String method doesn`t work in Function // Python", "content": "I've created this function to trim spaces in between words in string to run over them and get upper and lower case letters count.\nThe trouble is that \"replace\" method doesn't change the string and all spaces are counted as lowercase letters. I couldn't figure out why, so I wrote If statement to pass every time if i == \" \" ( which I actually didn't like), Is there any idea what I've done wrong? My code: My output:", "abstract": ""}, "answers": [{"id": 72196549, "score": 1, "vote": 0, "content": "You need to store the replace function return value in the same or diff variable. Also, I would like to suggest the best approach for this.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/251464/how-to-get-a-function-name-as-a-string", "keywords": [], "tags": ["python", "string", "function"], "question": {"id": 251464, "title": "How to get a function name as a string?", "content": "How do I get a function's name as a string?", "abstract": ""}, "answers": [{"id": 71002981, "score": 6, "vote": 0, "content": "You can get a function's name as a string by using the special __name__ variable.", "abstract": ""}, {"id": 65110612, "score": 9, "vote": 0, "content": "or:", "abstract": ""}, {"id": 63857383, "score": 5, "vote": 0, "content": "Try further reference\nhttps://www.oreilly.com/library/view/python-cookbook/0596001673/ch14s08.html", "abstract": ""}, {"id": 55253296, "score": 37, "vote": 0, "content": "where stack()[0] is the caller stack()[3] is the string name of the method", "abstract": ""}, {"id": 18543271, "score": 18, "vote": 0, "content": "sys._getframe() is not guaranteed to be available in all implementations of Python (see ref) ,you can use the traceback module to do the same thing, eg. A call to stack[-1] will return the current process details.", "abstract": ""}, {"id": 58548220, "score": 16, "vote": 0, "content": "I've seen a few answers that utilized decorators, though I felt a few were a bit verbose. Here's something I use for logging function names as well as their respective input and output values. I've adapted it here to just print the info rather than creating a log file and adapted it to apply to the OP specific example. Output:", "abstract": ""}, {"id": 13514318, "score": 396, "vote": 0, "content": "To get the current function's or method's name from inside it, consider: sys._getframe also works instead of inspect.currentframe although the latter avoids accessing a private function. To get the calling function's name instead, consider f_back as in inspect.currentframe().f_back.f_code.co_name. If also using mypy, it can complain that: error: Item \"None\" of \"Optional[FrameType]\" has no attribute \"f_code\" To suppress the above error, consider:", "abstract": ""}, {"id": 49322993, "score": 22, "vote": 0, "content": "You just want to get the name of the function here is a simple code for that.\nlet say you have these functions defined the output will be function1 Now let say you have these functions in a list to get the name of the functions the output will be function1\nfunction2\nfunction3", "abstract": ""}, {"id": 47155992, "score": 49, "vote": 0, "content": "If you're interested in class methods too, Python 3.3+ has __qualname__ in addition to __name__.", "abstract": ""}, {"id": 38453402, "score": 28, "vote": 0, "content": "I  like using a function decorator.\nI added a class, which also times the function time. Assume gLog is a standard python logger: so now all you have to do with your function is decorate it and voila", "abstract": ""}, {"id": 36228241, "score": 20, "vote": 0, "content": "As an extension of @Demyn's answer, I created some utility functions which print the current function's name and current function's arguments:", "abstract": ""}, {"id": 20714270, "score": 39, "vote": 0, "content": "This function will return the caller's function name. It is like Albert Vonpupp's answer with a friendly wrapper.", "abstract": ""}, {"id": 255297, "score": 1319, "vote": 0, "content": "Using __name__ is the preferred method as it applies uniformly. Unlike func_name, it works on built-in functions as well: Also the double underscores indicate to the reader this is a special attribute. As a bonus, classes and modules have a __name__ attribute too, so you only have remember one special name.", "abstract": ""}, {"id": 251469, "score": 47, "vote": 0, "content": "There are also other fun properties of functions. Type dir(func_name) to list them. func_name.func_code.co_code is the compiled function, stored as a string. will display the code in almost human readable format. :)", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/70950737/where-can-you-find-the-list-of-all-the-methods-supported-by-strings-in-python", "keywords": [], "tags": ["python"], "question": {"id": 70950737, "title": "Where can you find the list of all the methods supported by strings in python?", "content": "Where can you find the list of all the methods supported by strings in python", "abstract": ""}, "answers": [{"id": 70950783, "score": -1, "vote": 0, "content": "The easiest way to find all methods & attributes correspondent for objects/class: To only get method: And to about thier functionality or defination:\nSuppose, str has method called zfill. But what thats mean?", "abstract": ""}, {"id": 70950764, "score": 3, "vote": 0, "content": "In the official documentation: String Methods", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/66038351/python-string-methods-in-a-variable", "keywords": [], "tags": ["python"], "question": {"id": 66038351, "title": "Python string methods in a variable", "content": "Can a string method, such as .rjust(), be saved in a variable and applied to a string? Looked here but could not find a solution. For example, instead of stating rjust(4, '-') twice, can it be coded once in a variable and then passed to the two strings? Both result in:", "abstract": ""}, "answers": [{"id": 66038429, "score": 5, "vote": 0, "content": "Why not just define a function like this:", "abstract": ""}, {"id": 66038426, "score": 2, "vote": 0, "content": "A similar result to what you are looking for would be the following Rather than applying the \"variable\" to the string, it passes the string to a function that performs the desired operation.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/65229751/how-can-i-use-the-string-in-the-list-as-string-methods-in-python", "keywords": [], "tags": ["python", "python-3.x", "list", "loops", "class-method"], "question": {"id": 65229751, "title": "How can I use the string in the list as string methods in python?", "content": "I am trying to print some given string in three different ways provided by string methods which are inside a list as strings. Is there a way to convert those strings as methods to use it during loop iteration?", "abstract": ""}, "answers": [{"id": 65229909, "score": 1, "vote": 0, "content": "If you have the methods as strings, you can do this:", "abstract": ""}, {"id": 65229844, "score": 1, "vote": 0, "content": "In this case you can do something like:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/61804227/order-in-execution-of-multiple-string-methods-in-python", "keywords": [], "tags": ["python", "string", "function", "methods"], "question": {"id": 61804227, "title": "Order in execution of multiple string methods in Python", "content": "I realised when I run the below code, it fails with below error message, but when I rearranged the order of methods, it works fine. It seems to me that there's a sequence (an order) in running methods as such. Could someone explain that logic and execution sequence for extended range of all string methods please?", "abstract": ""}, "answers": [{"id": 61804354, "score": 1, "vote": 0, "content": "It executes from left to right. As Torxed mentioned, in the order you write them. So for instance, teststr.upper() returns a String object that has been converted to uppercase. That string object has the method split(), so it works just fine. teststr.split() returns a list of string objects. A list doesn't have the upper() method, so it fails.  You could, however, do something like:  ", "abstract": ""}, {"id": 61804347, "score": 1, "vote": 0, "content": "They're executed from left to right. is equivalent to", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/60716948/custom-string-function", "keywords": [], "tags": ["python", "string", "function", "class"], "question": {"id": 60716948, "title": "Custom string function", "content": "I would like to make a function similar to the built-in functions for strings in python. For example:\nfoo.upper() I would not like to have to make an object to do this, just change the string with a simple function within a class. Here is what the code would be similar to", "abstract": ""}, "answers": []}, {"link": "https://stackoverflow.com/questions/60611446/how-to-perform-a-method-on-a-string-in-list-in-a-list-in-python", "keywords": [], "tags": ["python", "string", "list"], "question": {"id": 60611446, "title": "How to perform a method on a string in list in a list in Python", "content": "I would appreciate some help. I have a list of lists. The list containing all lists is called all_lists. In the lists of all_lists are strings. I want to apply a method on the text of each string in each list. I want to create a for loop which will allow me to alter all the strings with a method, and put them back in lists, and puts all lists back in the all_lists. This is what I have for now: I am unsure how to put every list back in a list containing all lists. Can anyone help me do this? Example if the method was to capitalize every string: from: to:", "abstract": ""}, "answers": [{"id": 60611554, "score": 1, "vote": 0, "content": "You can apply function to each element of list using map: Code: This is not limited; we can apply any custom function to transform elements in list, on your example:", "abstract": ""}, {"id": 60611533, "score": 0, "vote": 0, "content": "You can use for loops or list comprehension to achieve the result in your example. As a function, we can perform the upper for every element in the list, using a for loop. Furthermore you can use list comprehension to compress the above into a single line of code. Both of these would work over nested lists including multiple elements such as;", "abstract": ""}, {"id": 60611496, "score": 0, "vote": 0, "content": "A functional approach using map and filter would be a useful way.  See a similar question below:\nApply function to each element of a list", "abstract": ""}]}]