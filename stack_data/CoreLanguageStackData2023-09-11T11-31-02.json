[{"link": "https://stackoverflow.com/questions/77054732/python-what-does-do-in-a-function-definition", "keywords": [], "tags": ["python"], "question": {"id": 77054732, "title": "Python: What does &#39;/&#39; do in a function definition?", "content": "def my_func(x, y, /, *, z = True): What does the '/' and '*' do in this implementation?", "abstract": ""}, "answers": [{"id": 77054740, "score": 1, "vote": 0, "content": "The asterisk (*) and forward slash (/) define whether you can pass positional or keyword arguments to your functions. The forward slash, when used in parameter list, indicates that all parameters to the left of it must be positional-only. The asterisk, similarly, indicates that all parameters to the right of it must be keyword-only.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/76416817/got-an-unexpected-keyword-argument-when-calling-function-with-args", "keywords": [], "tags": ["python", "arguments"], "question": {"id": 76416817, "title": "Got an unexpected keyword argument when calling function with *args", "content": "I have a Python framework that I'm trying to get to know. One of the classes has the following __init__(): Usually (for clarity for myself), I try to call functions using their keywords, such as: The exception I get when instantiating the class as above is Destination.__init__() got an unexpected keyword argument 'aspects'. I think this is because the aspects argument is not really a keyword argument but rather a list of additional positional arguments.\nOk, so it isn't really a kwarg, so I tried passing the 'minimalsample' argument as the first: But then I get TypeError: got multiple values for argument 'identity' I think I see what is wrong here, but I have no idea how to call the function while retaining the clarity of using the keywords. Is there a good way? This might have been asked before (plenty of times even), but I can't seem to find the answer with the search terms I'm using.", "abstract": ""}, "answers": [{"id": 76417533, "score": 1, "vote": 0, "content": "The documented\nsignature\nis pretty clear. RNS.Destination(identity, direction, type, app_name, *aspects) It requires you to call it like this: That approach would work just the same if aspects was a single-element list. Here are equivalent ways of passing in 1 or 2 aspects: The *args notation indicates we're passing in a list of zero or more arguments.\nIt happens that this particular library wants more than zero arguments. The authors of this package could have chosen to accept\nan aspects: list[str] argument,\nor even aspects: list[str] | str,\nbut that's not what they implemented.\nThe 1st alternative forces callers to use more [ ] brackets\nthan they might prefer for a common single-aspect use case.\nThe 2nd alternative trades convenience against simple type-safety\narguments. Sometimes you'll see a signature like this: def foo(a, b, c, d=None, e=0): You could call that with Since Destination accepts a variable number of\naspect strings, you don't have a choice, you need\nto list four positional args,\nthen one-or-more aspects,\nfollowed by zero keyword args,\nif you want the bytecode to push\nall the right things onto the stack\nby the time the constructor executes. If you want to better understand the details,\ndisassemble\nthe bytecode of some calling function. When a library author is designing a Public API,\nthere's more than one way to force callers to use positional args. https://docs.python.org/3/faq/programming.html#what-does-the-slash-in-the-parameter-list-of-a-function-mean What does the slash(/) in the parameter list of a function mean? A slash in the argument list of a function denotes that the parameters prior to it are positional-only. Positional-only parameters are the ones without an externally usable name. The documentation\nrefers to PEP-570,\nwhich explains When designing APIs, library authors try to ensure correct and intended usage of an API and continues with a discussion of the careful choosing of names\nand several challenges. Something you're likely to see more often in\nsignatures is a bare * star, which introduces\nkeyword-only args.\nFor example, a library author who is concerned\nabout (x, y) vs (y, x) confusion,\nstemming from (lat, long) vs (long, lat),\nmight choose a signature like this: This prevents attempted (incorrect!) calls such as and requires a more explicit", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/24735311/what-does-the-slash-mean-when-help-is-listing-method-signatures", "keywords": [], "tags": ["python", "python-3.x", "parameters", "introspection"], "question": {"id": 24735311, "title": "What does the slash mean when help() is listing method signatures?", "content": "What does the / mean in Python 3.4's help output for range before the closing parenthesis?", "abstract": ""}, "answers": [{"id": 59642921, "score": 38, "vote": 0, "content": "Forward Slash (/) indicates all arguments prior to it are positional only argument. Positional only arguments feature was added in python 3.8 after PEP 570 was accepted. Initially this notation was defined in PEP 457 - Notation For Positional-Only Parameters Parameters in function definition prior Foraward slash (/) are positional only and parameters followed by slash(/) can be of any kind as per syntax. Where arguments are mapped to positional only parameters solely based on their position upon calling a function. Passing positional-only parameters by keywords(name) is invalid. Let's take following example Here in the above function definition parameters a and b are positional-only, while x or y can be either positional or keyword. Following function calls are valid But, following function call is not valid which raises an exception TypeError since a, b are not passed as positional arguments instead passed as keyword TypeError: foo() got some positional-only arguments passed as keyword\narguments: 'a, b' Many built in function in python accept positional only arguments where passing arguments by keyword doesn't make sense. For example built-in function len accepts only one positional(only) argument, Where calling len as len(obj=\"hello world\")  impairs readability, check help(len). Positional only parameters make underlying c/library functions easy to maintain. It allows parameters names of positional only parameters to be changes in future without risk of breaking client code that uses API Last but not least, positional only parameters allow us to use their names to be used in variable length keyword arguments. Check following example Positional-only parameters syntax was officially added to python3.8. Checkout what's new python3.8 - positional only arguments PEP Related: PEP 570 -- Python Positional-Only Parameters", "abstract": ""}, {"id": 24735582, "score": 303, "vote": 0, "content": "It signifies the end of the positional only parameters, parameters you cannot use as keyword parameters. Before Python 3.8, such parameters could only be specified in the C API. It means the key argument to __contains__ can only be passed in by position (range(5).__contains__(3)), not as a keyword argument (range(5).__contains__(key=3)), something you can do with positional arguments in pure-python functions. Also see the Argument Clinic documentation: To mark all parameters as positional-only in Argument Clinic, add a / on a line by itself after the last parameter, indented the same as the parameter lines. and the (very recent addition to) the Python FAQ: A slash in the argument list of a function denotes that the parameters prior to it are positional-only. Positional-only parameters are the ones without an externally-usable name. Upon calling a function that accepts positional-only parameters, arguments are mapped to parameters based solely on their position. The syntax is now part of the Python language specification, as of version 3.8, see PEP 570 \u2013 Python Positional-Only Parameters. Before PEP 570, the syntax was already reserved for possible future inclusion in Python, see PEP 457 - Syntax For Positional-Only Parameters.  Positional-only parameters can lead to cleaner and clearer APIs, make pure-Python implementations of otherwise C-only modules more consistent and easier to maintain, and because positional-only parameters require very little processing, they lead to faster Python code.", "abstract": ""}, {"id": 56212520, "score": 90, "vote": 0, "content": "I asked this question myself. :) Found out that / was originally proposed by Guido in here. Alternative proposal: how about using '/' ? It's kind of the opposite\n  of '*' which means \"keyword argument\", and '/' is not a new character. Then his proposal won. Heh. If that's true, my '/' proposal wins: I think the very relevant document covering this is PEP 570.\nWhere recap section looks nice. Recap The use case will determine which parameters to use in the function definition: As guidance: Use positional-only if names do not matter or have no meaning, and there are only a few arguments which will always be passed in the same order.\n     Use keyword-only when names have meaning and the function definition is more understandable by being explicit with names. If the function ends with / This means all functional arguments are positional. ", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/52839856/how-to-implement-positional-only-parameter-in-a-user-defined-function-in-pytho", "keywords": [], "tags": ["python", "python-3.x", "function", "parameters", "pep570"], "question": {"id": 52839856, "title": "How to implement &quot;positional-only parameter&quot; in a user defined function in python?", "content": "How can I implement \"positional-only parameter\" for a function that is user defined in python?", "abstract": ""}, "answers": [{"id": 59643304, "score": 1, "vote": 0, "content": "Positional only arguments feature was added in python 3.8 after PEP 570 was accepted, before it was found in documentation in function signature to indicate function doesn't take any keyword arguments. Parameters in function definition prior Forward slash (/) are\npositional only and parameters followed by slash(/) can be of any kind\nas per syntax. Where arguments are mapped to positional only\nparameters solely based on their position upon calling a function.\nPassing positional-only parameters by keywords(name) is invalid. Following example show function definition with positional only parameters In the above function definition parameter a and b have to be passed as positional only arguments while x or y can be either positional or keyword. Following function calls are valid Following function call will raise an exception TypeError since a and be are passed as keyword arguments. TypeError: foo() got some positional-only arguments passed as keyword\narguments: 'a, b' It is possible to define a function to accept positional only argument by adding forward slash (/) as last parameter in function definition. In the above function definition all parameter (x and y) are positional only. Here, Passing arguments by their name not valid which will result in TypeError. pow(2, 3); pow(3, 9) are valid while pow(x=3, y=9) is invalid which will raise TypeError", "abstract": ""}, {"id": 52840076, "score": 4, "vote": 0, "content": "Update: this answer will become increasingly out-dated; please see https://stackoverflow.com/a/56149093/1126841 instead. The only solution would be to use a *-parameter, like so: But this comes with its own problems: you can't guaranteed the caller will provide exactly two arguments; your function has to be prepared to handle 0 or 1 arguments. (It's easy enough to ignore extra arguments, so I won't belabor the point.)", "abstract": ""}, {"id": 56149093, "score": 9, "vote": 0, "content": "Before Python 3.8, the / syntax was only documentational. Starting from 3.8, you can use it for specifying positional-only parameters in function definitions. Example: Now pow(2, 10) and pow(2, 10, 17) are valid calls, but pow(x=2, y=10) and pow(2, 10, z=17) are invalid. See PEP 570 for more details.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/59661042/what-do-single-star-and-slash-do-as-independent-parameters", "keywords": [], "tags": ["python", "python-3.x", "function", "parameter-passing", "function-parameter"], "question": {"id": 59661042, "title": "What do * (single star) and / (slash) do as independent parameters?", "content": "In the following function definition, what do the * and / account for? NOTE: Not to mistake with the single|double asterisks in *args | **kwargs (solved here)", "abstract": ""}, "answers": [{"id": 59661137, "score": 91, "vote": 0, "content": "There is a new function parameter syntax / to indicate that some function parameters must be specified positionally and cannot be used as keyword arguments.[This is new in Python 3.8] Documentation specifies some of the use cases/benefits of positional-only parameters. It allows pure Python functions to fully emulate behaviors of\nexisting C coded functions. For example, the built-in pow()\nfunction does not accept keyword arguments: Another use case is to preclude keyword arguments when the parameter\nname is not helpful. For example, the builtin len() function has\nthe signature len(obj, /). This precludes awkward calls such as: A further benefit of marking a parameter as positional-only is that\nit allows the parameter name to be changed in the future without\nrisk of breaking client code. For example, in the statistics module,\nthe parameter name dist may be changed in the future. This was made\npossible with the following function specification: Where as * is used to force the caller to use named arguments. Django documentation contains a section which clearly explains a  usecase of named arguments. Form fields no longer accept optional arguments as positional\narguments To help prevent runtime errors due to incorrect ordering of\nform field arguments, optional arguments of built-in form fields are\nno longer accepted as positional arguments. For example: forms.IntegerField(25, 10) raises an exception and should be replaced\nwith: forms.IntegerField(max_value=25, min_value=10) Suppose we have a method called func, It must called with or ie, DEMO:", "abstract": ""}, {"id": 59661122, "score": 5, "vote": 0, "content": "As mentioned in the docs, the slash is for positional-only arguments, as the docs says: There is a new function parameter syntax / to indicate that some function parameters must be specified positionally and cannot be used as keyword arguments. This is the same notation shown by help() for C functions annotated with Larry Hastings\u2019 Argument Clinic tool. And for the asterisk, it's mentioned here in the docs: For a parameter with a default value, the corresponding argument may be omitted from a call, in which case the parameter\u2019s default value is substituted. If a parameter has a default value, all following parameters up until the \u201c*\u201d must also have a default value \u2014 this is a syntactic restriction that is not expressed by the grammar. So the ways to call this would be: And:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/28243832/what-is-the-meaning-of-a-forward-slash-in-a-python-method-signature-as-show", "keywords": [], "tags": ["python", "inspection", "python-interactive"], "question": {"id": 28243832, "title": "What is the meaning of a forward slash &quot;/&quot; in a Python method signature, as shown by help(foo)?", "content": "In the signature returned interactively by help(foo), what is the meaning of a /? I thought it might be related to keyword-only arguments, but it's not.  When I create my own function with keyword-only arguments, positional and keyword-only arguments are separated by * (as expected), not by /.  What does the / mean?", "abstract": ""}, "answers": [{"id": 28243933, "score": 102, "vote": 0, "content": "As explained here, the / as an argument marks the end of arguments that are positional only (see here), i.e. arguments you can't use as keyword parameters. In the case of __eq__(self, value, /) the slash is at the end, which means that all arguments are marked as positional only while in the case of your __init__ only self, i.e. nothing, is positional only. Edit:\nThis was previously only used for built-in functions but since Python 3.8, you can use this in your own functions. The natural companion of / is * which allows to mark the beginning of keyword-only arguments. Example using both:\u00a0", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/65620648/what-does-forward-slash-do-in-this-django-settings-py-python-list", "keywords": [], "tags": ["python", "django"], "question": {"id": 65620648, "title": "what does forward slash do in this django settings.py python list?", "content": "I'm new to python and I don't understand how this forward slash works in the django settings.py It seems like it is concatenating the value of BASE_DIR + \"static\", but that would actually be str(BASE_DIR) + \"static\" correct? Is it a special Django delimiter of sometype? This is the correct usage according to the Django documentation:\nhttps://docs.djangoproject.com/en/3.1/howto/static-files/#configuring-static-files STATICFILES_DIRS Is not a parameter list - so this doesn't seem to apply\nhttps://docs.python.org/3/faq/programming.html#what-does-the-slash-in-the-parameter-list-of-a-function-mean It's not a binary division operator:\nhttps://docs.python.org/3/reference/expressions.html#binary", "abstract": ""}, "answers": [{"id": 65621077, "score": 0, "vote": 0, "content": "By default  BASE_DIR  would be set from Django 3.1  to (source): / does the same as  os.path.join() ( pathlib is new module introduced in python 3.4) as documented The slash operator helps create child paths, similarly to\nos.path.join() For example would result in /base/static", "abstract": ""}, {"id": 65620775, "score": 7, "vote": 0, "content": "Probably BASE_DIR is a pathlib.Path object. The / is the path component concatenation operator.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/63490882/what-is-the-in-the-built-in-list-function-descriptions", "keywords": [], "tags": ["python", "list"], "question": {"id": 63490882, "title": "What is the &quot; / &quot; in the built-in list function descriptions", "content": "At the end of the built-in list function descriptions is \"/\". What is it?", "abstract": ""}, "answers": [{"id": 63490944, "score": 1, "vote": 0, "content": "From Python documentation about help() : Note that if a slash(/) appears in the parameter list of a function, when invoking help(), it means that the parameters prior to the slash are positional-only. and from the FAQ entry on positional-only parameters : What does the slash(/) in the parameter list of a function mean? A slash in the argument list of a function denotes that the parameters prior to it are positional-only. Positional-only parameters are the ones without an externally-usable name. Upon calling a function that accepts positional-only parameters, arguments are mapped to parameters based solely on their position. For example, divmod() is a function that accepts positional-only parameters. Its documentation looks like this: The slash at the end of the parameter list means that both parameters are positional-only. Thus, calling divmod() with keyword arguments would lead to an error:", "abstract": ""}, {"id": 63490955, "score": 1, "vote": 0, "content": "There are three kinds of parameters in Python: When defining a function, a / is used to separate positional-only parameters (at least one) on the left and the rest on the right. If there is no / in the parameter list, there are no positional-only parameters. The syntax originated in the argument clinic, which is used to define functions for the CPython implementation. Its use appeared in help for such functions before it was added to the syntax of Python itself in PEP-570.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/57235761/why-i-cant-pass-keyword-argument-to-list-index-method", "keywords": [], "tags": ["python", "python-3.x", "list", "keyword-argument"], "question": {"id": 57235761, "title": "Why I cant pass keyword argument to list.index() method?", "content": "I was checking the documentation of list.index() method in python, what I saw is : When I ran the code below gave me some error.", "abstract": ""}, "answers": [{"id": 57236764, "score": 2, "vote": 0, "content": "The documentation has been poor on positional only parameters before, but on modern Python, they're improving. The key info is the seemingly out of place / in the signature: That means that all arguments prior to the forward slash are positional only, they can't be passed by keyword. Per the Programming FAQ for \"What does the slash(/) in the parameter list of a function mean?\": A slash in the argument list of a function denotes that the parameters prior to it are positional-only. Positional-only parameters are the ones without an externally-usable name. Upon calling a function that accepts positional-only parameters, arguments are mapped to parameters based solely on their position.", "abstract": ""}, {"id": 57236734, "score": 0, "vote": 0, "content": "index(value, start=0, stop=9223372036854775807, /) document says here meaning of words is nothing but for what purpose you passing those arguments. for better understanding and how those arguments works, see below code example - list1 is list of 10 elements and index function is taking 3 arguments as starts and stops arguments are optional and for the purpose of slicing list, index function documentation explains it clear here -  output code starts looking for elements from start point i.e 0 and stop point i.e 5 but for loop \ngoes ahead of 5th index and raise the value error exception", "abstract": ""}, {"id": 57235795, "score": 3, "vote": 0, "content": "The error message says that index takes no keyword arguments but you are providing one with start=1 Instead of: l.index(43, start=1) use: l.index(43, 1) As for explanation, this could explain it: Many of the builtin functions use only METH_VARARGS which means they\n  don't support keyword arguments. \"len\" is even simpler and uses an\n  option METH_O which means it gets a single object as an argument. This\n  keeps the code very simple and may also make a slight difference to\n  performance.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/56514297/bare-forward-slash-in-python-function-definition", "keywords": [], "tags": ["python", "arguments", "parameter-passing"], "question": {"id": 56514297, "title": "Bare forward slash in Python function definition?", "content": "In the Python 3.8 Programming FAQ, I saw the following function definition: This is missing in the Python 3.7 version: What is this new / syntax? How does it relate to a / appearing in help() output? Note: this and this question are about help() annotation, whereas this question is about new syntax and any differences to the help() annotation.", "abstract": ""}, "answers": [{"id": 56514307, "score": 25, "vote": 0, "content": "The / as syntax was introduced in Python 3.8. The rationale for / in an argument list is given in PEP 570 -- Python Positional-Only Parameters: The new syntax will enable library authors to further control how their API can be called. It will allow designating which parameters must be called as positional-only, while preventing them from being called as keyword arguments. Previously, (informational) PEP 457 defined the syntax, but with a much more vague scope. This PEP takes the original proposal a step further by justifying the syntax and providing an implementation for the / syntax in function definitions. Similarities For all intents and purposes, if you understand help()'s / notation, then that's what is formally included as Python syntax in v3.8 via PEP 570. Differences PEP 570 -- Python Positional-Only Parameters PEP 457 -- Notation For Positional-Only Parameters There are already excellent answers on the meaning and usage of / in arguments. To save you the click through: A / means that all preceding parameters are positional-only parameters. Positional-only parameters before a / cannot be passed as name=value when calling the function. Python 3.8 What's New gives the following example: Valid function calls: Invalid function calls:", "abstract": ""}]}]