[
  {
    "link": "https://stackoverflow.com/questions/38634988/check-if-program-runs-in-debug-mode",
    "keywords": [],
    "tags": [
      "python",
      "python-2.7",
      "debugging",
      "pycharm"
    ],
    "question": {
      "id": 38634988,
      "title": "Check if program runs in Debug mode",
      "content": "I use the PyCharm IDE for Python programming. Is there a possibility to check, whether I'm in debugging mode or not when I run my program? I use pyplot as plt and want a Figure only to be shown if I debug my program. Yes, I could have a global boolean _debug_ which is set by myself, but I look for a better solution.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 71527398,
        "score": 2,
        "vote": 0,
        "content": "Just wanted to add a couple alternative implementations. Using contextlib.suppress: Using \"walrus\" operator new since Python 3.8:",
        "abstract": ""
      },
      {
        "id": 67065084,
        "score": 13,
        "vote": 0,
        "content": "The following works for me in VSCode:",
        "abstract": ""
      },
      {
        "id": 73166872,
        "score": -1,
        "vote": 0,
        "content": "If using Python logging module, you could call: for checking if the root logging level is debug. Simple as that.",
        "abstract": ""
      },
      {
        "id": 72977762,
        "score": 0,
        "vote": 0,
        "content": "Adding these three short answer as it seems others are rather long or less to the point.\ngettrace() is already a function so no need to write another... Any of these could (for example) be used to set the logging module logger level. (tested in Py3.9 with VSCode and PyCharm comtemporary to this post date) or if you need a variable or a global - not such a good idea as you risk namespace collisions in large projects.",
        "abstract": ""
      },
      {
        "id": 71896491,
        "score": 0,
        "vote": 0,
        "content": "I don't use pycharm, but to check if the program is being debugged using python -mpdb myFile.py, this code will work: as long as you don't otherwise import pdb.",
        "abstract": ""
      },
      {
        "id": 71170397,
        "score": 3,
        "vote": 0,
        "content": "Tested on PyCharm 2021.3.2:",
        "abstract": ""
      },
      {
        "id": 70277538,
        "score": 0,
        "vote": 0,
        "content": "In Pycharm 2021.1.3 with Python 3.9. Simply used Below, debug mood will show the printed 'Now in debug', and run will print the play Mood",
        "abstract": ""
      },
      {
        "id": 64320310,
        "score": 0,
        "vote": 0,
        "content": "Tested with: There are two ways of debugging in PyCharm: The function below detects method #1 (above), as it always passes in --port=XXXX on the command line. Function:",
        "abstract": ""
      },
      {
        "id": 38637774,
        "score": 43,
        "vote": 0,
        "content": "According to the documentation, settrace / gettrace functions could be used in order to implement Python debugger: Set the system’s trace function, which allows\n  you to implement a Python source code debugger in Python. The function\n  is thread-specific; for a debugger to support multiple threads, it\n  must be registered using settrace() for each thread being debugged. However, these methods may not be available in all implementations: CPython implementation detail: The settrace() function is intended\n  only for implementing debuggers, profilers, coverage tools and the\n  like. Its behavior is part of the implementation platform, rather than\n  part of the language definition, and thus may not be available in all\n  Python implementations. You could use the following snippet in order to check if someone is debugging your code: This one works for pdb: And PyCharm:",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/74582147/pycharm-2022-1-2-does-not-hit-the-debug-breakpoint-with-django",
    "keywords": [],
    "tags": [
      "python",
      "django",
      "debugging",
      "pycharm",
      "breakpoints"
    ],
    "question": {
      "id": 74582147,
      "title": "PyCharm 2022.1.2 does not hit the debug breakpoint with Django",
      "content": "I can't get Python debugger to work on PyCharm 2022.1.2 with Django 4.\nWhen I set the breakpoint inside the view function and then call this view in the browser, nothing happens when started in debug mode... breakpoint_selected However breakpoint is hit when I set it for import. breakpoint_hit I have 2 configurations, one for Python and one for Django Server, both don't work. config1\nconfig2 Went through numerous JetBrains tickets with people reporting similar problem but didn't find the solution there. Also tried creating second run configuration, for Python instead Django Server, but this also didn't help.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 74592301,
        "score": 0,
        "vote": 0,
        "content": "Solved this by deleting the .idea directory from top-level django project dir. Not sure what were the mechanics behind it, but it worked and now breakpoints work perfectly.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/74273918/python-breakpoint-default-entry-point-is-one-level-down-than-expected",
    "keywords": [],
    "tags": [
      "python",
      "breakpoints"
    ],
    "question": {
      "id": 74273918,
      "title": "python breakpoint() default entry point is one level down than expected",
      "content": "I am having a strange problem with breakpoint() that I have never encountered before. It is stepping into the program a level down than it usually does. I can recover the previous default behaviour by pressing 'u'. I am using python 3.9, conda environment in pycharm 2021.3.1 For example: Will start the debugger from within the function hello(). If I type 'x' I will not be able to see the variable, as am in the function workspace. Pressing 'u' allows me to get back to where breakpoint(), when working as expected, used to break into. I must have changed the default somewhere but I cannot for the life of me find where, I seem to have no PYTHONBREAKPOINT environment variable set...",
      "abstract": ""
    },
    "answers": []
  },
  {
    "link": "https://stackoverflow.com/questions/74096892/pyqt5-vscode-python-debugger-not-breaking-on-exception-in-slot-functions-execu",
    "keywords": [],
    "tags": [
      "python",
      "debugging",
      "visual-studio-code",
      "pyqt",
      "vscode-debugger"
    ],
    "question": {
      "id": 74096892,
      "title": "PyQt5: vscode python debugger not breaking on exception in slot functions (executed after signal)",
      "content": "I've got a problem debugging python PyQt5-application in vscode. Unlike described in some older forum discussions (i.e.: https://github.com/microsoft/ptvsd/issues/428) breakpoints are working fine in every part of code, but the debugger may not break/stop on raised exceptions in Qt-slot functions executed following a Qt-signal.\nI was able to make the small example below. When reaching the raised exception the debugger terminates execution. When I put a breakpoint in that line, the debugger breaks/stopps as expected. I wasn't able to solve this issue. Does anybody know how to solve this issue? Is there any settings to be put in vscode? I didn't find the flag \"--qt-support\" mentioned in the above linked discussion - and don't know whether it would help for this problem. I've tested a few more things. I tried different conditions/rules for the breakpoints. When activating \"Raised Exceptions\" (only then, I've tried all combinations), the debugger stopps where the error is raised. I don't know whether the core code of PyQT catches the raised error, but in my code it's not raised. Therefore, when the only activated condition is \"User Uncaught Exceptions\" it should stop in the breakpoint.  Just for completeness, I've also tested the suggestion (from here: How to debug PyQt5 threads in Visual Studio Code?) to add debugpy.debug_this_thread(). It doesn't change anything for my problem. It seems to be an issue with the vscode debugger (or wanted behaviour which I don´t understand. My workaround is: To my understanding, \"User Uncaught Exceptions\" should do what I want. Could anybody tell whether the described behaviour is as it should be? Is there a way to get the vscode debugger to break only in exceptions which are not caught in my code? Thanks a lot for your help! Kind regards, Jerome",
      "abstract": ""
    },
    "answers": []
  },
  {
    "link": "https://stackoverflow.com/questions/58430028/visual-studio-code-breakpoint-set-to-grey-color-not-working-errormay-be-exclu",
    "keywords": [],
    "tags": [
      "python",
      "django",
      "visual-studio-code"
    ],
    "question": {
      "id": 58430028,
      "title": "Visual studio code breakpoint set to grey color &amp; not working.error(may be excluded because of &quot;justMyCode&quot; option)",
      "content": "I have set breakpoint in Django core library in visual studio code but when I am starting debugging of my project , those debug point color changed from red to grey & show me notification like below. Breakpoint in file excluded by filters.\nNote: may be excluded because of \"justMyCode\" option (default == true). I have set justmycode value to false from visual code option but still I am not able to set breakpoint.  Even I have read SO question related but not able to solve my issue so I have to post my question.\n\nI have tried to set localroot & remoteroot but not working even.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 70917357,
        "score": 6,
        "vote": 0,
        "content": "I was only able to add Breakpoints to 3rd party libraries when I set 2 options: on the launch.json file:\nadd \"justMyCode\": false to the configuration. on Settings>Features>Debug\nTurn on the option Allow Breakpoints Everywhere (alternative to 2.) on the file settings.json\nadd \"debug.allowBreakpointsEverywhere\": true Tested on: version: 1.63.2",
        "abstract": ""
      },
      {
        "id": 68765018,
        "score": 1,
        "vote": 0,
        "content": "Source: https://windowsquestions.com/2020/10/04/cant-set-breakpoint-in-imported-module-visual-studio-community-2019-python-project/ Tools –> Options –> Python –> Debugging –> Check : “Enable debugging of the Python standard library”",
        "abstract": ""
      },
      {
        "id": 58483654,
        "score": 26,
        "vote": 0,
        "content": "are you using a launch configuration to run the debugger? i had the same issue and resolved by adding \"justMyCode\": false inside the launch.json for the proper entry.",
        "abstract": ""
      },
      {
        "id": 58456087,
        "score": 0,
        "vote": 0,
        "content": "You need to set \"justMyCode\": true in your debug configuration as this is third-party code which is excluded by default.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/70240993/how-to-restart-python-code-from-any-desired-point-in-the-code-after-making-a-cha",
    "keywords": [],
    "tags": [
      "python",
      "debugging",
      "visual-studio-code",
      "ide"
    ],
    "question": {
      "id": 70240993,
      "title": "How to restart python code from any desired point in the code after making a change during debugging?",
      "content": "I'm debugging a python code in visual studio code. I have employed breakpoints. I got an error and corrected it. How can I restart from that error point? (I mean, how can I avoid re-running everything from the beginning.) Also, let me know if there is a way in any other IDE.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 70242408,
        "score": 0,
        "vote": 0,
        "content": "You need to add this in the launch.json file: You can refer to this page for more information.",
        "abstract": ""
      },
      {
        "id": 70241056,
        "score": 0,
        "vote": 0,
        "content": "This is called hot reloading, but it comes with a cost this seems to be your best bet, https://github.com/breuleux/jurigged also this is a duplicate of hot reloading / swapping with Python",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/724924/how-to-make-pdb-recognize-that-the-source-has-changed-between-runs",
    "keywords": [],
    "tags": [
      "python",
      "debugging",
      "pdb"
    ],
    "question": {
      "id": 724924,
      "title": "How to make pdb recognize that the source has changed between runs?",
      "content": "From what I can tell, pdb does not recognize when the source code has changed between \"runs\". That is, if I'm debugging, notice a bug, fix that bug, and rerun the program in pdb (i.e. without exiting pdb), pdb will not recompile the code. I'll still be debugging the old version of the code, even if pdb lists the new source code. So, does pdb not update the compiled code as the source changes? If not, is there a way to make it do so? I'd like to be able to stay in a single pdb session in order to keep my breakpoints and such. FWIW, gdb will notice when the program it's debugging changes underneath it, though only on a restart of that program. This is the behavior I'm trying to replicate in pdb.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 69481691,
        "score": 0,
        "vote": 0,
        "content": "May not work for more complex programs, but for a simple example using importlib.reload() using Python v3.5.3:",
        "abstract": ""
      },
      {
        "id": 64194585,
        "score": 5,
        "vote": 0,
        "content": "Based on @pourhaus answer (from 2014), this recipe augments the pdb++ debugger with a reload command (expected to work on both Linux & Windows, on any Python installation). TIP: the new reload command accepts an optional list of module-prefixes to reload (and to exclude), not to break already loaded globals when resuming debugging. Just insert the following Python-3.6 code into your ~/.pdbrc.py file:",
        "abstract": ""
      },
      {
        "id": 23207689,
        "score": 7,
        "vote": 0,
        "content": "The following mini-module may help.  If you import it in your pdb session, then you can use: at any time to force-reload all non-system modules except main.  The code skips that because it throws an ImportError('Cannot re-init internal module main') exception.",
        "abstract": ""
      },
      {
        "id": 58627587,
        "score": 2,
        "vote": 0,
        "content": "I decided to comment some lines in my input script, and after I got pdb to recognize that change. The bad thing:  it runs the script from the beginning. The good things below.",
        "abstract": ""
      },
      {
        "id": 47414996,
        "score": -1,
        "vote": 0,
        "content": "ipdb %autoreload extension 6.2.0 docs document http://ipython.readthedocs.io/en/stable/config/extensions/autoreload.html#module-IPython.extensions.autoreload :",
        "abstract": ""
      },
      {
        "id": 725271,
        "score": 4,
        "vote": 0,
        "content": "What do you mean by \"rerun the program in pdb?\" If you've imported a module, Python won't reread it unless you explicitly ask to do so, i.e. with reload(module).  However, reload is far from bulletproof (see xreload for another strategy). There are plenty of pitfalls in Python code reloading.  To more robustly solve your problem, you could wrap pdb with a class that records your breakpoint info to a file on disk, for example, and plays them back on command. (Sorry, ignore the first version of this answer; it's early and I didn't read your question carefully enough.)",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/58385853/running-gdb-with-python",
    "keywords": [],
    "tags": [
      "python",
      "gdb"
    ],
    "question": {
      "id": 58385853,
      "title": "Running gdb with python",
      "content": "How would one run gdb with python (as opposed to pdb which is pretty straightforward)? For example, if I have this program: I can run gdb with: It seems to 'work' in that it prints 16 but how would I:",
      "abstract": ""
    },
    "answers": [
      {
        "id": 58386013,
        "score": 3,
        "vote": 0,
        "content": "GDB is not a Python debugger. GDB is not debugging your Python script. It is debugging Python, as in the CPython interpreter executable itself. To GDB, your script is data, not code. If your Python executable has the necessary debug info, you could set breakpoints in the C source code of CPython, or step through the C source code, but you cannot set breakpoints in your script. For GDB to understand anything about Python, you would have to bolt on a lot of additional code dedicated to understanding Python and adding Python-level breakpoint/line stepping/etc. functionality. As it happens, this extra code already exists! The Cython project comes with a GDB extension allowing mixed Python/C/Cython debugging, because it's a huge pain to try to debug Cython without this kind of functionality. If you need to perform mixed Python/C/Cython debugging, check it out. If you don't need to perform mixed debugging, stick to PDB.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/46684041/gdb-debug-python-code-but-no-source-file-named-test-py",
    "keywords": [],
    "tags": [
      "python",
      "debugging",
      "gdb"
    ],
    "question": {
      "id": 46684041,
      "title": "gdb debug python code ， but No source file named test.py",
      "content": "i start to learn debugging python code using gdb. But when i add breakpoint, gdb give error:\"No source file named test.py.\" this is my source code test.py: this is my gdb debug information：",
      "abstract": ""
    },
    "answers": []
  },
  {
    "link": "https://stackoverflow.com/questions/43026618/how-to-experiment-source-code-with-pdb-inspect-pprint",
    "keywords": [],
    "tags": [
      "debugging",
      "pdb"
    ],
    "question": {
      "id": 43026618,
      "title": "How to experiment source code with `pdb`, `inspect`, `pprint`?",
      "content": "Problem In other words, which function of pdb should I use? and How to use it effectively for experimenting source?  Toy Example Their relationship is as follows:  console: kur dump mnist.yml  -->\npython: __main__.py :  main() --> dump() --> parse_kurfile() -->\npython: kurfile.py : Kurfile class --> __init__() ...\npython: ... the rest is not to be explored      Which function of pdb should I use to explore the execution flow from dump() to parse_kurfile() and to Kurfile.__init__() and back to dump() again?  Update How to effectively explore Jupyter notebook using pdb? ",
      "abstract": ""
    },
    "answers": [
      {
        "id": 43026619,
        "score": 2,
        "vote": 0,
        "content": "One possible solution for example, when I put a single pdb.set_trace inside dump(), pdb will not help me trace into the function of parse_kurfile(), but stay on the current dump() block: def dump(args):\n    \"\"\" Dumps the Kurfile to stdout as a JSON blob.\n    \"\"\"\n    pdb.set_trace()\n    ### parse kurfile.yml into parts to be used in python code\n    spec = parse_kurfile(args.kurfile, args.engine) If I want to go deeper into parse_kurfile in __main__.py and Kurfile.__init__ in kurfile.py, then I just need to put one pdb.set_trace in each of the two functions, like below:   Update From my experience so far, there are two libraries inspect and pprint go well with pdb library. Inside library inspect, I use the following functions the most:  with these functions above, when I want to checkout other functions, I don't have to go to find the source code in editor, I can see them right where I am in the pdb. From library pprint, you can guess, I use pprint.pprint to print out the source code, the doc in a more readable format right inside pdb. More Update A working station to explore and experiment source:   More update During exploring, I want to have all the attributes and methods of a module or class ready at hand.  To achieve it, I can use inspect.getmembers(module or class name) and use iterm2 split window to view it:   Update: How to change color of iterm2 for the eyes? Go to iterm2 preferences, color, change to Tango Dark, to gray the foreground color to make white texts look soft Change Kur logger color setting to: ",
        "abstract": ""
      },
      {
        "id": 43229263,
        "score": 0,
        "vote": 0,
        "content": "One way to avoid the drawbacks of pdb in Jupyter: ",
        "abstract": ""
      }
    ]
  }
]