[{"link": "https://stackoverflow.com/questions/39913847/is-there-a-way-to-compile-a-python-application-into-static-binary", "keywords": [], "tags": ["python", "build"], "question": {"id": 39913847, "title": "Is there a way to compile a python application into static binary?", "content": "What I'm trying to do is ship my code to a remote server, that may have different python version installed and/or may not have packages my app requires. Right now to achieve such portability I have to build relocatable virtualenv with interpreter and code. That approach has some issues (for example, you have to manually copy a bunch of libraries into your virtualenv, since --always-copy doesn't work as expected) and generally slow. There's (in theory) a way to build python itself statically. I wonder if I could pack interpreter with my code into one binary and run my application as module. Something like that: ./mypython -m myapp run or ./mypython -m gunicorn -c ./gunicorn.conf myapp.wsgi:application.", "abstract": ""}, "answers": [{"id": 72416919, "score": 0, "vote": 0, "content": "I have created a docker image that relies on Nuitka and a custom statically linked python3.10 to create a static binary. Did not test it extensively, if you have the chance please let me know if it works for your use case. You can check it at:\nhttps://github.com/joaompinto/docker-build-python-static-bin", "abstract": ""}, {"id": 40057634, "score": 188, "vote": 0, "content": "There are two ways you could go about to solve your problem This answer explains how you can go about doing it using the second approach, since the first method is not cross platform and version, and has been explained in other answers. Also, using programs like pyinstaller typically results in huge file sizes, while using cython will result in a file that's much smaller First, install cython. Then, you can use cython to generate a C file out of the Python .py file\n(in reference to https://stackoverflow.com/a/22040484/5714445) Use GCC to compile it after getting your current python version (Note: The below assumes you are trying to compile it to Python3) You will now have a binary file output_bin_file, which is what you are looking for Other things to note:", "abstract": ""}, {"id": 40099944, "score": 16, "vote": 0, "content": "You might wish to investigate Nuitka. It takes python source code and converts it in to C++ API calls. Then it compiles into an executable binary (ELF on Linux). It has been around for a few years now and supports a wide range of Python versions. You will probably also get a performance improvement if you use it. Recommended.", "abstract": ""}, {"id": 40135113, "score": 2, "vote": 0, "content": "If you are on a Mac you can use py2app to create a .app bundle, which starts your Django app when you double-click on it. I described how to bundle Django and CherryPy into such a bundle at https://moosystems.com/articles/14-distribute-django-app-as-native-desktop-app-01.html In the article I use pywebview to display your Django site in a local application window.", "abstract": ""}, {"id": 40057486, "score": 3, "vote": 0, "content": "You're probably looking for something like Freeze, which is able to compile your Python application with all its libraries into a static binary: PyPi page of Freeze Python Wiki page of Freeze Sourceforge page of Freeze", "abstract": ""}, {"id": 39994355, "score": 1, "vote": 0, "content": "Freeze options: However, your target server should have the environment you want -> you should be able to 'create' it. If it doesn't, you should build your software to match the environment.  I found this handy guide on how to install custom version of python to a virtualenv, assuming you have ssh access: https://stackoverflow.com/a/5507373/5616110 In virtualenv, you should be able to pip install anything and you shouldn't need to worry about sudo privileges. Of course, having those and access to package manager like apt makes everything a lot easier.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/5888870/how-do-i-compile-a-pyqt-script-py-to-a-single-standalone-executable-file-for", "keywords": [], "tags": ["python", "qt4", "compilation", "executable", "pyqt4"], "question": {"id": 5888870, "title": "How do I compile a PyQt script (.py) to a single standalone executable file for windows (.exe) and/or linux?", "content": "I started to fiddle with PyQt, and made a \"beautiful\" script from the pyqt whitepaper example app (pastebin) It works perfectly in Windows and Linux (with qt environment already installed on both). Now my question is: Since I am trying to use Qt because it is compiled (at least pure old C++ based Qt), how can I compile some .exe file to run it on Windows, or a standalone executable for Linux. The point is that I want the program to be compiled, because of speed and portability, instead of interpreted from source, which would require a previous setup on any machine. One of the goals, for example, is sending small gui scripts via email to coworkers who are not programmers at all.", "abstract": ""}, "answers": [{"id": 5916707, "score": 69, "vote": 0, "content": "if you want completelly create one stand alone executable, you can try PyInstaller . i feel it's better to create one stand alone executable than cx_freeze or py2exe (in my experience). and easy to use (full documentation available in the site). It supports Python 3.6 or newer. Pass the --onefile argument if you want to create completely standalone .exe. in example :", "abstract": ""}, {"id": 51311991, "score": 0, "vote": 0, "content": "I am using pyinstaller I don't know, but pyinstaller does't append sip.pyd. So, your need a PyQt5\\sip.pyd. I recommend nice windows style qwindowvistastyle.dll. Make build.cmd file as: ^ - new line in command file (.cmd, .bat)", "abstract": ""}, {"id": 50645922, "score": 24, "vote": 0, "content": "After spending many weeks on this and trying all the alternatives - PyInstaller, py2exe, cx_freeze,... - I created my own library: https://build-system.fman.io/. It is based on PyInstaller but solves many of its common pain points. It also lets you create native installers on Windows, Mac and Linux.", "abstract": ""}, {"id": 33470965, "score": -4, "vote": 0, "content": "Since I am trying to use Qt because it is compiled You're defeating this benefit by using Python. Although the other answers give an introduction to the options for distributing Python code without requiring users to install Python themselves, Python is intended to be an interpreted language so there will be downsides to each of these options (ex. speed, program size, compatibility, etc...). They may or may not be deal-breakers to you. Your two other options are:", "abstract": ""}, {"id": 5891671, "score": 4, "vote": 0, "content": "You may want to check out cx_freeze. It claims to create executables which are \"cross platform and should work on any platform that Python itself works on.\" I came across it in exploring the moneyGuru package which uses PyQt. I downloaded the moneyguru.exe file to my Windows XP system, executed it, and it worked fine on Python 3.2. You can clone the hg repo from here to see how it.s done.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/5458048/how-can-i-make-a-python-script-standalone-executable-to-run-without-any-dependen", "keywords": [], "tags": ["python", "executable"], "question": {"id": 5458048, "title": "How can I make a Python script standalone executable to run without ANY dependency?", "content": "I'm building a Python application and don't want to force my clients to install Python and modules. So, is there a way to compile a Python script to be a standalone executable?", "abstract": ""}, "answers": [{"id": 41820168, "score": 6, "vote": 0, "content": "Use Cython to convert to C, compile, and link with GCC. Another could be, make the core functions in C (the ones you want to make hard to reverse), compile them and use Boost.Python to import the compiled code (plus you get a much faster code execution). Then use any tool mentioned to distribute.", "abstract": ""}, {"id": 5458250, "score": 554, "vote": 0, "content": "You can use PyInstaller to package Python programs as standalone executables. It works on Windows, Linux, and Mac. Install PyInstaller from PyPI: Go to your program\u2019s directory and run: This will generate the bundle in a subdirectory called dist. Adding -F (or --onefile) parameter will pack everything into single \"exe\". running into \"ImportError\" you might consider side-packages. still runing in Import-Erorr - try to downgrade pyinstaller - see Getting error when using pynput with pyinstaller For a more detailed walkthrough, see the manual.", "abstract": ""}, {"id": 5458478, "score": 34, "vote": 0, "content": "And a third option is cx_Freeze, which is cross-platform.", "abstract": ""}, {"id": 43076502, "score": 1, "vote": 0, "content": "I'm told that PyRun is also an option. It currently supports Linux, FreeBSD and Mac OS X.", "abstract": ""}, {"id": 5458078, "score": 19, "vote": 0, "content": "You may like py2exe. You'll also find information in there for doing it on Linux.", "abstract": ""}, {"id": 63564759, "score": 8, "vote": 0, "content": "Since it seems to be missing from the current list of answers, I think it is worth mentioning that the standard library includes a zipapp module that can be used for this purpose. Its basic usage is just compressing a bunch of Python files into a zip file with extension .pyz than can be directly executed as python myapp.pyz, but you can also make a self-contained package from a requirements.txt file: Where interpreter can be something like /usr/bin/env python (see Specifying the Interpreter). Usually, the generated .pyz / .pyzw file should be executable, in Unix because it gets marked as such and in Windows because Python installation usually registers those extensions. However, it is relatively easy to make a Windows executable that should work as long as the user has python3.dll in the path. If you don't want to require the end user to install Python, you can distribute the application along with the embeddable Python package.", "abstract": ""}, {"id": 59558614, "score": 30, "vote": 0, "content": "This creates a standalone EXE file on Windows. Important note 1: The EXE file will be generated in a folder named 'dist'. Important note 2: Do not forget --onefile flag You can install PyInstaller using pip install PyInstaller   NOTE: In rare cases there are hidden dependencies...so if you run the EXE file and get missing library error (win32timezone in the example below) then use something like this:", "abstract": ""}, {"id": 55925238, "score": 23, "vote": 0, "content": "I like PyInstaller - especially the \"windowed\" variant: It will create one single *.exe file in a distination/folder.", "abstract": ""}, {"id": 50010710, "score": 5, "vote": 0, "content": "Using PyInstaller, I found a better method using shortcut to the .exe rather than making --onefile. Anyway, there are probably some data files around and if you're running a site-based app then your program depends on HTML, JavaScript, and CSS files too. There isn't any point in moving all these files somewhere... Instead what if we move the working path up? Make a shortcut to the EXE file, move it at top and set the target and start-in paths as specified, to have relative paths going to dist\\folder: We can rename the shortcut to anything, so renaming to \"GTFS-Manager\".\nNow when I double-click the shortcut, it's as if I python-ran the file! I found this approach better than the --onefile  one as: Oh, remember to delete off the build folder after building. It will save on size.", "abstract": ""}, {"id": 42292103, "score": 45, "vote": 0, "content": "Yes, it is possible to compile Python scripts into standalone executables. PyInstaller can be used to convert Python programs into stand-alone executables, under Windows, Linux, Mac OS X, FreeBSD, Solaris, and AIX. It is one of the recommended converters. py2exe converts Python scripts into only executable on the Windows platform. Cython is a static compiler for both the Python programming language and the extended Cython programming language.", "abstract": ""}, {"id": 41726944, "score": 5, "vote": 0, "content": "Not exactly a packaging of the Python code, but there is now also Grumpy from Google, which transpiles the code to Go. It doesn't support the Python C API, so it may not work for all projects.", "abstract": ""}, {"id": 41634867, "score": 34, "vote": 0, "content": "I would like to compile some useful information about creating standalone files on Windows using Python 2.7. I have used py2exe and it works, but I had some problems. It has shown some problems for creating single files in Windows 64 bits: Using bundle_files = 1 with py2exe is not working; It is necessary to create a setup.py file for it to work. http://www.py2exe.org/index.cgi/Tutorial#Step2; I have had problems with dependencies that you have to solve by importing packages in the setup file; I was not able to make it work together with PyQt. This last reason made me try PyInstaller http://www.pyinstaller.org/. In my opinion, it is much better because: I suggest creating a .bat file with the following lines for example (pyinstaller.exe must be in in the Windows path): You can create a single file, among other options (https://pyinstaller.readthedocs.io/en/stable/usage.html#options). I had only one problem using PyInstaller and multiprocessing package that was solved by using this recipe: https://github.com/pyinstaller/pyinstaller/wiki/Recipe-Multiprocessing. So, I think that, at least for python 2.7, a better and simpler option is PyInstaller.", "abstract": ""}, {"id": 29515965, "score": 7, "vote": 0, "content": "You can find the list of distribution utilities listed at Distribution Utilities. I use bbfreeze and it has been working very well (yet to have Python\u00a03 support though).", "abstract": ""}, {"id": 25009291, "score": 7, "vote": 0, "content": "py2exe will make the EXE file you want, but you need to have the same version of MSVCR90.dll on the machine you're going to use your new EXE file. See Tutorial for more information.", "abstract": ""}, {"id": 21012886, "score": 15, "vote": 0, "content": "Use py2exe.... use the below set up files:", "abstract": ""}, {"id": 18693145, "score": 116, "vote": 0, "content": "You might wish to investigate Nuitka. It takes Python source code and converts it in to C++ API calls. Then it compiles into an executable binary (ELF on Linux). It has been around for a few years now and supports a wide range of Python versions. You will probably also get a performance improvement if you use it. It is recommended.", "abstract": ""}, {"id": 16181636, "score": 14, "vote": 0, "content": "I also recommend  PyInstaller for better backward compatibility such as Python\u00a02.3 - 2.7. For py2exe, you have to have Python\u00a02.6.", "abstract": ""}, {"id": 12166473, "score": 10, "vote": 0, "content": "For Python 3.2 scripts, the only choice is cx_Freeze. Build it from sources; otherwise it won't work. For Python\u00a02.x I suggest PyInstaller as it can package a Python program in a single executable, unlike cx_Freeze which outputs also libraries.", "abstract": ""}, {"id": 5458807, "score": 299, "vote": 0, "content": "You can use py2exe as already answered and use Cython to convert your key .py files in .pyc, C compiled files, like .dll in Windows and .so on Linux. It is much harder to revert than common .pyo and .pyc files (and also gain in performance!).", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/54212814/how-to-package-python-project-into-a-standalone-executable", "keywords": [], "tags": ["python", "pip", "package", "release"], "question": {"id": 54212814, "title": "How to package Python Project into a standalone executable?", "content": "i wan't to release my python project, but when i send it to someone he is forced to install all the packages im using in my python project.  Is there any way to pack it or something, because maybe there are some users who are not that familiar with pip or python. Regards", "abstract": ""}, "answers": [{"id": 54212856, "score": 10, "vote": 0, "content": "PyInstaller is a program that freezes (packages) Python programs into stand-alone executables, under Windows, GNU/Linux, Mac OS X, FreeBSD, Solaris and AIX. Its main advantages over similar tools are that PyInstaller works with Python 2.7 and 3.4\u20143.7, it builds smaller executables thanks to transparent compression, it is fully multi-platform, and use the OS support to load the dynamic libraries, thus ensuring full compatibility. It work even if users do not have python installed. Here an example from a github project. As you can see, you can download sources, but also a zip containing every package used to run your project. In this example, it contains many files, but you can package everything into a single .exe file. Install PyInstaller from PyPI: Go to your program\u2019s directory and run: This will generate the bundle in a subdirectory called dist. You can use --onefile argument in order to generate the bundle with only a single executable file. You asked how to get arguments send by the user. Here is some way to do it, more or less convenient:", "abstract": ""}, {"id": 54213324, "score": 0, "vote": 0, "content": "If you want to deploy a python application , you can use cx_freeze to package it. It will provide you a binary ready to execute", "abstract": ""}, {"id": 54213192, "score": 0, "vote": 0, "content": "If you want to deploy your application that has to be run on other machines. i REALLY suggest you to use docker. \nYou will build a docker image in local that contain your application and all of the dependencies you need\nthe user just has to install docker, get your docker image and run it on his machine. \nhttps://docs.docker.com/get-started/", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/68851790/how-to-compile-python-program-and-its-dependencies-into-a-single-c-like-binary", "keywords": [], "tags": ["python", "compilation", "dependencies", "cython", "cythonize"], "question": {"id": 68851790, "title": "How to compile Python program and its dependencies into a single C like binary?", "content": "I'm trying to put my Python program and all of it's dependencies into a single binary that could be executed from the command line. I followed Broken Man's suggestion in this post here using Cython3 and it works if you have a simple Python script. However it doesn't work if you're using import statements in your code to include your dependencies. I'm looking for a solution that will allow me to execute my program similar to how you would in C, e.g think ./a.out Please don't recommend using chmod +x to convert it into an executable. That's not what I'm looking for. This isn't a desktop app either - it needs to be executed from the command line. Can Cython/Cythonize be used to compile dependencies or is there another tool that should be used for this? The dependencies I'm relying on are a mix of libraries installed with pip and custom written files in the same directory.", "abstract": ""}, "answers": [{"id": 68851815, "score": 1, "vote": 0, "content": "The tool you are looking for is Nuikta. Syntax is: python -m nuitka --standalone --follow-imports programname.py\nwhere:- --follow-import: Causes imported modules (including local imports) to be included in binary as well.\n--standalone: making standalone binary", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/12339671/how-to-compile-python-script-to-binary-executable", "keywords": [], "tags": ["python", "compilation", "executable"], "question": {"id": 12339671, "title": "How to compile python script to binary executable", "content": "I need to convert a Python script to a Windows executable. I have Python 2.6 installed to python26. I have created one script and kept it in C:\\pythonscript. Inside this folder there are two files Setup.py and oldlogs.py (this file need coversion) setup.py code is How can I convert oldlogs.py to an exe file?", "abstract": ""}, "answers": [{"id": 12339729, "score": 79, "vote": 0, "content": "Or use PyInstaller as an alternative to py2exe. Here is a good starting point. PyInstaller also lets you create executables for linux and mac... Here is how one could fairly easily use PyInstaller to solve the issue at hand: From the tool's documentation: PyInstaller analyzes myscript.py and: In the dist folder you find the bundled app you distribute to your users.", "abstract": ""}, {"id": 65401152, "score": 10, "vote": 0, "content": "Since other SO answers link to this question it's worth noting that there is another option now in PyOxidizer. It's a rust utility which works in some of the same ways as pyinstaller, however has some additional features detailed here, to summarize the key ones: (One other advantage of pyoxidizer is that it does not seem to suffer from the GLIBC_X.XX not found problem that can crop up with pyinstaller if you've created your binary on a system that has a glibc version newer than the target system). Overall pyinstaller is much simpler to use than PyOxidizer, which often requires some complexity in the configuration file, and it's less Pythony since it's written in Rust and uses a configuration file format not very familiar in the Python world, but PyOxidizer does some more advanced stuff, especially if you are looking to produce single binaries (which is not pyinstaller's default).", "abstract": ""}, {"id": 54332185, "score": -2, "vote": 0, "content": "", "abstract": ""}, {"id": 12340495, "score": 16, "vote": 0, "content": "I recommend PyInstaller, a simple python script can be converted to an exe with the following commands: which creates a yourprogram.spec file which is a configuration for building the final exe. Next command builds the exe from the configuration file: More can be found here", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/65248123/how-to-make-any-python-program-run-standalone", "keywords": [], "tags": ["python", "python-3.x"], "question": {"id": 65248123, "title": "How to make any python program run standalone", "content": "How can I make a python program run without python installed (like blender)? Is it includes liblaries to the program itself (Am I need to run \"pip install which liblaries used\" before running the program)? And how can i make this for a program with multiple scripts?", "abstract": ""}, "answers": [{"id": 65248506, "score": 1, "vote": 0, "content": "I use autopytoexe for windows applications.\nIt has GUI and you can save the compile settings. https://pypi.org/project/auto-py-to-exe/", "abstract": ""}, {"id": 65248432, "score": 0, "vote": 0, "content": "If you are the one who did the programming, and want your program to run on a system (with or without python installed), you can convert your initial python file into an executable, that is, files with the .exe extension. After installing pyinstaller, type in: pyinstaller --onefile your_python_file.py. This will convert your file to an executable. CAVEAT: If your file will use a terminal, then put a -w after --onefile, if it is graphical, then don't. After the conversion, you can see a dist folder, it contains your .exe file. Try running your file then, and see if it runs with no error.", "abstract": ""}, {"id": 65248404, "score": 0, "vote": 0, "content": "I don't have personal experience with this, but, as noted it the comments, it appears these are the tools that will do what you want. Windows: https://pypi.org/project/py2exe/ MacOS: https://pypi.org/project/py2app/ Cross-platform: https://pypi.org/project/cx-Freeze/", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/59470367/how-can-i-create-a-python-standalone-executable-using-hy-modules", "keywords": [], "tags": ["python", "pyinstaller", "hy"], "question": {"id": 59470367, "title": "How can I create a Python standalone executable using Hy modules?", "content": "Given an entry file main.py like so: Given a Hy file hymodule.hy: If I use pyinstaller to create a standalone file: And execute main.exe I get this error: What is the proper way to create a standalone executable using Hy modules?", "abstract": ""}, "answers": [{"id": 59470446, "score": 1, "vote": 0, "content": "PyInstaller support is not implemented for Hy. I don't know whether changes would be needed to PyInstaller, Hy, or both. You can always try hy2pying all your code first, but this may not work if (a) your code still depends on Hy and (b) PyInstaller chokes on Hy even when used as an ordinary Python library.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/59102199/making-a-python-game-as-a-stand-alone-application", "keywords": [], "tags": ["python", "pygame"], "question": {"id": 59102199, "title": "making a python game as a stand alone application", "content": "recently I am studying making using python. I even made a small game. I wanted my friend to play it. But he did not have python so he had to download python and other related modules to run the game.\nSo I wanted to ask is there a way to convert the whole game in a stand-alone application or make an exe file of it.\nThanks in advance.", "abstract": ""}, "answers": [{"id": 59102228, "score": 0, "vote": 0, "content": "You can do this by making binary file of your .py file using pyinstaller. https://pyinstaller.readthedocs.io/en/stable/ pip install pyinstaller\npyinstaller -F file.py", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/30522451/creating-stand-alone-executable-for-windows-from-python-code", "keywords": [], "tags": ["python", "pyinstaller"], "question": {"id": 30522451, "title": "creating stand-alone executable for windows from python code", "content": "I have a python code which uses the pygkt, gtk, ctypes, os and some other modules. I used pyinstaller to create a stand-alone executive of the code. It worked fine on ubuntu. Now I wanted to create another stand-alone executive for windows platform.\n     I used the tool  https://github.com/paulfurley/python-windows-packager for it and followed the steps. But I got the error: module gtk not found.\n     How to fix the issue ?\n     Are there any other tools to convert python code to stand-alone executable for windows os ? If yes, please provide the details ?\n     Thank you", "abstract": ""}, "answers": [{"id": 45650645, "score": 2, "vote": 0, "content": "If in Windows, Best way to do it is via Cygwin.\nEnsure you have Python 3.5+ version not 3.6 Go to the directory where the .py file is which needs to be packaged. Then run \n Simple to have a single file executable.", "abstract": ""}, {"id": 30522544, "score": 10, "vote": 0, "content": "I'd recommend using pyinstaller Example: You should now have a build/myscript/myscript.exe executable.", "abstract": ""}]}]