[
  {
    "link": "https://stackoverflow.com/questions/156767/whats-the-difference-between-an-argument-and-a-parameter",
    "keywords": [],
    "tags": [
      "parameters",
      "language-agnostic",
      "arguments",
      "terminology"
    ],
    "question": {
      "id": 156767,
      "title": "What&#39;s the difference between an argument and a parameter?",
      "content": "When verbally talking about methods, I'm never sure whether to use the word argument or parameter or something else. Either way the other people know what I mean, but what's correct, and what's the history of the terms? I'm a C# programmer, but I also wonder whether people use different terms in different languages. For the record I'm self-taught without a background in Computer Science. (Please don't tell me to read Code Complete because I'm asking this for the benefit of other people who don't already have a copy of Steve McConnell's marvellous book.) The general consensus seems to be that it's OK to use these terms interchangeably in a team environment. Except perhaps when you're defining the precise terminology; then you can also use \"formal argument/parameter\" and \"actual argument/parameter\" to disambiguate.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 72799457,
        "score": 4,
        "vote": 0,
        "content": "I'm still not happy with all these answers. They all start talking about \"function declarations\" and my monkey brain has already wandered off and started thinking about unicorns. That doesn't help me remember at all, it's just the definition. I want something that I can immediately and forever hold in my head. The only answer here that I quickly understand is: \"Arguments are actual values that are passed in\". Arguments are easier to define and as long as you know what they are then you know parameters are the other. The other way I can think of it is: Simplified down to: Arguments outside, parameters inside If any one wants to disagree with me, you can leave your arguments outside ;)",
        "abstract": ""
      },
      {
        "id": 74946446,
        "score": 1,
        "vote": 0,
        "content": "Arguments are actual values passed to parameters.",
        "abstract": ""
      },
      {
        "id": 51231722,
        "score": 129,
        "vote": 0,
        "content": "A parameter is a variable in the declaration of the function. An argument is the actual value of the variable that gets passed to the function. ",
        "abstract": ""
      },
      {
        "id": 156778,
        "score": 453,
        "vote": 0,
        "content": "Parameter is the variable in the declaration of the function. Argument is the actual value of this variable that gets passed to the function.",
        "abstract": ""
      },
      {
        "id": 21067354,
        "score": 24,
        "vote": 0,
        "content": "Let's say you're an airline. You build an airplane. You install seats in it. Then, you fill the plane up with passengers and send it somewhere. The passengers disembark. Next day, you re-use the same plane, and same seats, but with different passengers this time. The plane is your function. The parameters are the seats. The arguments are the passengers that go in those seats.",
        "abstract": ""
      },
      {
        "id": 71307720,
        "score": 0,
        "vote": 0,
        "content": "Consider the below java code. The method definition of hello(String name) declares a String parameter called name.\nIn the main method we are calling the hello method by passing the argument myName. So parameter is the placeholder  where as argument is the actual value for a method.",
        "abstract": ""
      },
      {
        "id": 46360559,
        "score": 15,
        "vote": 0,
        "content": "Always Remember that:\nArguments are passed while parameters are received.",
        "abstract": ""
      },
      {
        "id": 20726232,
        "score": 13,
        "vote": 0,
        "content": "Or maybe it's even simpler to remember like this, in case of optional arguments for a method: parameter is the parameter, its value, \"argument\" is the argument :)",
        "abstract": ""
      },
      {
        "id": 66705994,
        "score": -1,
        "vote": 0,
        "content": "This is a key:value issue... The parameter is the key The argument is the value /****************************************/ Example: name: \"Peter\" /********/ let printName =  (name) => console.log(name) printName(\"Peter\") /********/ In this case, the parameter is \"name\", the argument is \"Peter\"",
        "abstract": ""
      },
      {
        "id": 61764546,
        "score": 0,
        "vote": 0,
        "content": "Source",
        "abstract": ""
      },
      {
        "id": 156792,
        "score": 11,
        "vote": 0,
        "content": "The parameters of a function/method describe to you the values that it uses to calculate its result. The arguments of a function are the values assigned to these parameters during a particular call of the function/method.",
        "abstract": ""
      },
      {
        "id": 59928588,
        "score": 15,
        "vote": 0,
        "content": "Generally speaking, the terms parameter and argument are used interchangeably to mean information that is passed into a function. Yet, from a function's perspective:",
        "abstract": ""
      },
      {
        "id": 59480969,
        "score": 1,
        "vote": 0,
        "content": "As my background and main environment is C, I will provide some statements/citations to that topic from the actual C standard and an important reference book, from also one of the developers of C, which is often cited and common treated as the first unofficial standard of C: The C Programming Language (2nd Edition) by Brian W. Kernighan and Dennis M. Ritchie (April 1988): Page 25, Section 1.7 - Functions We will generally use parameter for a variable named in the parenthesized list in a function definition, and argument for the value used in the call of the function. The terms formal argument and actual argument are sometimes used for the same distinction. ISO/IEC 9899:2018 (C18): 3.3 argument actual argument DEPRECATED: actual parameter expression in the comma-separated list bounded by the parentheses in a function call expression, or a sequence of preprocessing tokens in the comma-separated list bounded by the parentheses in a function-like macro invocation. 3.16 parameter formal parameter DEPRECATED: formal argument object declared as part of a function declaration or definition that acquires a value on entry to the function, or an identifier from the comma-separated list bounded by the parentheses immediately following the macro name in a function-like macro definition.",
        "abstract": ""
      },
      {
        "id": 24367269,
        "score": 23,
        "vote": 0,
        "content": "The use of the terms parameters and arguments have been misused\n  somewhat among programmers and even authors. When dealing with\n  methods, the term parameter is used to identify the placeholders in\n  the method signature, whereas the term arguments are the actual\n  values that you pass in to the method. MCSD Cerfification Toolkit (Exam 70-483) Programming in C#, 1st edition, Wrox, 2013 Real-world case scenario",
        "abstract": ""
      },
      {
        "id": 33401833,
        "score": 6,
        "vote": 0,
        "content": "A \"parameter\" is a very general, broad thing, but an \"argument: is a very specific, concrete thing. This is best illustrated via everyday examples: Most machines take an input and return an output. For example a vending machine takes as an input: money, and returns: fizzy drinks as the output. In that particular case, it accepts as a parameter: money.  What then is the argument? Well if I put $2.00 into the machine, then the argument is: $2.00 - it is the very specific input used. Let's consider a car: they accept petrol (unleaded gasoline) as an input. It can be said that these machines accept parameters of type: petrol. The argument would be the exact and concrete input I put into my car. e.g. In my case, the argument would be: 40 litres of unleaded petrol/gasoline. An argument is a particular and specific example of an input. Suppose my machine takes a person as an input and turns them into someone who isn't a liar. What then is an argument? The argument will be the particular person who is actually put into the machine. e.g. if Colin Powell is put into the machine then the argument would be Colin Powell.  So the parameter would be a person as an abstract concept, but the argument would always be a particular person with a particular name who is put into the machine. The argument is specific and concrete. That's the difference. Simple. Post a comment and I'll fix up the explanation.",
        "abstract": ""
      },
      {
        "id": 53567855,
        "score": 3,
        "vote": 0,
        "content": "Parameter is a variable in a function definition\nArgument is a value of parameter",
        "abstract": ""
      },
      {
        "id": 50638397,
        "score": 1,
        "vote": 0,
        "content": "You need to get back to basics.Both constructors and methods have parameters and arguments.Many people even call constructors special kind of methods.This is how a method is declared parameters are used: And this is how a constructor is declared parameters are used: Now lets see an example code using which we calculate the volume of a cube: So now you understand that when we call a constructor/method on an object at some place later in the code we pass arguments and not parameters.Hence parameters are limited to the place where the logical object is defined but arguments come into play when a physical object gets actually created.",
        "abstract": ""
      },
      {
        "id": 49361685,
        "score": 3,
        "vote": 0,
        "content": "It's explained perfectly in Parameter (computer programming) - Wikipedia Loosely, a parameter is a type, and an argument is an instance. In the function definition f(x) = x*x the variable x is a parameter; in the function call f(2) the value ``2 is the argument of the function.  And  Parameter - Wikipedia In computer programming, two notions of parameter are commonly used, and are referred to as parameters and arguments—or more formally as a formal parameter and an actual parameter. For example, in the definition of a function such as y = f(x) = x + 2, x is the formal parameter (the parameter) of the defined function. When the function is evaluated for a given value, as in f(3): or, y = f(3) = 3 + 2 = 5, is the actual parameter (the argument) for evaluation by the defined function; it is a given value (actual value) that is substituted for the formal parameter of the defined function. (In casual usage the terms parameter and argument might inadvertently be interchanged, and thereby used incorrectly.)",
        "abstract": ""
      },
      {
        "id": 48330590,
        "score": 3,
        "vote": 0,
        "content": "According to Joseph's Alabahari book \"C# in a Nutshell\" (C# 7.0, p. 49) : In some human languages (afaik Italian, Russian) synonyms are widely used for these terms. In my university professors use both kind of names.",
        "abstract": ""
      },
      {
        "id": 47738789,
        "score": 2,
        "vote": 0,
        "content": "I thought it through and realized my previous answer was wrong. Here's a much better definition {Imagine a carton of eggs: A pack of sausage links: And a maid } These represent elements of a Function needed for preparation called : (use any name: Lets say Cooking is the name of my function).  A Maid is a method .  ( You must __call_ or ask this method to make breakfast)(The act of making breakfast is a Function called Cooking)_ Eggs and sausages are Parameters : (because the number of eggs and the number of sausages you want to eat is __variable_ .)_ Your decision is an Argument :  It represents the __Value_ of the chosen number of eggs and/or sausages you are Cooking ._ {Mnemonic} _\" When you call the maid and ask her to make breakfast, she __argues_ with you about how many eggs and sausages you should eating. She's concerned about your cholesterol\" __ ( Arguments , then,  are the values for the combination of Parameters you have declared and decided to pass to your Function )",
        "abstract": ""
      },
      {
        "id": 43602455,
        "score": 173,
        "vote": 0,
        "content": "Simple:",
        "abstract": ""
      },
      {
        "id": 45325837,
        "score": 1,
        "vote": 0,
        "content": "Parameters are variables that are used to store the data that's passed into a function for the function to use. Arguments are the actual data that's passed into a function when it is invoked:",
        "abstract": ""
      },
      {
        "id": 44798271,
        "score": 6,
        "vote": 0,
        "content": "Yes! Parameters and Arguments have different meanings, which can be easily explained as follows: Function Parameters are the names listed in the function definition. Function Arguments are the real values passed to (and received by) the function.",
        "abstract": ""
      },
      {
        "id": 44516192,
        "score": 1,
        "vote": 0,
        "content": "The formal parameters for a function are listed in the function declaration and are used in the body of the function definition. A formal parameter (of any sort) is a kind of blank or placeholder that is filled in with something when the function is called. An argument is something that is used to fill in a formal parameter. When you write down a function call, the arguments are listed in parentheses after the function name. When the function call is executed, the arguments are plugged in for the formal parameters. The terms call-by-value and call-by-reference refer to the mechanism that is used in the plugging-in process. In the call-by-value method only the value of the argument is used. In this call-by-value mechanism, the formal parameter is a local variable that is initialized to the value of the corresponding argument. In the call-by-reference mechanism the argument is a variable and the entire variable is used. In the call- by-reference mechanism the argument variable is substituted for the formal parameter so that any change that is made to the formal parameter is actually made to the argument variable.",
        "abstract": ""
      },
      {
        "id": 43695598,
        "score": 4,
        "vote": 0,
        "content": "Logically speaking,we're actually talking about the same thing.\nBut I think a simple metaphor would be helpful to solve this dilemma.  If the metaphors can be called various connection point we can equate them to plug points on a wall.\nIn this case we can consider parameters and arguments as follows; Parameters are the sockets of the plug-point which may take various different shapes. But only certain types of plugs fit them.\nArguments will be the actual plugs that would be plugged into the plug points/sockets to activate certain equipments.",
        "abstract": ""
      },
      {
        "id": 43252753,
        "score": 8,
        "vote": 0,
        "content": "Parameters and Arguments All the different terms that have to do with parameters and arguments\n  can be confusing. However, if you keep a few simple points in mind,\n  you will be able to easily handle these terms. Source: Absolute C++, Walter Savitch That is, ",
        "abstract": ""
      },
      {
        "id": 40832360,
        "score": 1,
        "vote": 0,
        "content": "Parameters are the variables received by a function.Hence they are visible in function declaration.They contain the variable name with their data type.\nArguments are actual values which are passed to another function. thats why we can see them in function call. They are just values without their datatype ",
        "abstract": ""
      },
      {
        "id": 36172609,
        "score": 3,
        "vote": 0,
        "content": "When we create the method (function) in Java, the method like this.. data-type name of the method (data-type variable-name) In the parenthesis, these are the parameters, and when we call the method (function) we pass the value of this parameter, which are called the arguments.",
        "abstract": ""
      },
      {
        "id": 35923448,
        "score": 4,
        "vote": 0,
        "content": "Oracle's Java tutorials define this distinction thusly:\n\"Parameters refers to the list of variables in a method declaration. Arguments are the actual values that are passed in when the method is invoked. When you invoke a method, the arguments used must match the declaration's parameters in type and order.\" A more detailed discussion of parameters and arguments: \nhttps://docs.oracle.com/javase/tutorial/java/javaOO/arguments.html",
        "abstract": ""
      },
      {
        "id": 23992345,
        "score": 13,
        "vote": 0,
        "content": "In editing, I'm often put off at how people forget: structure languages are based on natural languages.  A \"parameter\" is a placeholder. They set the response format, in spoken language. By definition, it's party to the call, limiting the response. An \"argument\" is a position that is being considered. You argue your opinion: you consider an argument.  The thematic role of an argument is agent.  The thematic role of parameter is recipient.  Think of the argument as the male part, making the parameter the female part. The argument goes into the parameter.  A parameter is usually used in definitions. An argument is usually used in invocations.  Finish the sentence to make it less dissonant. (A) Speaking of a definition: (B) Speaking of an invocation: (A)  (B)  As you can imagine, after answering: in spoken language, these words will sometimes produce identical responses!  So, as a rule:  Usually if someone wants parameter information, they want to know more about the type, the variable name, etc. They may become confused if you only give example arguments. ",
        "abstract": ""
      },
      {
        "id": 22472316,
        "score": 6,
        "vote": 0,
        "content": "An argument is an instantiation of a parameter.",
        "abstract": ""
      },
      {
        "id": 19619127,
        "score": 4,
        "vote": 0,
        "content": "They both dont have much difference in usage in C, both the terms are used\nin practice.\n    Mostly arguments are often used with functions. The value passed with the function calling statement is called the argument, And the parameter would be the variable which copies the value in the function definition (called as formal parameter).     In the above code num1 and num2 are formal parameters and a and b are actual arguments.",
        "abstract": ""
      },
      {
        "id": 18447280,
        "score": 11,
        "vote": 0,
        "content": "This example might help.",
        "abstract": ""
      },
      {
        "id": 17120743,
        "score": 2,
        "vote": 0,
        "content": "Or even simpler... Arguments in ! Parameters out !",
        "abstract": ""
      },
      {
        "id": 156787,
        "score": 1268,
        "vote": 0,
        "content": "A parameter is a variable in a method definition. When a method is called, the arguments are the data you pass into the method's parameters.",
        "abstract": ""
      },
      {
        "id": 156859,
        "score": 87,
        "vote": 0,
        "content": "There is already a Wikipedia entry on the subject (see Parameter) that defines and distinguishes the terms parameter and argument. In short, a parameter is part of the function/procedure/method signature and an argument is the actual value supplied at run-time and/or call-site for the parameter.  The Wikipedia article also states that the two terms are often used synonymously (especially when reasoning about code informally): Although parameters are also commonly\n  referred to as arguments, arguments\n  are more properly thought of as the\n  actual values or references assigned\n  to the parameter variables when the\n  subroutine is called at runtime. Given the following example function in C that adds two integers, x and y would be referred to as its parameters: At a call-site using add, such as the example shown below, 123 and 456 would be referred to as the arguments of the call. Also, some language specifications (or formal documentation) choose to use parameter or argument exclusively and use adjectives like formal and actual instead to disambiguate between the two cases. For example, C/C++ documentation often refers to function parameters as formal arguments and function call arguments as actual arguments. For an example, see “Formal and Actual Arguments” in the Visual C++ Language Reference. ",
        "abstract": ""
      },
      {
        "id": 156875,
        "score": 7,
        "vote": 0,
        "content": "The terms are somewhat interchangeable. The distinction described in other answers is more properly expressed with the terms formal parameter for the name used inside the body of the function and parameter for the value supplied at the call site (formal argument and argument are also common). Also note that, in mathematics, the term argument is far more common and parameter usually means something quite different (though the parameter in a parametric equation is essentially the argument to two or more functions).",
        "abstract": ""
      },
      {
        "id": 156785,
        "score": 36,
        "vote": 0,
        "content": "A parameter is something you have to fill in when you call a function. What you put in it is the argument.  Simply set: the argument goes into the parameter, an argument is the value of the parameter. A bit more info on:\nhttp://en.wikipedia.org/wiki/Parameter_(computer_science)#Parameters_and_arguments",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/72422112/parameter-difference-between-c-and-python",
    "keywords": [],
    "tags": [
      "python",
      "c++"
    ],
    "question": {
      "id": 72422112,
      "title": "parameter difference between C++ and Python",
      "content": "C++ Python I think their code should return same result however\nC ++ result is Python result is i don't understand why variable's address isn't changed in Python while variable's address is changed in C++",
      "abstract": ""
    },
    "answers": [
      {
        "id": 72422146,
        "score": 7,
        "vote": 0,
        "content": "i don't understand why variable's address isn't changed in Python while variable's address is changed in C++. Because in python, we pass an object reference instead of the actual object. While in your C++ program we're passing x by value. This means the function doSomething has a separate copy of the argument that was passed and since it has a separate copy their addresses differ as expected. It is possible to make the C++ program produce the equivalent output as the python program as described below. Demo If you change the function declaration of doSomething to void doSomething(int& y)  you will see that now you get the same result as python. In the modified program below, i've changed the parameter to be an int& instead of just int. The output of the above modified program is equivalent to the output produced from python:",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/47169033/parameter-vs-argument-python",
    "keywords": [],
    "tags": [
      "python",
      "string",
      "function",
      "parameters",
      "arguments"
    ],
    "question": {
      "id": 47169033,
      "title": "Parameter vs Argument Python",
      "content": "So I'm still pretty new to Python and I am still confused about using a parameter vs an argument. For example, how would I write a function that accepts a string as an argument?",
      "abstract": ""
    },
    "answers": [
      {
        "id": 70921285,
        "score": 0,
        "vote": 0,
        "content": "A parameter is the placeholder; an argument is what holds the place. Parameters are conceptual; arguments are actual. Parameters are the function-call signatures defined at compile-time; Arguments are the values passed at run-time. Mnemonic: \"Pee\" for Placeholder Parameters, \"Aeigh\" for Actual Arguments.",
        "abstract": ""
      },
      {
        "id": 69273218,
        "score": 7,
        "vote": 0,
        "content": "In Programming lingo, arguments refers to the data you are passing to the function that is being called whereas the parameter is the name of the data and we use the parameter inside the function to refer it and do things with it. for example: in this case,",
        "abstract": ""
      },
      {
        "id": 67754922,
        "score": 11,
        "vote": 0,
        "content": "See the FAQ: Parameters are defined by the names that appear in a function definition, whereas arguments are the values actually passed to a function when calling it. Parameters define what types of arguments a function can accept. For example, given the function definition: foo, bar and kwargs are parameters of func. However, when calling func, for example: the values 42, 314, and somevar are arguments. See also: For defining a function that accepts a string, see TerryA's answer. I just want to mention that you can add type hints to help people using your function to tell what types it accepts, as well as what type it returns.",
        "abstract": ""
      },
      {
        "id": 47169062,
        "score": 51,
        "vote": 0,
        "content": "Generally when people say parameter/argument they mean the same thing, but the main difference between them is that the parameter is what is declared in the function, while an argument is what is passed through when calling the function. Here, the parameters are a and b, and the arguments being passed through are 5 and 4. Since Python is a dynamically typed language, we do not need to declare the types of the parameters when declaring a function (unlike in other languages such as C). Thus, we can not control what exact type is passed through as an argument to the function. For example, in the above function, we could do add(\"hello\", \"hi\"). This is where functions such as isinstance() are helpful because they can determine the type of an object. For example, if you do isinstance(\"hello\", int), it will return False since \"hello\" is a string.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/68994163/attribute-and-parameter-differences-and-using",
    "keywords": [],
    "tags": [
      "python"
    ],
    "question": {
      "id": 68994163,
      "title": "attribute and parameter - differences and using",
      "content": "What is the difference between when we use a variable as an attribute like self.message and when we use it as a parameter like message in a method:",
      "abstract": ""
    },
    "answers": [
      {
        "id": 69118816,
        "score": 0,
        "vote": 0,
        "content": "A parameter is really just a variable. It is declared by the function signature, and it gets assigned one of the arguments as part of the function call process. An attribute is not a variable at all. It is a part of an object, similar to an index inside []. It is accessed using dot notation. In your code, both functions declare a message parameter, but only the second one uses it. The first function gets all its information from the self object instead of using its message parameter.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/63941547/what-is-the-difference-between-a-variable-and-a-parameter",
    "keywords": [],
    "tags": [
      "python",
      "python-3.x",
      "variables",
      "parameters"
    ],
    "question": {
      "id": 63941547,
      "title": "What is the difference between a variable and a parameter",
      "content": "I am learning python 3 and programming in general for the first time, but I can't seem to distinguish a parameter and a variable?",
      "abstract": ""
    },
    "answers": [
      {
        "id": 63941653,
        "score": 5,
        "vote": 0,
        "content": "A variable is just something that refers/points to some data you have. Here x is a variable. Variables can point to more kinds of data than just numbers, though. They can point to strings, functions, etc. A parameter is something that is passed into a function Here y is a parameter. It doesn't contain a value yet. But if I want to call the function, I need to provide an argument to the function. An argument is the actual value you provide to the function that replaces the parameter. Here, 5 is the argument. Of course, since x points to the value \"5\", I can do this too: which also prints 5",
        "abstract": ""
      },
      {
        "id": 63942770,
        "score": 0,
        "vote": 0,
        "content": "A variable is a name (identifier) that refers to some value. Values can be either immutable types, that is, types that cannot be changed such as strings, bytes, integers and floating point numbers: A variable can also name a mutable type: A parameter (or argument) is a value passed to a function: x is an argument to function foo. foo(some_value) invokes function foo with the value some_value as the actual value. The Python interpreter implicitly assigns x = some_value at the entry to function foo. Note that x is a variable is every sense of the word but that it is defined in the scope of foo so that it hides any other definition of x that may exist outside of foo.",
        "abstract": ""
      },
      {
        "id": 63941603,
        "score": 5,
        "vote": 0,
        "content": "A parameter is a variable that was received as an argument to a function. Once the function has begun executing, the parameter is just like any other variable; it can be reassigned (and stops being tied to the caller's argument) like anything else.",
        "abstract": ""
      },
      {
        "id": 63941585,
        "score": 2,
        "vote": 0,
        "content": "A parameter is a type of variable that serves as the input to a method.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/1788923/parameter-vs-argument",
    "keywords": [],
    "tags": [
      "function",
      "parameters",
      "language-agnostic",
      "arguments",
      "terminology"
    ],
    "question": {
      "id": 1788923,
      "title": "&quot;Parameter&quot; vs &quot;Argument&quot;",
      "content": "I got parameter and argument kind of mixed up and did not really pay attention to when to use one and when to use the other.   Can you please tell me? ",
      "abstract": ""
    },
    "answers": [
      {
        "id": 1788926,
        "score": 1222,
        "vote": 0,
        "content": "A parameter is the variable which is part of the method’s signature (method declaration).  An argument is an expression used when calling the method. Consider the following code: Here i and f are the parameters, and anInt and 2.0 are the arguments.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/3176310/difference-between-parameter-and-argument",
    "keywords": [],
    "tags": [
      "language-agnostic",
      "parameters",
      "arguments",
      "terminology"
    ],
    "question": {
      "id": 3176310,
      "title": "Difference between parameter and argument",
      "content": "Is there a difference between a \"parameter\" and an \"argument\", or are they simply synonyms?",
      "abstract": ""
    },
    "answers": [
      {
        "id": 3176321,
        "score": 205,
        "vote": 0,
        "content": "Argument is often used in the sense of actual argument vs. formal parameter. The formal parameter is what is given in the function declaration/definition/prototype, while the actual argument is what is passed when calling the function — an instance of a formal parameter, if you will. That being said, they are often used interchangeably, their exact use depending on different programming languages and their communities. For example, I have also heard actual parameter etc. So here, x and y would be formal parameters: Whereas here, in the function call, 5 and z are the actual arguments:",
        "abstract": ""
      },
      {
        "id": 3176323,
        "score": 19,
        "vote": 0,
        "content": "Generally, the parameters are what are used inside the function and the arguments are the values passed when the function is called. (Unless you take the opposite view — Wikipedia mentions alternative conventions when discussing parameters and arguments). Under my thesis, x is the parameter to sqrt() and 2.0 is the argument. The terms are often used at least somewhat interchangeably.",
        "abstract": ""
      },
      {
        "id": 4905833,
        "score": 0,
        "vote": 0,
        "content": "Arguments and parameters are different\nin that parameters are used to different values in the program and\nThe arguments are passed the same value\nin the program so they are used in c++.\nBut no difference in c. It is the same for arguments and parameters in c.",
        "abstract": ""
      },
      {
        "id": 3176327,
        "score": 5,
        "vote": 0,
        "content": "They are often used interchangeably in text, but in most standards the distinction is that an argument is an expression passed to a function, where a parameter is a reference declared in a function declaration.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/51054490/how-do-i-differentiate-parameters-and-arguments-in-python",
    "keywords": [],
    "tags": [
      "python",
      "python-3.x"
    ],
    "question": {
      "id": 51054490,
      "title": "How do I differentiate parameters and arguments in python?",
      "content": "I just started self-learning python and have encountered these two problems:\n\n To my understanding, an argument is a value to a function and a parameter is a variable whose value will be supplied when the function is called.  My answer to question #10 was incorrect and I wasn't clear about #8 either. It would be greatly appreciated if anyone could clarify my confusions about an argument and a parameter using these problems.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 51054593,
        "score": 2,
        "vote": 0,
        "content": "Yes, your understanding of both argument and parameter are correct. \nSo if you look at question 10, the data is passed into the function 'min'. that is why it is an argument.  As for question 8, data is a parameter of the function 'f'. When you want to call function 'f' in your program, you will need to provide an argument for the function. Example code:",
        "abstract": ""
      },
      {
        "id": 51054544,
        "score": 0,
        "vote": 0,
        "content": "Parameters exist within a function definition and are referenced within that function. E.g. in def fun(arg): print(arg), arg is a parameter. Arguments are passed to the function and determine what the parameter value will be when the function is called. E.g. in data=1; fun(data), data is the argument. One of the big distinguishing features between the two is the parameters don’t have actual values until the function is called. Arguments are those values.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/48047865/what-is-the-difference-between-argument-and-parameter-in-python-perspective-not",
    "keywords": [],
    "tags": [
      "python",
      "python-2.7"
    ],
    "question": {
      "id": 48047865,
      "title": "What is the difference between argument and parameter in python perspective [not duplicate :) ]?",
      "content": "I heard that argument means the method arguments, ( for example in below code) a and b are arguments and c and d are parameters. Correct me if I am wrong? Then in the below code  The error message is: SyntaxError: non-default argument follows default argument And also in below code The error message is: SyntaxError: non-keyword arg after keyword arg In both error messaeges, 'no-default argument follows default argument' and 'non-keyword arg after keyword arg', why there is no mention of paramter?  It caused the confusion to me many times with both the error messages so aksing this question. Is there any specific reason for error message to be like this. and also could you let me know how to remember the correct error message corresponding to that error. Thank you.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 48048161,
        "score": 3,
        "vote": 0,
        "content": "whenever you call a function suppose the above values 'x', 'y' are arguments and 'a', 'b' are parameters. During function/method calling those variables are called as arguments because you can pass anything like 'x', 'y' or maybe 'p', 'q' etc. But at the function definition those variables are called parameters because they would just be for that function only that is like a limit to that function.  In Python there is concept of position arguments, default arguments, non-default arguments, keyword arguments and named arguments. Here in above function 'b' is a default parameter its value by default would be 10, if whenever the function f2 is called and only 1 value of 'a' is going to come up like f2(x) and variable would 'b' be 10 and for 'a' = 10. And in the f2(x, y) the f2 function's parameters 'a', 'b' will be 10, 20 respectively.  Always remember that at function call position arguments come first then keyword/named parameters must be later on, because the position matters. Same at the function definition first non-default parameters then default ones. The non-defaults one would correspond to positional ones and rest one would correspond to remaining depending on your function call. At case 1 of function call f2(x), here 'x' is the positional argument during function call and 'a' at the function definition is positional parameter and 'y' is the default parameter. At case 2 of function call f2(x, y), both 'x' and 'y' are positional arguments and at function definition 'a' and 'b' both are positional parameters now, as 'y' would be passing value 20 to parameter 'b'. The default value of any function definition would be took only if no argument is passed for that parameter at any function call like case 1 f1(x) or f1(p) then default would be took that is 'b' = 10 and 'a' would be 'x' or 'p'. Next suppose, the above call f3, its arguments 'a' as 5 and 'b' as 15 are keyword/named arguments because they have name/key associated for its value. 'a' is linked as a name/key to value 5 and same for 'b' as 'b' is linked as a name/key to value '15'. Same you can think of like a dictionary. Here during function call make sure names/keys must be same as function definition else we would get an error. Also ensure that no repetition of same arguments/parameters at function call or at function definition will also give us error. And you can specify these keyword/named based arguments in any order.\nlike in case 2 we have f3(b=100, a=200). At function definition the name/key 'a' would correspond to value 200 and the name/key 'b' would correspond to value 100. Here in f4 function definition 'a' and 'b' are having default values 1 and 2.  At case 1 the defaults values would be took. At case 2 only 'b' as name/key value 20 is passed which would correspond to 'b' at function definition, 'a' and 'b' would be 1, 20 respectively. At case 3 only 'a' as name/key value 10 is passed which would correspond to 'a' at function definition, 'a' and 'b' would be 10, 2 respectively. At case 4 both 'a' and 'b' as passed as name/key values 50, 75 which would correspond to both 'a' and 'b' at function definition, 'a' and 'b' would be 75 and 50 respectively. Remember that the name/key arguments only applies during function calling like f4(a=3, b=4). And during function definition def f5(a, b=20) here 'a' is non-default parameter or positional parameter, and 'b' is the default parameter as default value would be took if no value for 'b' is passed during the function call f5.",
        "abstract": ""
      },
      {
        "id": 48048951,
        "score": 0,
        "vote": 0,
        "content": "Technically, parameters are variables in a function definition and arguments are the actual values given to the variables at the point of call. For example: The variable arg in the function definition is the parameter and the value Python in the function call is an argument to that parameter. Wikipedia has a nice description: Parameters and arguments",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/30101785/difference-between-attribute-and-parameter-and-argument",
    "keywords": [],
    "tags": [
      "java"
    ],
    "question": {
      "id": 30101785,
      "title": "difference between attribute and parameter and argument",
      "content": "What is the difference between attribute and parameter and argument? And how does this works?\nex:- And if i pass a argument dynamically then whether it will be called parameter or argument.\nthanks. ",
      "abstract": ""
    },
    "answers": [
      {
        "id": 30102009,
        "score": 5,
        "vote": 0,
        "content": "",
        "abstract": ""
      },
      {
        "id": 30101989,
        "score": 3,
        "vote": 0,
        "content": "A Parameter is what appears in the definition of the method. An Argument is the instance or primitives passed to the method during runtime. ",
        "abstract": ""
      }
    ]
  }
]