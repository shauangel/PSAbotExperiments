[{"link": "https://stackoverflow.com/questions/32279010/secure-coding-guidelines-for-python", "keywords": [], "tags": ["python", "security", "secure-coding"], "question": {"id": 32279010, "title": "Secure Coding Guidelines for Python", "content": "Looking at the CERT Secure Standards (Example: https://www.securecoding.cert.org), there are specific standards, with great examples of what good and bad code looks like, for C, C++, Java, even Perl but not Python.  Are there any Python specific standards are guidelines, preferably with examples available? http://www.pythonsecurity.org/ appears to be focused security concerns in Python itself and on building an alternative Python binary to resolve these.  A noble, but not recently active, cause.  I'm looking for something that gives guidance to developers on what not to do and what to do instead.", "abstract": ""}, "answers": [{"id": 35817038, "score": 8, "vote": 0, "content": "Seeing as lot of people are recommending formatting guidelines (PEP8), I have one that is actually for security. There is a project in OpenStack (very big python based platform), called Bandit. It is a security lint tool. https://github.com/PyCQA/bandit You can run this tool against your own code, or if you wish to learn the inners of secure python coding, then take a look at the examples directory.", "abstract": ""}, {"id": 62008168, "score": 0, "vote": 0, "content": "CERT was developing a Python Secure Coding standard - but nothing seems to have come from their efforts for a number of years.  https://wiki.sei.cmu.edu/confluence/display/seccode Several CERT folks state in presentations that the Python Secure Coding v1.0 is \"under development\". ", "abstract": ""}, {"id": 39037169, "score": 3, "vote": 0, "content": "One place to look at a secure coding standard is https://vulncat.fortify.com/en There you have listed coding errors that affect security. It contains many languages, Python being one of those. I have also been looking for an academic/free secure coding standard for Python. I haven't yet found a good one. I think that SEI CERT should step up and make such a standard. According to their latest webinar on Secure Coding, they are considering this possibility.", "abstract": ""}, {"id": 42239891, "score": 1, "vote": 0, "content": "I posted this in another thread, but we recently released a security linter called DevSkim for Visual Studio, VS Code, and Sublime Text. It targets multiple languages, and is focused on finding security vulnerabilities.", "abstract": ""}, {"id": 32282102, "score": 1, "vote": 0, "content": "I would recommend using a text editor with a code linter for PEP8, or attempting to learn the PEP8 guidelines themselves. PEP8 lists the style recommendations for Python programmers and is quite comprehensive, which has then been adopted into plugins or directly into editors to ensure code meets these style guidelines. Python is wonderful in that there are many available code linters, those that recommend proper style based on PEP8. Great examples of this include Sublime Text with PyLinter or Flake8, or PyCharm without plugins (both freemium, fully-fledged for free use). I would personally recommend Flake8 or PyCharm over PyLinter if you like to have some \"creative liberty\", as PyLinter is quite strict.", "abstract": ""}, {"id": 32279348, "score": -2, "vote": 0, "content": "You can refer to my blogpost for coding guidelines in python. You need to follow PEP8 coding guidelines.  Autopep8 is a tool that automatically formats Python code to conform to the PEP 8 style guide. To run autopep8: autopep8 TARGET.py", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/75115515/does-anything-supercede-pep-8", "keywords": [], "tags": ["python", "pep8", "pep"], "question": {"id": 75115515, "title": "Does anything supercede PEP 8?", "content": "Trying to go from a script kiddie to a semi-respectable software engineer and need to learn how to write clean, digestible code. The book I'm reading pointed me towards PEP 8 - I know this is the foundational styling guide for Python. What I can't seem to figure out is if all the guidelines are still valid today in 2022 and nothing has changed since its last update in 2013 OR if there are supplemental PEPs I should be reading. Visited https://peps.python.org/pep-0000/ and started browsing through the different releases but got confused and unsure which PEPs besides 8 have to do with style guidelines. I found this previous question from 9 years ago and wanted to see if any of the answers have changed.", "abstract": ""}, "answers": [{"id": 75115553, "score": 1, "vote": 0, "content": "PEP 8 is still the latest and great official recommendation, as indicated by the PEP not having any notice that it\u2019s been deprecated or superseded. There are some alternatives that are stricter than PEP 8, including Black and YAPF", "abstract": ""}, {"id": 75115549, "score": 3, "vote": 0, "content": "At the top, below the authors, you can see it says Status: Active As the tooltip explains, that means PEP 8 is Currently valid informational guidance, or an in-use process If the PEP is ever replaced it will say \"Status: Superseded\". At the bottom of the page it says: Last modified: 2022-05-11 17:45:05 GMT You can check the link to see what changes have been made to PEP 8 when.", "abstract": ""}, {"id": 75115548, "score": 1, "vote": 0, "content": "Quoting from the official Python documentation which was last updated on Jan 13, 2023 (as of writing, and is kept pretty well up-to-date): Yes. The coding style required for standard library modules is documented as PEP 8. No mention of anything that would take priority over PEP 8. There are other style guidelines written by third parties, but PEP 8 is still the official style guide.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/60627307/what-are-the-main-differences-between-pep8-and-google-python-style-guide", "keywords": [], "tags": ["python", "pep8", "google-style-guide"], "question": {"id": 60627307, "title": "What are the main differences between PEP8 and Google Python Style Guide?", "content": "", "abstract": ""}, "answers": [{"id": 60627397, "score": 7, "vote": 0, "content": "the main difference is that Google Python Style comes with more details about how to write code, for example how to write your docstrings or when to use aliases for a variable, this are not specified in the PEP8", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/66174512/are-there-any-common-python-naming-conventions-beginners-should-know", "keywords": [], "tags": ["python", "pep8"], "question": {"id": 66174512, "title": "Are there any common Python naming conventions beginners should know?", "content": "New to Python and coding in general. The more I learn (from different sources), the more I continue to hear the phrase \"...this is a common naming convention.\"\nWith the desire to do it right the first time, I wondered if there was a repository or central location for most/many of the common naming conventions found in Python.\nTo clarify, I mean using \"self\" as the first parameter of a Class, importing numpy as np, importing pyplot as plt, importing pandas as pd, etc... I have searched PEP 8 and SO and Google (and Google's style guide as suggested by an answer) and have not found anything like this.\nIs it worthwhile to have a resource such as this? If not, why? I am considering this both as a student new to coding but also as an experienced (former) manager who has had to write many SOPs and understands the value of a repository for common information. EDIT: I am appending further clarification: \"given self as a convention when creating a class, what are other conventions that are commonly reserved words a beginner might not know?\" Thank you,", "abstract": ""}, "answers": [{"id": 66174604, "score": 1, "vote": 0, "content": "There are various naming conventions across many different languages, and styles of writing code. For example in javascript there are many style guides, code is subjective and even companies like big companies like AirBnb have released their own \"style-guide\" which many companies copy. A good place to look if you can't find it in the docs, would be popular python packages, scipy, matplotlib, numpy etc... Here is the naming conventions part in the docs:\nhttps://www.python.org/dev/peps/pep-0008/#naming-conventions In python most people agree on \"naming_like_this\" except for classes and such like. Whereas in JavaScript people normally use camelCase \"namingLikeThis\". The important thing is to be consistent across each code base and more importantly is naming things usefully rather than concentrating on the style of writing things.", "abstract": ""}, {"id": 66174574, "score": 3, "vote": 0, "content": "This is Google style guide. Pretty useful. As you state, you already know the importance of having good variable naming convention and practice throughout the company. Although this is followed by Google, but the rules there are decent and useful and can be followed by team where lot of hands are on same code base.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/56013709/pandas-vs-pep-style-guide", "keywords": [], "tags": ["python", "pandas"], "question": {"id": 56013709, "title": "Pandas vs PEP style guide", "content": "Pandas vectorized methods allow to do a lot in a single line which leads to a longer-than-usual line. How do I reconcile the PEP guidelines with pandas long lines?  PEP recommends that python maximum line length should not be greater than 72. Pandas lines can be like this: or  I cannot modify the header names and I think using variables to shorten the names will make the code less explicit and hard to read.", "abstract": ""}, "answers": [{"id": 56014160, "score": 2, "vote": 0, "content": "Also consider putting very long subexpressions into an intermediate variable. You could for example rewrite your line: as:", "abstract": ""}, {"id": 56013740, "score": 8, "vote": 0, "content": "What you're referring to is called method chaining. There are a few ways to break things up: Example:", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/3892656/anyone-have-a-favorite-python-coding-style-enforcer", "keywords": [], "tags": ["python", "coding-style"], "question": {"id": 3892656, "title": "Anyone have a favorite Python coding style enforcer?", "content": "I'm trying to find a Python coding style enforcer (tool, not person!). Any recommendations?", "abstract": ""}, "answers": [{"id": 3893010, "score": 1, "vote": 0, "content": "Don't forget PEP8, both the PEP8 style guide (http://www.python.org/dev/peps/pep-0008/) and the tool Not a lint like tool, but keeps your style in line with the main python community. yapf (https://pypi.python.org/pypi/yapf) is super cool, reformats your code to be pep8 compliant. Very handy", "abstract": ""}, {"id": 3892701, "score": 2, "vote": 0, "content": "I only know pylint, but it is not an automatic code formatter, rather a marking tool.", "abstract": ""}, {"id": 3892718, "score": 0, "vote": 0, "content": "pyflakes is like pylint but faster.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/41644544/what-is-pep8-actually-for-and-why-do-i-have-to-shorten-my-lines", "keywords": [], "tags": ["python", "string", "python-3.x", "text"], "question": {"id": 41644544, "title": "What is PEP8 actually for and why do I have to shorten my lines?", "content": "I'm doing a Python Project for homework and my my IDE (PyCharm) keeps telling me that my line is too long. I've done some research and I've found out that the rule is because of something called PEP8. However, I have not found a clear explanation of what PEP8 is, and I feel that understanding it may help with my programming ability. Can anyone help? This question has been marked as duplicate so I'm going to explain how it is different. I have found that PEP8 wants you to make your lines shorter, but I wanted to know how it could benefit my programming skills. I know now, however, thanks to the help of an answer. I feel that I have learned something from this post, and so it should not be closed in case anyone has anything helpful to offer.", "abstract": ""}, "answers": [{"id": 41644568, "score": 9, "vote": 0, "content": "Pep8 is a coding standard and Style Guide for readability and long-term maintainability. It's not a requirement for your code to work, just a good coding practice you should follow.  https://www.python.org/dev/peps/pep-0008/ There are also some automated tools you can use to help make your source code pep8 and other linters. Here's an example of one. https://pypi.python.org/pypi/autopep8", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/30772254/does-elixir-have-coding-standards-or-an-authoritative-style-guide-published-by-t", "keywords": [], "tags": ["coding-style", "elixir"], "question": {"id": 30772254, "title": "Does Elixir have coding standards or an authoritative style guide published by the language developers, like PEP8 or the Erlang Programming Rules?", "content": "I'm pretty sure that I can just use the Erlang style guide, but if Elixir has evolved to the point of something like PEP8, I would like to enforce it* as soon as possible.  If it's just a matter of opinion, I guess I'll just blend the Erlang style guide into the community style guide I found.  Much of the following community coding standard \"The Elixir Style Guide\" looks like it was borrowed from Ruby style guides:  The Elixir Style Guide People are aware of style as a concern, generally, but I suspect that many of these Elixir pioneers are seasoned programmers.  Is there an authoritative style guide, like PEP8 for Python, published for Elixir-lang?  To rephrase, PEP8 is an authoritative guide published on python.org, as follows: python.org/dev/peps/pep-0008. The Elixir Style Guide, however, is a community effort, though a very nice one. might require me to look for, or develop, more on metaprogramming and macro definition.  Similarly, Erlang has its programming rules: http://www.erlang.se/doc/programming_rules.shtml Does Elixir have an authoritative, author sanctioned style guide, y/N? *pre-receive hoox enabled by mean, mean wadies", "abstract": ""}, "answers": [{"id": 30789908, "score": 9, "vote": 0, "content": "Is there an authoritative style guide, like PEP8 for Python, published for Elixir-lang? No, there is not.", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/1318799/tool-to-enforce-python-code-style-standards", "keywords": [], "tags": ["python", "coding-style"], "question": {"id": 1318799, "title": "Tool to enforce python code style/standards", "content": "I'm trying to find a tool to check for coding style in python. For PHP I've seen there is the Code Sniffer, and a small perl script used by Drupal. Is there such a tool for python code?", "abstract": ""}, "answers": [{"id": 1318812, "score": 12, "vote": 0, "content": "pylint and pyflakes would be a good start. pylint in particular is very configurable, and you can enforce quite a few things with it.", "abstract": ""}, {"id": 1318939, "score": 37, "vote": 0, "content": "In the past I've mainly use PyLint - it can highlight when you used an undefined variable, when you import things without using them and so on. It can be a bit verbose, complaining about things like lines being over 80 character long, variable not matching to specific regex's, classes having too few public methods, methods missing docs-trings. For example, for script.. PyLint generates the following messages: They are all valid complaints, but I tend to disable a lot of the convention and refactoring messages. You can disable specific messages, either as comments in your code: ..or as command line arguments to the PyLint command: With the above messages disabled, it generates the following messages for the above code: PyLint also generates a \"code report\", including how many lines of code/comments/docstring/whitespace the file has, number of messages per-category, and gives your code a \"score\" - 10 being no messages, 0 generally being a syntax error Another option is PyFlakes, which I find a little less excessively-verbose (I've recently started using it in place of PyLint). Again using the above script, PyFlakes gives the following messages: The final option I use is pep8.py, which as the name suggests enforces PEP8. It is by far the most.. pedantic script, enforcing things like correct blank-lines before/after functions/classes, spacing around code, correct 4-space indentation and so on.. Running on the code above, it produces the following: It is mostly enforces stylistic things like correct whitespace, it does not do much static-analysis of the code like PyLint or PyFlakes, so I use pep8.py in conjunction with either PyLint or PyFlakes. pep8.py was originally announced on the python mailing list here, but the download link in this is now dead.. There's a github mirror by cburroughs, with a few minor fixes at github.com/cburroughs/pep8.py, or you can grab the unmodified version from an older revision PyChecker is another option, although I haven't use it", "abstract": ""}, {"id": 14256707, "score": 4, "vote": 0, "content": "Found this stackoverflow question while searching for a pep8 style enforcement tool when taking over an existing (legacy) project. https://github.com/hhatto/autopep8 will automagically convert all the source code to confirm with pep8. Tried it on my legacy project and it works great.  So I thought I would update this answer here in SO.", "abstract": ""}, {"id": 1318807, "score": 2, "vote": 0, "content": "Theres a script called reindent.py thats sometimes included in your system's python distribution which will go through and re-indent all your code to the recommended 4 spaces indenting. Heres a copy of it in case you can't find it in your distribution: http://www.koders.com/python/fid24D30FCD2CE388C67CB980EF55630D25970CFB96.aspx?s=cdef%3Aparser", "abstract": ""}]}, {"link": "https://stackoverflow.com/questions/2815272/common-coding-style-for-python", "keywords": [], "tags": ["python", "coding-style", "naming-conventions", "indentation", "column-width"], "question": {"id": 2815272, "title": "Common coding style for Python?", "content": "I'm pretty new to Python, and I want to develop my first serious open source project. I want to ask what is the common coding style for python projects. I'll put also what I'm doing right now. 1.- What is the most widely used column width? (the eternal question)\nI'm currently sticking to 80 columns (and it's a pain!) 2.- What quotes to use? (I've seen everything and PEP 8 does not mention anything clear)\nI'm using single quotes for everything but docstrings, which use triple double quotes. 3.- Where do I put my imports?\nI'm putting them at file header in this order. 4.- Can I use \"import whatever.function as blah\"?\nI saw some documents that disregard doing this. 5.- Tabs or spaces for indenting?\nCurrently using 4 spaces tabs. 6.- Variable naming style?\nI'm using lowercase for everything but classes, which I put in camelCase. Anything you would recommend?", "abstract": ""}, "answers": [{"id": 2815333, "score": 2, "vote": 0, "content": "1.- Most everyone has a 16:9 or 16:10 monitor now days. Even if they don't have a wide-screen they have lots of pixels, 80 cols isn't a big practical deal breaker like it was when everyone was hacking at the command line in a remote terminal window on a 4:3 monitor at 320 X 240. I usually end the line when it gets too long, which is subjective. I am at 2048 X 1152 on a 23\" Monitor X 2. 2.- Single quotes by default so you don't have to escape Double quotes, Double quotes when you need to embed single quotes, and Triple quotes for strings with embedded newlines. 3.- Put them at the top of the file, sometimes you put them in the main function if they aren't needed globally to the module. 4.- It is a common idiom to rename some modules. A good example is the following. but the preferred way to import just a class or function is from module import xxx with the optional as yyy if needed 5.- Always use SPACES! 2 or 4 as long as no TABS 6.- Classes should up UpperCaseCamelStyle, variables are lowercase sometimes lowerCamelCase or sometimes all_lowecase_separated_by_underscores, as are function names. \"Constants\" should be ALL_UPPER_CASE_SEPARATED_BY_UNDERSCORES When in doubt refer to the PEP 8, the Python source, existing conventions in a code base. But the most import thing is to be internally consistent as possible. All Python code should look like it was written by the same person when ever possible.", "abstract": ""}, {"id": 2815436, "score": 1, "vote": 0, "content": "Since I'm really crazy about \"styling\" I'll write down the guidelines that I currently use in a near 8k SLOC project with about 35 files, most of it matches PEP8. PEP8 says 79(WTF?), I go with 80 and I'm used to it now. Less eye movement after all! Docstrings and stuff that spans multiple lines in '''. Everything else in ''. Also I don't like double quotes, I only use single quotes all the time... guess that's because I came form the JavaScript corner, where it's just easier too use '', because that way you don't have to escape all the HTML stuff :O At the head, built-in before custom application code. But I also go with a \"fail early\" approach, so if there's something that's version depended(GTK for example) I'd import that first. Depends, most of the times I go with import foo and from foo import, but there a certain cases(e.G. the name is already defined by another import) were I use from foo import bar as bla too. 4 Spaces. Period. If you really want to use tabs, make sure to convert them to spaces before committing when working with SCM. BUT NEVER(!) MIX TABS AND SPACES!!! It can AND WILL introduce horrible bugs. some_method or foo_function, a CONSTANT, MyClass. Also you can argue about indentation in cases where a method call or something spans multiple lines, and you can argue about which line continuation style you will use. Either surround everything with () or do the \\ at the end of the line thingy. I do the latter, and I also place operators and other stuff at the start of the next line. Also I have some guidelines for comparison operations, I always use is(not) to check against None True False and I never do an implicit boolean comparison like if foo:, I always do if foo is True:, dynamic typing is nice but in some cases I just want to be sure that the thing does the right thing!  Another thing that I do is to never use empty strings! They are in a constants file, in the rest of the code I have stuff like username == UNSET_USERNAME or label = UNSET_LABEL it's just more descriptive that way! I also have some strict whitespace guidelines and other crazy stuff, but I like it(because I'm crazy about it), I even wrote a script which checks my code:\nhttp://github.com/BonsaiDen/Atarashii/blob/master/checkstyle WARNING(!): It will hurt your feelings! Even more than JSLint does... But that's just my 2 cents.", "abstract": ""}, {"id": 2815311, "score": 20, "vote": 0, "content": "PEP 8 is pretty much \"the root\" of all common style guides. Google's Python style guide has some parts that are quite well thought of, but others are idiosyncratic (the two-space indents instead of the popular four-space ones, and the CamelCase style for functions and methods instead of the camel_case style, are pretty major idiosyncrasies). On to your specific questions: 1.- What is the most widely used column width? (the eternal question)\n  I'm currently sticking to 80 columns\n  (and it's a pain!) 80 columns is most popular 2.- What quotes to use? (I've seen everything and PEP 8 does not mention\n  anything clear) I'm using single\n  quotes for everything but docstrings,\n  which use triple double quotes. I prefer the style you're using, but even Google was not able to reach a consensus about this:-( 3.- Where do I put my imports? I'm putting them at file header in this\n  order. import sys import -rest of python\n  modules needed- import whatever import -rest of\n  application modules-  Yes, excellent choice, and popular too. 4.- Can I use \"import whatever.function as blah\"? I saw some\n  documents that disregard doing this. I strongly recommend you always import modules -- not specific names from inside a module.  This is not just style -- there are strong advantages e.g. in testability in doing that.  The as clause is fine, to shorten a module's name or avoid clashes. 5.- Tabs or spaces for indenting? Currently using 4 spaces tabs. Overwhelmingly most popular. 6.- Variable naming style? I'm using lowercase for everything but classes,\n  which I put in camelCase. Almost everybody names classes with uppercase initial and constants with all-uppercase.", "abstract": ""}]}]