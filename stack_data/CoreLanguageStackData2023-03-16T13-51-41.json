[
  {
    "link": "https://stackoverflow.com/questions/44780357/how-can-i-use-newline-n-in-an-f-string-to-format-output",
    "keywords": [],
    "tags": [
      "python",
      "python-3.x",
      "newline",
      "python-3.6",
      "f-string"
    ],
    "question": {
      "id": 44780357,
      "title": "How can I use newline &#39;\\n&#39; in an f-string to format output?",
      "content": "I tried this code: However, '\\' cannot be used inside the {...} expression portions of an f-string. How can I make it work? The result should be: See Why isn't it possible to use backslashes inside the braces of f-strings? How can I work around the problem? for some additional discussion of why the limitation exists.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 75404785,
        "score": 1,
        "vote": 0,
        "content": "And remember not to use this strange way that also works:",
        "abstract": ""
      },
      {
        "id": 69762290,
        "score": 1,
        "vote": 0,
        "content": "If (and only if!) readability is the top priority, and speed is truly not a factor, f-strings are very useful to make a simple function self documenting even if there are simpler ways to program it. Readability is maximized with f-strings when: (1) the statements that change the argument's state are clearly obvious, and (2) when the arguments are printed, the print statement is carefully formatted, and visually presented to make the arguments stand out: output:",
        "abstract": ""
      },
      {
        "id": 68678495,
        "score": 3,
        "vote": 0,
        "content": "The above statement will raise SyntaxError,\nBut to avoid the error, you can simply assign the string containing \\n to a variable and use it in f-string.",
        "abstract": ""
      },
      {
        "id": 44780840,
        "score": 83,
        "vote": 0,
        "content": "You don't need f-strings or other formatters to print a list of strings with a separator. Just use the sep keyword argument to print(): Output: That said, using str.join()/str.format() here would arguably be simpler and more readable than any f-string workaround:",
        "abstract": ""
      },
      {
        "id": 44780467,
        "score": 239,
        "vote": 0,
        "content": "You can't. Backslashes cannot appear inside the curly braces {}; doing so results in a SyntaxError:  This is specified in the PEP for f-strings: Backslashes may not appear inside the expression portions of f-strings, [...] One option is assinging '\\n' to a name and then .join on that inside the f-string; that is, without using a literal: Results in: Another option, as specified by @wim, is to use chr(10) to get \\n returned and then join there. f\"Winners are:\\n{chr(10).join(names)}\" Yet another, of course, is to '\\n'.join beforehand and then add the name accordingly: which results in the same output. This is one of the small differences between f-strings and str.format. In the latter, you can always use punctuation granted that a corresponding wacky dict is unpacked that contains those keys: (Please don't do this.) In the former, punctuation isn't allowed because you can't have identifiers that use them. Aside: I would definitely opt for print or format, as the other answers suggest as an alternative. The options I've given only apply if you must for some reason use f-strings.  Just because something is new, doesn't mean you should try and do everything with it ;-)",
        "abstract": ""
      },
      {
        "id": 44781133,
        "score": 23,
        "vote": 0,
        "content": "You can't use backslashes in f-strings as others have said, but you could step around this using os.linesep (although note this won't be \\n on all platforms, and is not recommended unless reading/writing binary files; see Rick's comments): Or perhaps in a less readable way, but guaranteed to be \\n, with chr():",
        "abstract": ""
      },
      {
        "id": 44781006,
        "score": 11,
        "vote": 0,
        "content": "The other answers give ideas for how to put the newline character into a f-string field. However, I would argue that for the example the OP gave (which may or may not be indicative of OP's actual use case), none of these ideas should actually be used.  The entire point of using f-strings is increasing code readability. There is nothing you can do with f-strings that you cannot do with format. Consider carefully whether there is anything more readable about this (if you could do it):  ...or this: ...or this: vs. this:  The last way is at least as readable, if not more so.  In short: don't use a hammer when you need a screwdriver just because you have a shiny new one. Code is read much more often than it is written.  For other use cases, yes, it's possible the chr(10) idea or newline idea may be appropriate. But not for the one given. ",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/24735311/what-does-the-slash-mean-when-help-is-listing-method-signatures",
    "keywords": [],
    "tags": [
      "python",
      "python-3.x",
      "parameters",
      "introspection"
    ],
    "question": {
      "id": 24735311,
      "title": "What does the slash mean when help() is listing method signatures?",
      "content": "What does the / mean in Python 3.4's help output for range before the closing parenthesis?",
      "abstract": ""
    },
    "answers": [
      {
        "id": 59642921,
        "score": 33,
        "vote": 0,
        "content": "Forward Slash (/) indicates all arguments prior to it are positional only argument. Positional only arguments feature was added in python 3.8 after PEP 570 was accepted. Initially this notation was defined in PEP 457 - Notation for Notation For Positional-Only Parameters Parameters in function definition prior Foraward slash (/) are positional only and parameters followed by slash(/) can be of any kind as per syntax. Where arguments are mapped to positional only parameters solely based on their position upon calling a function. Passing positional-only parameters by keywords(name) is invalid. Let's take following example Here in the above function definition parameters a and b are positional-only, while x or y can be either positional or keyword. Following function calls are valid But, following function call is not valid which raises an exception TypeError since a, b are not passed as positional arguments instead passed as keyword TypeError: foo() got some positional-only arguments passed as keyword\narguments: 'a, b' Many built in function in python accept positional only arguments where passing arguments by keyword doesn't make sense. For example built-in function len accepts only one positional(only) argument, Where calling len as len(obj=\"hello world\")  impairs readability, check help(len). Positional only parameters make underlying c/library functions easy to maintain. It allows parameters names of positional only parameters to be changes in future without risk of breaking client code that uses API Last but not least, positional only parameters allow us to use their names to be used in variable length keyword arguments. Check following example Positional-only parameters syntax was officially added to python3.8. Checkout what's new python3.8 - positional only arguments PEP Related: PEP 570 -- Python Positional-Only Parameters",
        "abstract": ""
      },
      {
        "id": 24735582,
        "score": 294,
        "vote": 0,
        "content": "It signifies the end of the positional only parameters, parameters you cannot use as keyword parameters. Before Python 3.8, such parameters could only be specified in the C API. It means the key argument to __contains__ can only be passed in by position (range(5).__contains__(3)), not as a keyword argument (range(5).__contains__(key=3)), something you can do with positional arguments in pure-python functions. Also see the Argument Clinic documentation: To mark all parameters as positional-only in Argument Clinic, add a / on a line by itself after the last parameter, indented the same as the parameter lines. and the (very recent addition to) the Python FAQ: A slash in the argument list of a function denotes that the parameters prior to it are positional-only. Positional-only parameters are the ones without an externally-usable name. Upon calling a function that accepts positional-only parameters, arguments are mapped to parameters based solely on their position. The syntax is now part of the Python language specification, as of version 3.8, see PEP 570 – Python Positional-Only Parameters. Before PEP 570, the syntax was already reserved for possible future inclusion in Python, see PEP 457 - Syntax For Positional-Only Parameters.  Positional-only parameters can lead to cleaner and clearer APIs, make pure-Python implementations of otherwise C-only modules more consistent and easier to maintain, and because positional-only parameters require very little processing, they lead to faster Python code.",
        "abstract": ""
      },
      {
        "id": 56212520,
        "score": 83,
        "vote": 0,
        "content": "I asked this question myself. :) Found out that / was originally proposed by Guido in here. Alternative proposal: how about using '/' ? It's kind of the opposite\n  of '*' which means \"keyword argument\", and '/' is not a new character. Then his proposal won. Heh. If that's true, my '/' proposal wins: I think the very relevant document covering this is PEP 570.\nWhere recap section looks nice. Recap The use case will determine which parameters to use in the function definition: As guidance: Use positional-only if names do not matter or have no meaning, and there are only a few arguments which will always be passed in the same order.\n     Use keyword-only when names have meaning and the function definition is more understandable by being explicit with names. If the function ends with / This means all functional arguments are positional. ",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/73234949/discord-slash-commands-using-python",
    "keywords": [],
    "tags": [
      "python",
      "discord",
      "bots",
      "pycord"
    ],
    "question": {
      "id": 73234949,
      "title": "Discord slash commands using python",
      "content": "I have been looking at stackoverflow posts and so many places but still can't find the answer to this question that works for me. How do I make discord python slash commands?\nFollowing this post :https://stackoverflow.com/questions/71165431/how-do-i-make-a-working-slash-command-in-discord-py#:~:text=import%20discord%20from%20discord.ext%20import%20commands%20create%20you,ids%20in%20which%20the%20slash%20command%20will%20appear.\nI got the error: Traceback (most recent call last):\nFile \"/home/container/bot.py\", line 3, in \nbot = discord.Bot(command_prefix=\"!\")\nAttributeError: module 'discord' has no attribute 'Bot' With this code: I tried replacing \"bot = discord.Bot\" with \"bot = commands.Bot\" but that didn't work either The only code I found had no errors was: But no slash commands appeared on discord",
      "abstract": ""
    },
    "answers": [
      {
        "id": 74845836,
        "score": 1,
        "vote": 0,
        "content": "You have this error because you use discord's client and not discord.ext's. Next up, slash won't be used (variable and event). Replace to this event: After this is done, update the Command Tree and it should appear no problem on Discord. Link here: https://discordpy.readthedocs.io/en/stable/interactions/api.html#commandtree Hope it helped. :D EDIT: try this, It's your code but I modified it (if it works well for me, it will work well for you): main.py: Now it should appear up to an hour after sync. Hope this helps more.\n(Little precision: if you use Pycord, the code will be different)",
        "abstract": ""
      },
      {
        "id": 73478978,
        "score": -2,
        "vote": 0,
        "content": "OUTDATED Discord.py is no more updated. If you want to use a more recent version of the discord module, you have to install pycord https://guide.pycord.dev/installation To do this, first you have to uninstall the discord.py module using:\npip uninstall discord.py\nAnd then install pycord using:\npip install py-cord Your script will work like that:",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/16010992/how-to-use-directory-separator-in-both-linux-and-windows-in-python",
    "keywords": [],
    "tags": [
      "python",
      "linux",
      "windows",
      "unix"
    ],
    "question": {
      "id": 16010992,
      "title": "How to use &quot;/&quot; (directory separator) in both Linux and Windows in Python?",
      "content": "I have written a code in python which uses / to make a particular file in a folder, if I want to use the code in windows it will not work, is there a way by which I can use the code in Windows and Linux. In python I am using this code: When I will use my code in suppose windows machine my code will not work. How do I use \"/\" (directory separator) in both Linux and Windows?",
      "abstract": ""
    },
    "answers": [
      {
        "id": 67751005,
        "score": 4,
        "vote": 0,
        "content": "If someone is looking for something like this: He/she wants to know the parent directory and then go to the sub-folders and maybe than to a specific file. If so, I use the following approach. path = os.path.pardir + os.sep + 'utils' + os.sep + 'properties.ini' print(f'The path to my global properties file is :: {path}') Output: ..\\utils\\properties.ini You can surely look at the whole documentation here : https://docs.python.org/3/library/os.html",
        "abstract": ""
      },
      {
        "id": 67585662,
        "score": 0,
        "vote": 0,
        "content": "I use pathlib for most things, so I like: pathlib.os.sep. Usually pathlib is the better choice if you don't need os!",
        "abstract": ""
      },
      {
        "id": 44189631,
        "score": 31,
        "vote": 0,
        "content": "If you are fortunate enough to be running Python 3.4+, you can use pathlib: or, equivalently,",
        "abstract": ""
      },
      {
        "id": 38923690,
        "score": 67,
        "vote": 0,
        "content": "os.path.normpath(pathname) should also be mentioned as it converts / path separators into \\ separators on Windows. It also collapses redundant uplevel references... i.e., A/B and A/foo/../B and A/./B all become A/B.  And if you are Windows, these all become A\\B.",
        "abstract": ""
      },
      {
        "id": 50522959,
        "score": 9,
        "vote": 0,
        "content": "You can use \"os.sep \"",
        "abstract": ""
      },
      {
        "id": 16011057,
        "score": 88,
        "vote": 0,
        "content": "You can use os.sep:",
        "abstract": ""
      },
      {
        "id": 16011123,
        "score": 5,
        "vote": 0,
        "content": "Don't build directory and file names your self, use python's included libraries.  In this case the relevant one is os.path. Especially join which creates a new pathname from a directory and a file name or directory and split that gets the filename from a full path. Your example would be ",
        "abstract": ""
      },
      {
        "id": 16011098,
        "score": 322,
        "vote": 0,
        "content": "Use os.path.join().\nExample: os.path.join(pathfile,\"output\",\"log.txt\"). In your code that would be: rootTree.write(os.path.join(pathfile,\"output\",\"log.txt\"))",
        "abstract": ""
      },
      {
        "id": 16011083,
        "score": 154,
        "vote": 0,
        "content": "Use: to see how separator looks on a current OS.\nIn your code you can use:",
        "abstract": ""
      },
      {
        "id": 16011039,
        "score": 20,
        "vote": 0,
        "content": "Some useful links that will help you:",
        "abstract": ""
      },
      {
        "id": 16011031,
        "score": 13,
        "vote": 0,
        "content": "Do a import os and then use os.sep",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/59661042/what-do-single-star-and-slash-do-as-independent-parameters",
    "keywords": [],
    "tags": [
      "python",
      "python-3.x",
      "function",
      "parameter-passing",
      "function-parameter"
    ],
    "question": {
      "id": 59661042,
      "title": "What do * (single star) and / (slash) do as independent parameters?",
      "content": "In the following function definition, what do the * and / account for? NOTE: Not to mistake with the single|double asterisks in *args | **kwargs (solved here)",
      "abstract": ""
    },
    "answers": [
      {
        "id": 59661137,
        "score": 76,
        "vote": 0,
        "content": "There is a new function parameter syntax / to indicate that some function parameters must be specified positionally and cannot be used as keyword arguments.[This is new in Python 3.8] Documentation specifies some of the use cases/benefits of positional-only parameters. It allows pure Python functions to fully emulate behaviors of\nexisting C coded functions. For example, the built-in pow()\nfunction does not accept keyword arguments: Another use case is to preclude keyword arguments when the parameter\nname is not helpful. For example, the builtin len() function has\nthe signature len(obj, /). This precludes awkward calls such as: A further benefit of marking a parameter as positional-only is that\nit allows the parameter name to be changed in the future without\nrisk of breaking client code. For example, in the statistics module,\nthe parameter name dist may be changed in the future. This was made\npossible with the following function specification: Where as * is used to force the caller to use named arguments. Django documentation contains a section which clearly explains a  usecase of named arguments. Form fields no longer accept optional arguments as positional\narguments To help prevent runtime errors due to incorrect ordering of\nform field arguments, optional arguments of built-in form fields are\nno longer accepted as positional arguments. For example: forms.IntegerField(25, 10) raises an exception and should be replaced\nwith: forms.IntegerField(max_value=25, min_value=10) Suppose we have a method called func, It must called with or ie, DEMO:",
        "abstract": ""
      },
      {
        "id": 59661122,
        "score": 5,
        "vote": 0,
        "content": "As mentioned in the docs, the slash is for positional-only arguments, as the docs says: There is a new function parameter syntax / to indicate that some function parameters must be specified positionally and cannot be used as keyword arguments. This is the same notation shown by help() for C functions annotated with Larry Hastings’ Argument Clinic tool. And for the asterisk, it's mentioned here in the docs: For a parameter with a default value, the corresponding argument may be omitted from a call, in which case the parameter’s default value is substituted. If a parameter has a default value, all following parameters up until the “*” must also have a default value — this is a syntactic restriction that is not expressed by the grammar. So the ways to call this would be: And:",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/1945920/why-doesnt-os-path-join-work-in-this-case",
    "keywords": [],
    "tags": [
      "python",
      "path"
    ],
    "question": {
      "id": 1945920,
      "title": "Why doesn&#39;t os.path.join() work in this case?",
      "content": "The below code will not join, when debugged the command does not store the whole path but just the last entry. When I test this it only stores the /new_sandbox/ part of the code.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 74229426,
        "score": 0,
        "vote": 0,
        "content": "Please refer following code snippet for understanding os.path.join(a, b) OR But, when OR",
        "abstract": ""
      },
      {
        "id": 69469685,
        "score": 0,
        "vote": 0,
        "content": "The problem is your laptop maybe running Window. And Window annoyingly use back lash instead of forward slash'/'. To make your program cross-platform (linux/windows/etc).\nYou shouldn't provide any slashes (forward or backward) in your path if you want os.path.join to handle them properly. you should using: Or throw some Path(__file__).resolve().parent (path to parent of current file) or anything so that you don't use any slash inside os.path.join",
        "abstract": ""
      },
      {
        "id": 57826848,
        "score": 1,
        "vote": 0,
        "content": "a fuller version:",
        "abstract": ""
      },
      {
        "id": 60416293,
        "score": 0,
        "vote": 0,
        "content": "I'd recommend to strip from the second and the following strings the string os.path.sep, preventing them to be interpreted as absolute paths:",
        "abstract": ""
      },
      {
        "id": 58588281,
        "score": 0,
        "vote": 0,
        "content": "you can strip the '/':",
        "abstract": ""
      },
      {
        "id": 49961041,
        "score": 13,
        "vote": 0,
        "content": "Try combo of split(\"/\") and * for strings with existing joins.  How it works... split(\"/\") turns existing path into list: ['', 'home', 'build', 'test', 'sandboxes', ''] * in front of the list breaks out each item of list its own parameter ",
        "abstract": ""
      },
      {
        "id": 1945935,
        "score": 33,
        "vote": 0,
        "content": "Do not use forward slashes at the beginning of path components, except when refering to the root directory: see also: http://docs.python.org/library/os.path.html#os.path.join",
        "abstract": ""
      },
      {
        "id": 1948595,
        "score": 167,
        "vote": 0,
        "content": "The idea of os.path.join() is to make your program cross-platform (linux/windows/etc). Even one slash ruins it. So it only makes sense when being used with some kind of a reference point like\nos.environ['HOME'] or os.path.dirname(__file__).",
        "abstract": ""
      },
      {
        "id": 14962135,
        "score": 90,
        "vote": 0,
        "content": "os.path.join() can be used in conjunction with os.path.sep to create an absolute rather than relative path.",
        "abstract": ""
      },
      {
        "id": 1945930,
        "score": 537,
        "vote": 0,
        "content": "The latter strings shouldn't start with a slash. If they start with a slash, then they're considered an \"absolute path\" and everything before them is discarded. Quoting the Python docs for os.path.join: If a component is an absolute path, all previous components are thrown away and joining continues from the absolute path component. Note on Windows, the behaviour in relation to drive letters, which seems to have changed compared to earlier Python versions: On Windows, the drive letter is not reset when an absolute path component (e.g., r'\\foo') is encountered. If a component contains a drive letter, all previous components are thrown away and the drive letter is reset. Note that since there is a current directory for each drive, os.path.join(\"c:\", \"foo\") represents a path relative to the current directory on drive C: (c:foo), not c:\\foo.",
        "abstract": ""
      },
      {
        "id": 37556617,
        "score": 0,
        "vote": 0,
        "content": "Note that a similar issue can bite you if you use os.path.join() to include an extension that already includes a dot, which is what happens automatically when you use os.path.splitext(). In this example: Even though extension might be .jpg you end up with a folder named \"foobar\" rather than a file called \"foobar.jpg\". To prevent this you need to append the extension separately:",
        "abstract": ""
      },
      {
        "id": 1945936,
        "score": 3,
        "vote": 0,
        "content": "Try with new_sandbox only",
        "abstract": ""
      },
      {
        "id": 25559273,
        "score": 8,
        "vote": 0,
        "content": "To make your function more portable, use it as such: or",
        "abstract": ""
      },
      {
        "id": 24296743,
        "score": 26,
        "vote": 0,
        "content": "To help understand why this surprising behavior isn't entirely terrible, consider an application which accepts a config file name as an argument: If the application is executed with: The config file /etc/myapp.conf/foo.conf will be used. But consider what happens if the application is called with: Then myapp should use the config file at /some/path/bar.conf (and not /etc/myapp.conf/some/path/bar.conf or similar). It may not be great, but I believe this is the motivation for the absolute path behaviour.",
        "abstract": ""
      },
      {
        "id": 1946192,
        "score": 3,
        "vote": 0,
        "content": "do it like this, without too the extra slashes",
        "abstract": ""
      },
      {
        "id": 1945939,
        "score": 14,
        "vote": 0,
        "content": "It's because your '/new_sandbox/' begins with a / and thus is assumed to be relative to the root directory. Remove the leading /.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/28243832/what-is-the-meaning-of-a-forward-slash-in-a-python-method-signature-as-show",
    "keywords": [],
    "tags": [
      "python",
      "inspection",
      "python-interactive"
    ],
    "question": {
      "id": 28243832,
      "title": "What is the meaning of a forward slash &quot;/&quot; in a Python method signature, as shown by help(foo)?",
      "content": "In the signature returned interactively by help(foo), what is the meaning of a /? I thought it might be related to keyword-only arguments, but it's not.  When I create my own function with keyword-only arguments, positional and keyword-only arguments are separated by * (as expected), not by /.  What does the / mean?",
      "abstract": ""
    },
    "answers": [
      {
        "id": 28243933,
        "score": 91,
        "vote": 0,
        "content": "As explained here, the / as an argument marks the end of arguments that are positional only (see here), i.e. arguments you can't use as keyword parameters. In the case of __eq__(self, value, /) the slash is at the end, which means that all arguments are marked as positional only while in the case of your __init__ only self, i.e. nothing, is positional only. Edit:\nThis was previously only used for built-in functions but since Python 3.8, you can use this in your own functions. The natural companion of / is * which allows to mark the beginning of keyword-only arguments. Example using both: ",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/4488570/how-do-i-write-a-tab-in-python",
    "keywords": [],
    "tags": [
      "python",
      "tabs"
    ],
    "question": {
      "id": 4488570,
      "title": "How do I write a &quot;tab&quot; in Python?",
      "content": "Let's say I have a file. How do I write \"hello\" TAB \"alex\"?",
      "abstract": ""
    },
    "answers": [
      {
        "id": 65945746,
        "score": 2,
        "vote": 0,
        "content": "Assume I have a variable named file that contains a file.\nThen I could use file.write(\"hello\\talex\").",
        "abstract": ""
      },
      {
        "id": 62445955,
        "score": 4,
        "vote": 0,
        "content": "Here are some more exotic Python 3 ways to get \"hello\" TAB \"alex\" (tested with Python 3.6.10): \"hello\\N{TAB}alex\" \"hello\\N{tab}alex\" \"hello\\N{TaB}alex\" \"hello\\N{HT}alex\" \"hello\\N{CHARACTER TABULATION}alex\" \"hello\\N{HORIZONTAL TABULATION}alex\" \"hello\\x09alex\" \"hello\\u0009alex\" \"hello\\U00000009alex\" Actually, instead of using an escape sequence, it is possible to insert tab symbol directly into the string literal. Here is the code with a tabulation character to copy and try: \"hello alex\" If the tab in the string above won't be lost anywhere during copying the string then \"print(repr(< string from above >)\" should print 'hello\\talex'. See respective Python documentation for reference.",
        "abstract": ""
      },
      {
        "id": 4488596,
        "score": 193,
        "vote": 0,
        "content": "This is the code: The \\t inside the string is the escape sequence for the horizontal tabulation.",
        "abstract": ""
      },
      {
        "id": 47363488,
        "score": 15,
        "vote": 0,
        "content": "As it wasn't mentioned in any answers, just in case you want to align and space your text, you can use the string format features. (above python 2.5) Of course \\t is actually a TAB token whereas the described method generates spaces. Example: Another Example, left aligned:",
        "abstract": ""
      },
      {
        "id": 43390891,
        "score": 40,
        "vote": 0,
        "content": "The Python reference manual includes several string literals that can be used in a string. These special sequences of characters are replaced by the intended meaning of the escape sequence.  Here is a table of some of the more useful escape sequences and a description of the output from them. Basic Example If i wanted to print some data points separated by a tab space I could print this string. Returns Example for Lists Here is another example where we are printing the items of list and we want to sperate the items by a TAB. Returns Raw Strings  Note that raw strings (a string which include a prefix \"r\"), string literals will be ignored. This allows these special sequences of characters to be included in strings without being changed. Returns Which maybe an undesired output String Lengths It should also be noted that string literals are only one character in length. Returns The raw string has a length of 9.",
        "abstract": ""
      },
      {
        "id": 4488586,
        "score": 15,
        "vote": 0,
        "content": "It's usually \\t in command-line interfaces, which will convert the char \\t into the whitespace tab character. For example, hello\\talex -> hello--->alex.",
        "abstract": ""
      },
      {
        "id": 4488585,
        "score": 27,
        "vote": 0,
        "content": "You can use \\t in a string literal: \"hello\\talex\"",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/63490882/what-is-the-in-the-built-in-list-function-descriptions",
    "keywords": [],
    "tags": [
      "python",
      "list"
    ],
    "question": {
      "id": 63490882,
      "title": "What is the &quot; / &quot; in the built-in list function descriptions",
      "content": "At the end of the built-in list function descriptions is \"/\". What is it?",
      "abstract": ""
    },
    "answers": [
      {
        "id": 63490944,
        "score": 1,
        "vote": 0,
        "content": "From Python documentation about help() : Note that if a slash(/) appears in the parameter list of a function, when invoking help(), it means that the parameters prior to the slash are positional-only. and from the FAQ entry on positional-only parameters : What does the slash(/) in the parameter list of a function mean? A slash in the argument list of a function denotes that the parameters prior to it are positional-only. Positional-only parameters are the ones without an externally-usable name. Upon calling a function that accepts positional-only parameters, arguments are mapped to parameters based solely on their position. For example, divmod() is a function that accepts positional-only parameters. Its documentation looks like this: The slash at the end of the parameter list means that both parameters are positional-only. Thus, calling divmod() with keyword arguments would lead to an error:",
        "abstract": ""
      },
      {
        "id": 63490955,
        "score": 1,
        "vote": 0,
        "content": "There are three kinds of parameters in Python: When defining a function, a / is used to separate positional-only parameters (at least one) on the left and the rest on the right. If there is no / in the parameter list, there are no positional-only parameters. The syntax originated in the argument clinic, which is used to define functions for the CPython implementation. Its use appeared in help for such functions before it was added to the syntax of Python itself in PEP-570.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/56514297/bare-forward-slash-in-python-function-definition",
    "keywords": [],
    "tags": [
      "python",
      "arguments",
      "parameter-passing"
    ],
    "question": {
      "id": 56514297,
      "title": "Bare forward slash in Python function definition?",
      "content": "In the Python 3.8 Programming FAQ, I saw the following function definition: This is missing in the Python 3.7 version: What is this new / syntax? How does it relate to a / appearing in help() output? Note: this and this question are about help() annotation, whereas this question is about new syntax and any differences to the help() annotation.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 56514307,
        "score": 25,
        "vote": 0,
        "content": "The / as syntax was introduced in Python 3.8. The rationale for / in an argument list is given in PEP 570 -- Python Positional-Only Parameters: The new syntax will enable library authors to further control how their API can be called. It will allow designating which parameters must be called as positional-only, while preventing them from being called as keyword arguments. Previously, (informational) PEP 457 defined the syntax, but with a much more vague scope. This PEP takes the original proposal a step further by justifying the syntax and providing an implementation for the / syntax in function definitions. Similarities For all intents and purposes, if you understand help()'s / notation, then that's what is formally included as Python syntax in v3.8 via PEP 570. Differences PEP 570 -- Python Positional-Only Parameters PEP 457 -- Notation For Positional-Only Parameters There are already excellent answers on the meaning and usage of / in arguments. To save you the click through: A / means that all preceding parameters are positional-only parameters. Positional-only parameters before a / cannot be passed as name=value when calling the function. Python 3.8 What's New gives the following example: Valid function calls: Invalid function calls:",
        "abstract": ""
      }
    ]
  }
]