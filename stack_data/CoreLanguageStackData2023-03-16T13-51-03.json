[
  {
    "link": "https://stackoverflow.com/questions/69095606/adding-optional-arguments-to-a-function",
    "keywords": [],
    "tags": [
      "python-3.x",
      "type-hinting",
      "optional-parameters"
    ],
    "question": {
      "id": 69095606,
      "title": "Adding optional arguments to a function",
      "content": "I am working on a project where I'm supposed to add new features to an existing codebase. As part of this, I need to add an optional argument to one of the functions but just adding the optional argument is causing some of my unit tests to fail. The function looks like the following initially: After adding another optional argument it looks like this: The only change I'm making in the codebase is adding this optional argument and it is causing some of my unit tests to fail. I was wondering if someone knows what might be the reason ?",
      "abstract": ""
    },
    "answers": [
      {
        "id": 69095633,
        "score": 5,
        "vote": 0,
        "content": "Optional[list] means that the argument can either be a list or None. You are still required to pass it from the caller. If you want an argument that can be omitted you should use a default value, for example: assuming that None means an omitted argument in your function logic. Starting with Python 3.10, you can use the | operator to get rid of Union and Optional keywords:",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/9539921/how-do-i-define-a-function-with-optional-arguments",
    "keywords": [],
    "tags": [
      "python",
      "function",
      "arguments",
      "optional-parameters"
    ],
    "question": {
      "id": 9539921,
      "title": "How do I define a function with optional arguments?",
      "content": "I have a Python function which takes several arguments. Some of these arguments could be omitted in some scenarios. The arguments d through h are strings which each have different meanings. It is important that I can choose which optional parameters to pass in any combination. For example, (a, b, C, d, e), or (a, b, C, g, h), or (a, b, C, d, e, f, or all of them (these are my choices).  It would be great if I could overload the function - but I read that Python does not support overloading. I tried to insert some of the required int arguments in the list - and got an argument mismatch error. Right now I am sending empty strings in place of the first few missing arguments as placeholders. I would like to be able to call a function just using actual values. Is there any way to do this? Could I pass a list instead of the argument list? Right now the prototype using ctypes looks something like:",
      "abstract": ""
    },
    "answers": [
      {
        "id": 70002467,
        "score": 11,
        "vote": 0,
        "content": "Check this:",
        "abstract": ""
      },
      {
        "id": 67103403,
        "score": 75,
        "vote": 0,
        "content": "It is very easy just do this Instead of None you can type anything that should be in place if there was no argument for example if you will not write the value of the parameter like this foo() then it will print None because no argument is given and if you will GIVE it an argument like foo(\"hello world\") then it will print hello world... oh well I just forgot to tell y'all that these types of parameters i.e optional parameters, need to be behind all the other parameters. This means that, let's take the previous function and add another parameter b Now if you'll execute your python file it is going to raise an exception saying that Non-default arguments follow default arguments, so you gotta put the optional or non-default argument after the arguments which are required which means",
        "abstract": ""
      },
      {
        "id": 72512025,
        "score": 1,
        "vote": 0,
        "content": "To make AviÃ³n's answer work for vector argument inputs; Where M is some matrix and v some vector. Both test(M) and test(M,v) produce errors when I attempted to use if statements without using 'try/ except' statements. As mentioned by cem, upgrading to python 3.10 would allow the union (x|y) (or the Optional[...])functionality which might open some doors for alternative methods, but I'm using Anaconda spyder so I think I have to wait for a new release to use python 3.10.",
        "abstract": ""
      },
      {
        "id": 71352026,
        "score": 1,
        "vote": 0,
        "content": "To get a better sense of what's possible when passing parameters it's really helpful to refer to the various options: positional-or-keyword (arg or arg=\"default_value\"), positional-only (before /, in the parameter list), keyword-only (after *, in the parameter list), var-positional (typically *args) or var-keyword (typically **kwargs). See the Python documentation for an excellent summary; the various other answers to the question make use of most of these variations. Since you always have parameters a, b, c in your example and you appear to call them in a positional manner, you could make this more explicit by adding /,,",
        "abstract": ""
      },
      {
        "id": 70710559,
        "score": 22,
        "vote": 0,
        "content": "Required parameters first, optional parameters after. Optional parameters always with a =None. Easy and fast example:",
        "abstract": ""
      },
      {
        "id": 9539977,
        "score": 421,
        "vote": 0,
        "content": "Just use the *args parameter, which allows you to pass as many arguments as you want after your a,b,c. You would have to add some logic to map args->c,d,e,f but its a \"way\" of overloading. And it will print values of c,d,e,f Similarly you could use the kwargs argument and then you could name your parameters. And then kwargs would have a dictionary of all the parameters that are key valued after a,b",
        "abstract": ""
      },
      {
        "id": 9539945,
        "score": 301,
        "vote": 0,
        "content": "Try calling it like: obj.some_function( '1', 2, '3', g=\"foo\", h=\"bar\" ). After the required positional arguments, you can specify specific optional arguments by name.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/71618699/is-there-a-way-to-have-optional-arguments-in-a-function-in-python",
    "keywords": [],
    "tags": [
      "python",
      "function",
      "matplotlib"
    ],
    "question": {
      "id": 71618699,
      "title": "Is there a way to have optional arguments in a function in Python?",
      "content": "I have defined a function in Python which takes some arguments and plots a graph. I would like to extend this so that if certain additional optional arguments are passed into the function then it will plot another graph on the same set of axes but only if these optional arguments are passed into the function. The plotting of the data inside the function is not the issue but how would I create a function that will work if optional arguments are not passed? For example, I would like to define a function such as below which will work even if optional_arg3 and optional_arg4 are not passed. Any help would be really appreciated!",
      "abstract": ""
    },
    "answers": [
      {
        "id": 71618773,
        "score": 1,
        "vote": 0,
        "content": "This is easy in python by providing default values for arguments. So if no value is passed, the arguments take up the default value. Eg: since I only passed b and c, d takes up the default value of None\nSo output:",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/68168201/passing-optional-keyword-arguments-to-a-decorated-function",
    "keywords": [],
    "tags": [
      "python",
      "decorator"
    ],
    "question": {
      "id": 68168201,
      "title": "Passing optional keyword arguments to a decorated function",
      "content": "I would like to create a decorator that passes an optional keyword to the function it wraps. Something like this: Basically, if the wrapped function has a specific keyword, it should be provided by the decorator; otherwise, just run the wrapped function. What is the right way to accomplish this? Currently I'm just trying to pass in the keyword and check for a TypeError: but this seems brittle/unintuitive/weird.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 68407936,
        "score": 1,
        "vote": 0,
        "content": "To achieve that you can use the inspect module. Using the getfullargspec function, you can access all the argument names defined within the function.  One remark is that if you want to parameterise the default value being passed to the decorated function, you will need a decorator factory. Here is a code example: Using this decorator, the result of the following code would be: Notice that if you have keyword-only arguments, the decorator has to be slightly modified: Note that this implementation has an important limitation which is the fact that you must hard code the argument name that you will look for. This is the case, because python cannot cannot evaluate expressions for argument names. For example, if you try this implementation: Running the code would raise an error:",
        "abstract": ""
      },
      {
        "id": 68168423,
        "score": 0,
        "vote": 0,
        "content": "To inspect the argument names, you can dig into the function object like this:",
        "abstract": ""
      },
      {
        "id": 68168421,
        "score": 0,
        "vote": 0,
        "content": "The sintaxe is like this: Or:",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/67402942/python-optional-arguments",
    "keywords": [],
    "tags": [
      "python",
      "function",
      "arguments",
      "parameter-passing"
    ],
    "question": {
      "id": 67402942,
      "title": "python: optional arguments",
      "content": "I would like to obtain a function that works like this: Operation should be an optional argument that specifies the operation to be performed. By default, it should consider the addition operation. I was not able to achieve this using *args and **kwargs, probably because I didn't actually get how they work. Thank you Edit: Sorry I was making a stupid mistake. Thanks anyway.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 67403023,
        "score": 1,
        "vote": 0,
        "content": "you can use optional arguments:",
        "abstract": ""
      },
      {
        "id": 67402968,
        "score": 3,
        "vote": 0,
        "content": "You just need to provide a default value for the parameter. *args lets you collect arbitrary positional arguments in a single tuple named args. **kwargs works the same, but for keyword arguments, collecting them in a dict: **kwargs is typically used when you just need to pass an unknown set of arguments on to another function call. In your case here, you know that an argument named operation is to be used, so you can specify it by name in the parameter list. You can also require that it be passed as a keyword argument, like so: Now operations(a, b, 'subtraction') is illegal; it must be called like operations(a, b) or operations(a, b, operation='subtraction').",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/67027960/optional-arguments-without-a-default-value",
    "keywords": [],
    "tags": [
      "python",
      "function",
      "optional-parameters"
    ],
    "question": {
      "id": 67027960,
      "title": "Optional arguments without a default value",
      "content": "The Python Documentation for parameters says the following: Parameter - A named entity in a function (or method) definition that specifies an argument (or in some cases, arguments) that the function can accept... Parameters can specify both optional and required arguments, as well as default values for some optional arguments. Purely out of curiosity, I am wondering why the word some was included. Is it possible to have an optional argument without a default value?",
      "abstract": ""
    },
    "answers": [
      {
        "id": 67040767,
        "score": 1,
        "vote": 0,
        "content": "*argsÂ andÂ **kwargsÂ are optional arguments without default values -- comment byÂ Pranav Hosangadi",
        "abstract": ""
      },
      {
        "id": 67028677,
        "score": 3,
        "vote": 0,
        "content": "In recent versions you can define functions arguments multiple ways. Here is how they can be defined and called: where a and b are positional or keyword args and c is an optional positional or keyword arg or where a and b are positional or keyword args and c is a mandatory kwarg and d is an optional kwarg or where a and b are positional only args, c is a positional or keyword arg and d is a mandatory kwarg and e is an optional kwarg",
        "abstract": ""
      },
      {
        "id": 67028449,
        "score": 2,
        "vote": 0,
        "content": "The * prefix means \"arbitrary number of positional parameters\", and parameters prefixed by it can be declared without default value.\nThe word 'some' relates to that reason, you don't have to provide default values for all optional arguments.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/63808915/is-there-any-way-to-define-a-python-function-with-leading-optional-arguments",
    "keywords": [],
    "tags": [
      "python",
      "optional-arguments"
    ],
    "question": {
      "id": 63808915,
      "title": "Is there any way to define a Python function with leading optional arguments?",
      "content": "As we know, optional arguments must be at the end of the arguments list, like below: def func(arg1, arg2, ..., argN=default) I saw some exceptions in the PyTorch package. For example, we can find this issue in torch.randint. As it is shown, it has a leading optional argument in its positional arguments! How could be possible? How can we define a function in a similar way as above?",
      "abstract": ""
    },
    "answers": [
      {
        "id": 63812075,
        "score": 4,
        "vote": 0,
        "content": "My other answer was about reverse-engineering the torch library, however I want to dedicate this answer on how a similar mechanism can be achieved in a non-hacky, straight forward way. We have the multipledispatch library: A relatively sane approach to multiple dispatch in Python.\nThis implementation of multiple dispatch is efficient, mostly complete, performs static analysis to avoid conflicts, and provides optional namespace support. It looks good too. So let's utilize it:",
        "abstract": ""
      },
      {
        "id": 63810326,
        "score": 2,
        "vote": 0,
        "content": "A single function is not allowed to have only leading optional parameters: [...] If a parameter has a default value, all following parameters up until the â*â must also have a default value â this is a syntactic restriction that is not expressed by the grammar. Note this excludes keyword-only parameters, which never receive arguments by position. If desired, one can emulate such behaviour by manually implementing the argument to parameter matching. For example, one can dispatch based on arity, or explicitly match variadic arguments. A simple form of dispatch achieves function overloading by iterating signatures and calling the first matching one.",
        "abstract": ""
      },
      {
        "id": 63810047,
        "score": 2,
        "vote": 0,
        "content": "Your discovery fascinated me, as it's indeed illegal in Python (and all other languages I know) to have leading optional arguments, that would surely raise in our case: I got suspicious, yet I've searched on the source code: I found, at lines 566-596 of TensorFactories.cpp that there are actually several (!) implementations of randint: This pattern reoccurred at lines 466-471 of gen_pyi.py where it generates type signatures for top-level functions: So, what basically happens is that there is no \"real\" optional parameter rather than several functions, in which one is present and in the other, it's not. That means, when randint is called without the low parameter it is set as 0: Further research, as for OP request on how that possible that there are multiple functions with the same name and different arguments: Returning once again to gen_pyi.py we see that these functions are collected to unsorted_function_hints defined at line 436, then it's used to create function_hints at lines 509-513, and finally function_hints is set to env at line 670. The env dictionary is used to write pyi stub files. These stub files make use of Function/method overloading as described in PEP-484. Function/method overloading, make use of @overload decorator: The @overload decorator allows describing functions and methods that support multiple different combinations of argument types. This pattern is used frequently in builtin modules and types. Here is an example: So we basically have a definition of the same function __getitem__ with different arguments. And another example: Here we have a definition of the same function map with a different number of arguments.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/56817339/optional-argument-with-a-mandatory-keyword",
    "keywords": [],
    "tags": [
      "python"
    ],
    "question": {
      "id": 56817339,
      "title": "Optional argument with a mandatory keyword",
      "content": "Is it possible to have an optional argument for a function, but make the use of a keyword necessary if it is to be declared in the function call?  For example, requires a mandatory first argument, followed by some unspecified number of position and optional arguments (with optional keywords), but while useme2declare requires the keyword to be used in call, it is also a mandatory argument. How can I make it optional in a call? Putting it before *otherargs makes the keyword optional too. EDIT: Please read my question carefully. I want to make the use of a keyword MANDATORY for useme2declare every time the function is called, and at the same time have entry of useme2declare optional.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 56817421,
        "score": 4,
        "vote": 0,
        "content": "You can make the argument useme2declare keyword-only with * in the signature after all positional args, and use a default value for the base case: Here is an example: Note that, you can't use variable length positional arguments (e.g. *args) when using this. But you're free to use variable length keyword arguments if you want:",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/50397741/optional-argument-in-class-function-in-python",
    "keywords": [],
    "tags": [
      "python",
      "python-3.x",
      "class"
    ],
    "question": {
      "id": 50397741,
      "title": "Optional argument in class/function in Python",
      "content": "I wonder if there are any good practices in python how to handle cases if I want to pass optional argument to function. I have this function in class: What I can do right now is just handle that by if, but I don't think this is the best way to do that.",
      "abstract": ""
    },
    "answers": [
      {
        "id": 50397783,
        "score": 3,
        "vote": 0,
        "content": "If you want to pass optional arguments to function consider using*args and **kwargs or just use default parameter. e.g with *args and **kwargs e.g. with default parameter.",
        "abstract": ""
      }
    ]
  },
  {
    "link": "https://stackoverflow.com/questions/49583152/passing-an-optional-function-and-optional-parameters-to-another-function-in-py",
    "keywords": [],
    "tags": [
      "python",
      "python-3.x",
      "typeerror",
      "args"
    ],
    "question": {
      "id": 49583152,
      "title": "Passing an optional function (and optional parameters) to another function in Python?",
      "content": "I'm new to learning Python and have enough under my belt to start attempting a beginner's Tic-Tac-Toe program. My issue is thus: I want to have a generic input function called getInput() which will get input from the user, strip trailing white space from that input, and THEN, if a function was passed to it via the optional parameter \"specialTest\", getInput() will run the input through this provided function and return the output which the specialTest function spat out. Sometimes this specialTest function will need additional arguments besides the user input. Assume for my purposes that the user input will always be the first argument and is required, and that any additional args will come afterwards. I tried to implement this situation via *args, and I got it working if the specialTest function had no additional arguments. But the first time I try to feed it additional arguments, it fails. So for example, getInput(\"Age?\", specialTest=int) works. It prompts for user input and feeds it through the int() function, finally returning the output as an integer. But when I try to pass getInput() a function which has an additional argument - an ordered dictionary which contains strings as keys and dictionaries as values - the program fails with TypeTypeError: getInput() got multiple values for argument 'specialTest'. What needs to be adjusted to get this working as intended? Code:",
      "abstract": ""
    },
    "answers": [
      {
        "id": 49583388,
        "score": 1,
        "vote": 0,
        "content": "In order to support supplying the same parameter via a positional or keyword argument, Python converts any keyword arguments that can be into positional arguments.  That creates the conflict in your example.  Syntactically, what you want can be achieved by simply omitting the argument: Or you can resolve the ambiguity with a âkeyword-onlyâ argument: Then the keyword argument cannot be converted, so there is no collision.  (This can be emulated in PythonÂ 2 by using **kw to accept arbitrary keyword arguments and then checking that only the expected one is actually provided.) But the question you should be asking is âHow can I preset some arguments to a function used as a callback?â, to which the answer is either a lambda: or functools.partial: With either of these, you donât need TestArgs at all.  The partial approach doesnât support supplying trailing positional arguments (like varargs), but your nametoMove doesnât actually want those anyway (as established in the comments).  So in all the approaches above you omit the *.",
        "abstract": ""
      }
    ]
  }
]